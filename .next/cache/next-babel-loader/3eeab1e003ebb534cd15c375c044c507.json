{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js\";\nimport Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax'; // Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFCOLS = 7;\nconst TOTALNUMOFSQUARES = TOTALNUMOFROWS * TOTALNUMOFCOLS;\n\nclass Connect4Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(TOTALNUMOFROWS).fill(Array(TOTALNUMOFCOLS).fill(null)),\n      // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n      isHumanTurn: true,\n      mostRecentSelectionRowIdx: null,\n      mostRecentSelectionColIdx: null\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.findLegalRowIdxWithinColumn = this.findLegalRowIdxWithinColumn.bind(this);\n    this.calculateWinner = this.calculateWinner.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  handleClick(selectedColIdx) {\n    const squares = this.state.squares.slice();\n    const legalRowPositionToFillIdx = this.findLegalRowIdxWithinColumn(selectedColIdx);\n\n    if (legalRowPositionToFillIdx !== -1) {\n      squares[(legalRowPositionToFillIdx, selectedColIdx)] = this.state.isHumanTurn ? HUMAN : AI;\n      this.setState(prevState => ({\n        squares: squares,\n        isHumanTurn: !prevState.isHumanTurn,\n        mostRecentSelectionRowIdx: legalRowPositionToFillIdx,\n        mostRecentSelectionColIdx: selectedColIdx\n      }));\n    }\n  }\n\n  handleReset() {\n    this.setState({\n      squares: Array(TOTALNUMOFROWS).fill(Array(TOTALNUMOFCOLS).fill(null)),\n      // either HUMAN or AI or null\n      isHumanTurn: true,\n      mostRecentSelectionRowIdx: null,\n      mostRecentSelectionColIdx: null\n    });\n  }\n\n  findLegalRowIdxWithinColumn(selectedColIdx) {\n    /**\n     * Returns the row index of a legal square that can be filled.\n     * Note the legal square will be within the same column as selectedColIdx.\n     * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n     */\n    const didNotFindLegalRowIdxWithinColumnIdx = -1;\n\n    for (let rowIdx = 0; rowIdx < this.state.squares.length; rowIdx++) {\n      if (this.state.squares[rowIdx][selectedColIdx] === null) {\n        return rowIdx;\n      }\n    }\n\n    return didNotFindLegalRowIdxWithinColumnIdx;\n  }\n\n  calculateWinner() {\n    /**\n     * Returns the name of the winner HUMAN or AI. Else returns null.\n     */\n    // Check horizontal\n    // Check vertical\n    // Check Diagonal\n    return null;\n  }\n\n  render() {\n    const isGameOver = !this.state.squares.map(row => row.includes(null)).includes(true); // calculate the winner\n\n    const winner = this.calculateWinner(); // let the AI make a move if it's the AI's turn and the game isn't over\n\n    if (winner === null && !this.state.isHumanTurn && !isGameOver) {\n      let aiSelectedIdx = minimax(this.state.squares.slice(), 0, AI, HUMAN); // let max = 6;\n      // let min = 0;\n      // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n      // let aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n      // while (aiSelectedIdx === -1) {\n      //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n      //     aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n      // }\n\n      const squares = this.state.squares.slice();\n      squares[aiSelectedIdx] = AI;\n      this.setState(prevState => ({\n        squares: squares,\n        isHumanTurn: !prevState.isHumanTurn,\n        selectedSquareIdx: aiSelectedIdx\n      }));\n    } // setup the display\n\n\n    const horizontalRule = /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        visibility: \"hidden\",\n        marginBottom: \"0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 32\n    }, this);\n\n    const button = /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        outline: \"none\",\n        userSelect: \"none\"\n      },\n      onClick: this.handleReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 24\n    }, this);\n\n    let display = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"d-flex justify-content-center\",\n        children: \"Good luck!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [button, horizontalRule]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: this.state.squares,\n          onClick: this.handleClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 76\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true);\n\n    if (winner !== null) {\n      // Someone has won the game. Display winner, and disable the board.\n      display = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [winner === HUMAN ? /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"d-flex justify-content-center\",\n          children: \"\\uD83C\\uDF89 Congratulations! You won! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 49\n        }, this) : /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"d-flex justify-content-center\",\n          children: \"The AI won! Try again!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 134\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: [button, horizontalRule]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(Board, {\n            squares: this.state.squares,\n            onClick: () => {\n              return;\n              /* this does nothing... Disables onClick */\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 76\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true);\n    } else if (winner === null && isGameOver) {\n      // It's a tie. The game is over. Disable the board.\n      display = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"d-flex justify-content-center\",\n          children: \"It's a draw! Try again!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: [button, horizontalRule]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(Board, {\n            squares: this.state.squares,\n            onClick: () => {\n              return;\n              /* this does nothing... Disables onClick */\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 76\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"d-flex justify-content-center\",\n        children: \"Welcome to Connect 4!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), display]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\nexport default Connect4Game;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js"],"names":["Board","React","Component","minimax","HUMAN","AI","TOTALNUMOFROWS","TOTALNUMOFCOLS","TOTALNUMOFSQUARES","Connect4Game","constructor","props","state","squares","Array","fill","isHumanTurn","mostRecentSelectionRowIdx","mostRecentSelectionColIdx","handleClick","bind","findLegalRowIdxWithinColumn","calculateWinner","handleReset","selectedColIdx","slice","legalRowPositionToFillIdx","setState","prevState","didNotFindLegalRowIdxWithinColumnIdx","rowIdx","length","render","isGameOver","map","row","includes","winner","aiSelectedIdx","selectedSquareIdx","horizontalRule","visibility","marginBottom","button","outline","userSelect","display","textAlign"],"mappings":"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","sourcesContent":["import Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax';\n\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFCOLS = 7;\nconst TOTALNUMOFSQUARES = TOTALNUMOFROWS * TOTALNUMOFCOLS;\n\n\nclass Connect4Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(TOTALNUMOFROWS).fill(Array(TOTALNUMOFCOLS).fill(null)), // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n            isHumanTurn: true,\n            mostRecentSelectionRowIdx : null,\n            mostRecentSelectionColIdx: null\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.findLegalRowIdxWithinColumn = this.findLegalRowIdxWithinColumn.bind(this);\n        this.calculateWinner = this.calculateWinner.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n    }\n\n    handleClick(selectedColIdx) {\n        const squares = this.state.squares.slice();\n        const legalRowPositionToFillIdx = this.findLegalRowIdxWithinColumn(selectedColIdx);\n        if (legalRowPositionToFillIdx !== -1) {\n            squares[legalRowPositionToFillIdx, selectedColIdx] = this.state.isHumanTurn ? HUMAN : AI;\n            this.setState(prevState => ({\n                squares: squares,\n                isHumanTurn: !prevState.isHumanTurn,\n                mostRecentSelectionRowIdx: legalRowPositionToFillIdx,\n                mostRecentSelectionColIdx: selectedColIdx\n            }));\n        }\n    }\n\n    handleReset() {\n        this.setState({\n            squares: Array(TOTALNUMOFROWS).fill(Array(TOTALNUMOFCOLS).fill(null)), // either HUMAN or AI or null\n            isHumanTurn: true,\n            mostRecentSelectionRowIdx : null,\n            mostRecentSelectionColIdx: null\n        });\n    }\n\n    findLegalRowIdxWithinColumn(selectedColIdx) {\n        /**\n         * Returns the row index of a legal square that can be filled.\n         * Note the legal square will be within the same column as selectedColIdx.\n         * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n         */\n        const didNotFindLegalRowIdxWithinColumnIdx = -1;\n        for (let rowIdx = 0; rowIdx < this.state.squares.length; rowIdx++) {\n            if (this.state.squares[rowIdx][selectedColIdx] === null) {\n                return rowIdx;\n            }\n        }\n        return didNotFindLegalRowIdxWithinColumnIdx;\n    }\n\n    calculateWinner() {\n        /**\n         * Returns the name of the winner HUMAN or AI. Else returns null.\n         */\n\n        // Check horizontal\n\n\n        // Check vertical\n\n\n        // Check Diagonal\n\n  \n\n        return null;\n    }\n\n    render() {\n\n        const isGameOver = !this.state.squares.map(row => row.includes(null)).includes(true);\n        \n        // calculate the winner\n        const winner = this.calculateWinner();\n\n        // let the AI make a move if it's the AI's turn and the game isn't over\n        if (winner === null && !this.state.isHumanTurn && !isGameOver) {\n            let aiSelectedIdx = minimax(this.state.squares.slice(), 0, AI, HUMAN);\n            // let max = 6;\n            // let min = 0;\n            // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n            // let aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n            // while (aiSelectedIdx === -1) {\n            //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n            //     aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n            // }\n            const squares = this.state.squares.slice();\n            squares[aiSelectedIdx] = AI;\n            this.setState(prevState => ({\n                squares : squares,\n                isHumanTurn: !prevState.isHumanTurn,\n                selectedSquareIdx: aiSelectedIdx\n            }));\n        }\n\n        // setup the display\n\n        const horizontalRule = <hr style={{visibility: \"hidden\", marginBottom: \"0\"}} />;\n        const button = <button style={{outline: \"none\", userSelect: \"none\"}} onClick={this.handleReset}>Reset</button>;\n\n        let display =   <>\n                            <h5 className=\"d-flex justify-content-center\" >Good luck!</h5>\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={this.handleClick} /></div>\n                        </>;\n\n        if (winner !== null) { // Someone has won the game. Display winner, and disable the board.\n            display =   <>\n                            {winner === HUMAN ? <h5 className=\"d-flex justify-content-center\">🎉 Congratulations! You won! 🎉</h5> : <h5 className=\"d-flex justify-content-center\">The AI won! Try again!</h5>}\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={() => {return; /* this does nothing... Disables onClick */}} /></div>\n                        </>;\n        } else if (winner === null && isGameOver) { // It's a tie. The game is over. Disable the board.\n            display =   <>\n                            <h5 className=\"d-flex justify-content-center\" >It's a draw! Try again!</h5>\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={() => {return; /* this does nothing... Disables onClick */}} /></div>\n                        </>;\n        }\n\n        return (\n            <div className=\"container\">\n                <h2 className=\"d-flex justify-content-center\">Welcome to Connect 4!</h2>\n                {display}\n            </div>\n        );\n    };\n};\n\nexport default Connect4Game;"]},"metadata":{},"sourceType":"module"}