{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax'; // Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nvar HUMAN = \"you\";\nvar AI = \"ai\";\nvar TOTALNUMOFROWS = 6;\nvar TOTALNUMOFCOLS = 7;\nvar TOTALNUMOFSQUARES = TOTALNUMOFROWS * TOTALNUMOFCOLS;\n\nfunction newSquares() {\n  var squares = new Array(TOTALNUMOFROWS);\n\n  for (var rowIdx = 0; rowIdx < squares.length; rowIdx++) {\n    squares[rowIdx] = new Array(TOTALNUMOFCOLS);\n\n    for (var colIdx = 0; colIdx < squares[rowIdx].length; colIdx++) {\n      squares[rowIdx][colIdx] = null;\n    }\n  }\n\n  return squares;\n}\n\nvar Connect4Game = /*#__PURE__*/function (_React$Component) {\n  _inherits(Connect4Game, _React$Component);\n\n  var _super = _createSuper(Connect4Game);\n\n  function Connect4Game(props) {\n    var _this;\n\n    _classCallCheck(this, Connect4Game);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      squares: newSquares(),\n      // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n      isHumanTurn: true,\n      mostRecentSelectionRowIdx: null,\n      mostRecentSelectionColIdx: null\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.findLegalRowIdxWithinColumn = _this.findLegalRowIdxWithinColumn.bind(_assertThisInitialized(_this));\n    _this.calculateWinner = _this.calculateWinner.bind(_assertThisInitialized(_this));\n    _this.handleReset = _this.handleReset.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Connect4Game, [{\n    key: \"handleClick\",\n    value: function handleClick(selectedColIdx) {\n      var squares = this.state.squares.slice();\n      var legalRowPositionToFillIdx = this.findLegalRowIdxWithinColumn(selectedColIdx);\n\n      if (legalRowPositionToFillIdx !== -1) {\n        squares[legalRowPositionToFillIdx][selectedColIdx] = this.state.isHumanTurn ? HUMAN : AI;\n        this.setState(function (prevState) {\n          return {\n            squares: squares,\n            isHumanTurn: !prevState.isHumanTurn,\n            mostRecentSelectionRowIdx: legalRowPositionToFillIdx,\n            mostRecentSelectionColIdx: selectedColIdx\n          };\n        });\n      }\n    }\n  }, {\n    key: \"handleReset\",\n    value: function handleReset() {\n      this.setState({\n        squares: newSquares(),\n        // either HUMAN or AI or null\n        isHumanTurn: true,\n        mostRecentSelectionRowIdx: null,\n        mostRecentSelectionColIdx: null\n      });\n    }\n  }, {\n    key: \"findLegalRowIdxWithinColumn\",\n    value: function findLegalRowIdxWithinColumn(selectedColIdx) {\n      /**\n       * Returns the row index of a legal square that can be filled.\n       * Note the legal square will be within the same column as selectedColIdx.\n       * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n       */\n      var didNotFindLegalRowIdxWithinColumnIdx = -1;\n\n      for (var rowIdx = 0; rowIdx < this.state.squares.length; rowIdx++) {\n        if (this.state.squares[rowIdx][selectedColIdx] === null) {\n          return rowIdx;\n        }\n      }\n\n      return didNotFindLegalRowIdxWithinColumnIdx;\n    }\n  }, {\n    key: \"calculateWinner\",\n    value: function calculateWinner() {\n      /**\n       * Returns the name of the winner HUMAN or AI. Else returns null.\n       */\n      var winner = null;\n      var WINDOW = 4;\n      var mostRecentPlayer = this.state.isHumanTurn ? AI : HUMAN;\n\n      if (this.state.mostRecentSelectionRowIdx === null) {\n        return winner;\n      } // Check horizontal\n\n\n      for (var _colIdx = 0; _colIdx + WINDOW <= TOTALNUMOFCOLS; _colIdx++) {\n        var fourHorizontalAdjacentSquares = this.state.squares[this.state.mostRecentSelectionRowIdx].slice(_colIdx, _colIdx + WINDOW);\n\n        if (fourHorizontalAdjacentSquares.every(function (val) {\n          return val === mostRecentPlayer;\n        })) {\n          winner = mostRecentPlayer;\n          return winner;\n        }\n      } // Check vertical\n\n\n      for (var _rowIdx = 0; _rowIdx + WINDOW <= TOTALNUMOFROWS; _rowIdx++) {\n        var matchingMostRecentPlayerCounter = 0;\n\n        for (var offset = 0; offset < WINDOW; offset++) {\n          if (this.state.squares[_rowIdx + offset][this.state.mostRecentSelectionColIdx] === mostRecentPlayer) {\n            matchingMostRecentPlayerCounter++;\n          }\n\n          if (matchingMostRecentPlayerCounter === WINDOW) {\n            winner = mostRecentPlayer;\n            return winner;\n          }\n        }\n      } // Check Diagonal\n      // check positively sloped diagonal... from bottom-left to top-right\n\n\n      var positiveDiagonalArr = [];\n      var rowIdx = this.state.mostRecentSelectionRowIdx;\n      var colIdx = this.state.mostRecentSelectionColIdx;\n\n      while (rowIdx - 1 >= 0 && colIdx - 1 >= 0) {\n        rowIdx--;\n        colIdx--;\n      }\n\n      while (rowIdx < TOTALNUMOFROWS && colIdx < TOTALNUMOFCOLS) {\n        positiveDiagonalArr.push(this.state.squares[rowIdx][colIdx]);\n        rowIdx++;\n        colIdx++;\n      }\n\n      for (var i = 0; i + WINDOW <= positiveDiagonalArr.length; i++) {\n        var fourPositiveDiagonalAdjacentSquares = positiveDiagonalArr.slice(i, i + WINDOW);\n\n        if (fourPositiveDiagonalAdjacentSquares.every(function (val) {\n          return val === mostRecentPlayer;\n        })) {\n          winner = mostRecentPlayer;\n          return winner;\n        }\n      } // check negatively sloped diagonal... from top-left to bottom-right\n\n\n      var negativeDiagonalArr = [];\n      rowIdx = this.state.mostRecentSelectionRowIdx;\n      colIdx = this.state.mostRecentSelectionColIdx;\n\n      while (rowIdx - 1 >= 0 && colIdx + 1 < TOTALNUMOFCOLS) {\n        rowIdx--;\n        colIdx++;\n      }\n\n      return winner;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isGameOver = !this.state.squares.map(function (row) {\n        return row.includes(null);\n      }).includes(true); // calculate the winner\n\n      var winner = this.calculateWinner(); // let the AI make a move if it's the AI's turn and the game isn't over\n      // if (winner === null && !this.state.isHumanTurn && !isGameOver) {\n      //     let aiSelectedIdx = minimax(this.state.squares.slice(), 0, AI, HUMAN);\n      //     // let max = 6;\n      //     // let min = 0;\n      //     // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n      //     // let aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n      //     // while (aiSelectedIdx === -1) {\n      //     //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n      //     //     aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n      //     // }\n      //     const squares = this.state.squares.slice();\n      //     squares[aiSelectedIdx] = AI;\n      //     this.setState(prevState => ({\n      //         squares : squares,\n      //         isHumanTurn: !prevState.isHumanTurn,\n      //         selectedSquareIdx: aiSelectedIdx\n      //     }));\n      // }\n      // setup the display\n\n      var horizontalRule = /*#__PURE__*/_jsxDEV(\"hr\", {\n        style: {\n          visibility: \"hidden\",\n          marginBottom: \"0\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 32\n      }, this);\n\n      var button = /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          outline: \"none\",\n          userSelect: \"none\"\n        },\n        onClick: this.handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 24\n      }, this);\n\n      var display = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"d-flex justify-content-center\",\n          children: \"Good luck!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: [button, horizontalRule]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(Board, {\n            squares: this.state.squares,\n            onClick: this.handleClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 76\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true);\n\n      if (winner !== null) {\n        // Someone has won the game. Display winner, and disable the board.\n        display = /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [winner === HUMAN ? /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"d-flex justify-content-center\",\n            children: \"\\uD83C\\uDF89 Congratulations! You won! \\uD83C\\uDF89\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 49\n          }, this) : /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"d-flex justify-content-center\",\n            children: \"The AI won! Try again!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 134\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: \"center\"\n            },\n            children: [button, horizontalRule]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-center\",\n            children: /*#__PURE__*/_jsxDEV(Board, {\n              squares: this.state.squares,\n              onClick: function onClick() {\n                return;\n                /* this does nothing... Disables onClick */\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 76\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true);\n      } else if (winner === null && isGameOver) {\n        // It's a tie. The game is over. Disable the board.\n        display = /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"d-flex justify-content-center\",\n            children: \"It's a draw! Try again!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: \"center\"\n            },\n            children: [button, horizontalRule]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-center\",\n            children: /*#__PURE__*/_jsxDEV(Board, {\n              squares: this.state.squares,\n              onClick: function onClick() {\n                return;\n                /* this does nothing... Disables onClick */\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 76\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"d-flex justify-content-center\",\n          children: \"Welcome to Connect 4!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 17\n        }, this), display]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return Connect4Game;\n}(React.Component);\n\n;\nexport default Connect4Game;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js"],"names":["Board","React","Component","minimax","HUMAN","AI","TOTALNUMOFROWS","TOTALNUMOFCOLS","TOTALNUMOFSQUARES","newSquares","squares","Array","rowIdx","length","colIdx","Connect4Game","props","state","isHumanTurn","mostRecentSelectionRowIdx","mostRecentSelectionColIdx","handleClick","bind","findLegalRowIdxWithinColumn","calculateWinner","handleReset","selectedColIdx","slice","legalRowPositionToFillIdx","setState","prevState","didNotFindLegalRowIdxWithinColumnIdx","winner","WINDOW","mostRecentPlayer","fourHorizontalAdjacentSquares","every","val","matchingMostRecentPlayerCounter","offset","positiveDiagonalArr","push","i","fourPositiveDiagonalAdjacentSquares","negativeDiagonalArr","isGameOver","map","row","includes","horizontalRule","visibility","marginBottom","button","outline","userSelect","display","textAlign"],"mappings":"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","sourcesContent":["import Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax';\n\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFCOLS = 7;\nconst TOTALNUMOFSQUARES = TOTALNUMOFROWS * TOTALNUMOFCOLS;\n\nfunction newSquares() {\n    const squares = new Array(TOTALNUMOFROWS);\n    for (let rowIdx = 0; rowIdx < squares.length; rowIdx++) {\n        squares[rowIdx] = new Array(TOTALNUMOFCOLS);\n        for (let colIdx = 0; colIdx < squares[rowIdx].length; colIdx++) {\n            squares[rowIdx][colIdx] = null;\n        }\n    }\n    return squares;\n}\n\n\nclass Connect4Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: newSquares(), // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n            isHumanTurn: true,\n            mostRecentSelectionRowIdx : null,\n            mostRecentSelectionColIdx: null\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.findLegalRowIdxWithinColumn = this.findLegalRowIdxWithinColumn.bind(this);\n        this.calculateWinner = this.calculateWinner.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n    }\n\n    handleClick(selectedColIdx) {\n        const squares = this.state.squares.slice();\n        const legalRowPositionToFillIdx = this.findLegalRowIdxWithinColumn(selectedColIdx);\n        if (legalRowPositionToFillIdx !== -1) {\n            squares[legalRowPositionToFillIdx][selectedColIdx] = this.state.isHumanTurn ? HUMAN : AI;\n            this.setState(prevState => ({\n                squares: squares,\n                isHumanTurn: !prevState.isHumanTurn,\n                mostRecentSelectionRowIdx: legalRowPositionToFillIdx,\n                mostRecentSelectionColIdx: selectedColIdx\n            }));\n        }\n    }\n\n    handleReset() {\n        this.setState({\n            squares: newSquares(), // either HUMAN or AI or null\n            isHumanTurn: true,\n            mostRecentSelectionRowIdx : null,\n            mostRecentSelectionColIdx: null\n        });\n    }\n\n    findLegalRowIdxWithinColumn(selectedColIdx) {\n        /**\n         * Returns the row index of a legal square that can be filled.\n         * Note the legal square will be within the same column as selectedColIdx.\n         * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n         */\n        const didNotFindLegalRowIdxWithinColumnIdx = -1;\n        for (let rowIdx = 0; rowIdx < this.state.squares.length; rowIdx++) {\n            if (this.state.squares[rowIdx][selectedColIdx] === null) {\n                return rowIdx;\n            }\n        }\n        return didNotFindLegalRowIdxWithinColumnIdx;\n    }\n\n    calculateWinner() {\n        /**\n         * Returns the name of the winner HUMAN or AI. Else returns null.\n         */\n\n        let winner = null;\n\n        const WINDOW = 4;\n\n        const mostRecentPlayer = this.state.isHumanTurn ? AI : HUMAN;\n\n        if (this.state.mostRecentSelectionRowIdx === null) {\n            return winner;\n        }\n\n        // Check horizontal\n        for (let colIdx = 0; colIdx + WINDOW <= TOTALNUMOFCOLS; colIdx++) {\n            const fourHorizontalAdjacentSquares = this.state.squares[this.state.mostRecentSelectionRowIdx].slice(colIdx, colIdx + WINDOW);\n            if (fourHorizontalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n                winner = mostRecentPlayer;\n                return winner;\n            }\n        }\n\n\n        // Check vertical\n        for (let rowIdx = 0; rowIdx + WINDOW <= TOTALNUMOFROWS; rowIdx++) {\n            let matchingMostRecentPlayerCounter = 0;\n            for (let offset = 0; offset < WINDOW; offset++) {\n                if (this.state.squares[rowIdx + offset][this.state.mostRecentSelectionColIdx] === mostRecentPlayer) {\n                    matchingMostRecentPlayerCounter++;\n                }\n                if (matchingMostRecentPlayerCounter === WINDOW) {\n                    winner = mostRecentPlayer;\n                    return winner;\n                }\n            }\n        }\n\n\n        // Check Diagonal\n\n        // check positively sloped diagonal... from bottom-left to top-right\n        const positiveDiagonalArr = [];\n        let rowIdx = this.state.mostRecentSelectionRowIdx;\n        let colIdx = this.state.mostRecentSelectionColIdx;\n\n        while (rowIdx - 1 >= 0 && colIdx - 1 >= 0) {\n            rowIdx--;\n            colIdx--;\n        }\n\n        while (rowIdx < TOTALNUMOFROWS && colIdx < TOTALNUMOFCOLS) {\n            positiveDiagonalArr.push(this.state.squares[rowIdx][colIdx]);\n            rowIdx++;\n            colIdx++;\n        }\n\n        for (let i = 0; i + WINDOW <= positiveDiagonalArr.length; i++) {\n            const fourPositiveDiagonalAdjacentSquares = positiveDiagonalArr.slice(i, i + WINDOW);\n            if (fourPositiveDiagonalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n                winner = mostRecentPlayer;\n                return winner;\n            }\n        }\n\n        // check negatively sloped diagonal... from top-left to bottom-right\n        const negativeDiagonalArr = [];\n        rowIdx = this.state.mostRecentSelectionRowIdx;\n        colIdx = this.state.mostRecentSelectionColIdx;\n\n        while (rowIdx - 1 >= 0 && colIdx + 1 < TOTALNUMOFCOLS) {\n            rowIdx--;\n            colIdx++;\n        }\n  \n\n        return winner;\n    }\n\n    render() {\n\n        const isGameOver = !this.state.squares.map(row => row.includes(null)).includes(true);\n        \n        // calculate the winner\n        const winner = this.calculateWinner();\n\n        // let the AI make a move if it's the AI's turn and the game isn't over\n        // if (winner === null && !this.state.isHumanTurn && !isGameOver) {\n        //     let aiSelectedIdx = minimax(this.state.squares.slice(), 0, AI, HUMAN);\n        //     // let max = 6;\n        //     // let min = 0;\n        //     // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n        //     // let aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n        //     // while (aiSelectedIdx === -1) {\n        //     //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n        //     //     aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n        //     // }\n        //     const squares = this.state.squares.slice();\n        //     squares[aiSelectedIdx] = AI;\n        //     this.setState(prevState => ({\n        //         squares : squares,\n        //         isHumanTurn: !prevState.isHumanTurn,\n        //         selectedSquareIdx: aiSelectedIdx\n        //     }));\n        // }\n\n        // setup the display\n\n        const horizontalRule = <hr style={{visibility: \"hidden\", marginBottom: \"0\"}} />;\n        const button = <button style={{outline: \"none\", userSelect: \"none\"}} onClick={this.handleReset}>Reset</button>;\n\n        let display =   <>\n                            <h5 className=\"d-flex justify-content-center\" >Good luck!</h5>\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={this.handleClick} /></div>\n                        </>;\n\n        if (winner !== null) { // Someone has won the game. Display winner, and disable the board.\n            display =   <>\n                            {winner === HUMAN ? <h5 className=\"d-flex justify-content-center\">🎉 Congratulations! You won! 🎉</h5> : <h5 className=\"d-flex justify-content-center\">The AI won! Try again!</h5>}\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={() => {return; /* this does nothing... Disables onClick */}} /></div>\n                        </>;\n        } else if (winner === null && isGameOver) { // It's a tie. The game is over. Disable the board.\n            display =   <>\n                            <h5 className=\"d-flex justify-content-center\" >It's a draw! Try again!</h5>\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={() => {return; /* this does nothing... Disables onClick */}} /></div>\n                        </>;\n        }\n\n        return (\n            <div className=\"container\">\n                <h2 className=\"d-flex justify-content-center\">Welcome to Connect 4!</h2>\n                {display}\n            </div>\n        );\n    };\n};\n\nexport default Connect4Game;"]},"metadata":{},"sourceType":"module"}