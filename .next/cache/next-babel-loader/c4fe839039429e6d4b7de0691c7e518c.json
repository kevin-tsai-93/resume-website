{"ast":null,"code":"const TOTALNUMOFCOLUMNS = 7;\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFSQUARES = 42;\n\nfunction findLegalSquare(board, idx) {\n  /**\n   * Returns the index of a legal square that can be filled.\n   * Note the legal square will be within the same column as idx.\n   * If all the squares within idx's column are filled, then this function returns -1.\n   */\n  const didNotFindLegalSquareIdx = -1;\n  let traversingIdx = idx;\n\n  while (traversingIdx - TOTALNUMOFCOLUMNS >= 0) {\n    traversingIdx -= TOTALNUMOFCOLUMNS;\n  }\n\n  for (traversingIdx; traversingIdx < TOTALNUMOFSQUARES; traversingIdx += TOTALNUMOFCOLUMNS) {\n    if (board[traversingIdx] === null) {\n      return traversingIdx;\n    }\n  }\n\n  return didNotFindLegalSquareIdx;\n}\n\nfunction calculateScoreForThese4Squares(arr, player, opposingPlayer) {\n  /**\n   * Returns the score for the given arr, assuming the length of the arr is 4\n   */\n  let score = 0;\n\n  if (arr.filter(val => val === player).length === 4) {\n    score += 100;\n  } else if (arr.filter(val => val === player).length === 3 && arr.filter(val => val === null).length === 1) {\n    score += 5;\n  } else if (arr.filter(val => val === player).length === 2 && arr.filter(val => val === null).length === 2) {\n    score += 2;\n  }\n\n  if (arr.filter(val => val === opposingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n    score -= 15;\n  }\n\n  return score;\n}\n\nfunction calculateScoreForMove(board, idx, player, opposingPlayer) {\n  /**\n   * Returns the score for placing player's piece onto the board whose location is idx.\n   */\n  let score = 0;\n  const WINDOWLENGTH = 4;\n  const CENTERCOLUMNIDX = Math.floor(TOTALNUMOFCOLUMNS / 2);\n  const newBoard = board.slice();\n  newBoard[idx] = player; // score for center piece (preference center location)\n\n  for (let i = CENTERCOLUMNIDX; i < TOTALNUMOFSQUARES; i += TOTALNUMOFCOLUMNS) {\n    if (newBoard[i] === player) {\n      score += 2;\n    }\n  } // Score for horizontal\n  // Scores are calculated for window lengths of 4\n\n\n  for (let currRowIdx = 0; currRowIdx < TOTALNUMOFSQUARES; currRowIdx += TOTALNUMOFCOLUMNS) {\n    for (let offset = 0; offset <= TOTALNUMOFCOLUMNS - WINDOWLENGTH; offset++) {\n      const horizontalFourAdjacentSquares = newBoard.slice(currRowIdx + offset, currRowIdx + offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(horizontalFourAdjacentSquares, player, opposingPlayer);\n    }\n  } // Score for vertical\n  // Scores are calculated for window lengths of 4\n\n\n  for (let currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n    const aColumnOfSquaresArr = [];\n\n    for (let i = currColIdx; i < TOTALNUMOFSQUARES; i += TOTALNUMOFCOLUMNS) {\n      // gets the stack of squares in the given column denoted by currColIdx\n      aColumnOfSquaresArr.push(newBoard[i]);\n    }\n\n    for (let i = 0; i <= TOTALNUMOFROWS - WINDOWLENGTH; i++) {\n      const verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(i, i + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(verticalFourAdjacentSquares, player, opposingPlayer);\n    }\n  } // Score for diagonal\n  // Scores are calculated for window lengths of 4\n  // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (let currIdx = TOTALNUMOFCOLUMNS * (Math.floor(TOTALNUMOFROWS / 2) - 1); currIdx >= 0; currIdx -= TOTALNUMOFCOLUMNS) {\n    const aDiagonalOfSquaresArr = []; // assemble the diagonal of squares arr for the given currIdx\n\n    for (let i = 0; currIdx + i * TOTALNUMOFCOLUMNS + i < TOTALNUMOFSQUARES; i++) {\n      aDiagonalOfSquaresArr.push(newBoard[currIdx + i * TOTALNUMOFCOLUMNS + i]);\n    } // slice the diagonal squares array with window lengths of 4 and calculate score\n\n\n    for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n    }\n  } // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (let currIdx = TOTALNUMOFCOLUMNS * Math.floor(TOTALNUMOFROWS / 2) + TOTALNUMOFCOLUMNS - 1; currIdx < TOTALNUMOFSQUARES; currIdx += TOTALNUMOFCOLUMNS) {\n    const aDiagonalOfSquaresArr = []; // assemble the diagonal of squares arr for the given currIdx\n\n    for (let i = 0; currIdx - i * TOTALNUMOFCOLUMNS - i >= 0; i++) {\n      aDiagonalOfSquaresArr.push(newBoard[currIdx - i * TOTALNUMOFCOLUMNS - i]);\n    } // slice the diagonal squares array with window lengths of 4 and calculate score\n\n\n    for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n    }\n  } // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (let currIdx = TOTALNUMOFCOLUMNS * Math.floor(TOTALNUMOFROWS / 2); currIdx < TOTALNUMOFSQUARES; currIdx += TOTALNUMOFCOLUMNS) {\n    const aDiagonalOfSquaresArr = []; // assemble the diagonal of squares arr for the given currIdx\n\n    for (let i = 0; currIdx - i * TOTALNUMOFCOLUMNS + i >= 0; i++) {\n      aDiagonalOfSquaresArr.push(newBoard[currIdx - i * TOTALNUMOFCOLUMNS + i]);\n    } // slice the diagonal squares array with window lengths of 4 and calculate score\n\n\n    for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n    }\n  } // CONTINUE HERE AFTER DINNER\n  // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = TOTALNUMOFCOLUMNS * (Math.floor(TOTALNUMOFROWS / 2) - 1); currRowIdx < TOTALNUMOFSQUARES; currRowIdx += TOTALNUMOFCOLUMNS) {\n    const aDiagonalOfSquaresArr = []; // assemble the diagonal of squares arr for the given currRowIdx\n\n    for (let i = 0; currRowIdx - i * TOTALNUMOFCOLUMNS + i >= 0; i++) {\n      aDiagonalOfSquaresArr.push(newBoard[currRowIdx - i * TOTALNUMOFCOLUMNS + i]);\n    } // slice the diagonal squares array with window lengths of 4 and calculate score\n\n\n    for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n    }\n  }\n\n  return score;\n}\n\nfunction idxOfMaxOfArr(arr) {\n  let max = arr[0];\n  let maxIdx = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIdx = i;\n    }\n  }\n\n  return maxIdx;\n}\n\nfunction minimax(board, depth, maximizingPlayer, minimizingPlayer) {\n  /**\n   * minimax algorithm to determine how the ai will make its move\n   * refer to the pseudocode on wikipedia\n   */\n  // get all the possible moves that the player can drop into\n  // this should be an array with the indices\n  const possibleMovesArr = [0, 1, 2, 3, 4, 5, 6].map(idx => findLegalSquare(board, idx)).filter(idx => idx !== -1);\n  const scoresForPossibleMovesArr = possibleMovesArr.map(idx => calculateScoreForMove(board, idx, maximizingPlayer, minimizingPlayer));\n  alert(scoresForPossibleMovesArr);\n  return possibleMovesArr[idxOfMaxOfArr(scoresForPossibleMovesArr)];\n}\n\nexport default minimax;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/connect4/minimax.js"],"names":["TOTALNUMOFCOLUMNS","TOTALNUMOFROWS","TOTALNUMOFSQUARES","findLegalSquare","board","idx","didNotFindLegalSquareIdx","traversingIdx","calculateScoreForThese4Squares","arr","player","opposingPlayer","score","filter","val","length","calculateScoreForMove","WINDOWLENGTH","CENTERCOLUMNIDX","Math","floor","newBoard","slice","i","currRowIdx","offset","horizontalFourAdjacentSquares","currColIdx","aColumnOfSquaresArr","push","verticalFourAdjacentSquares","currIdx","aDiagonalOfSquaresArr","diagonalFourAdjacentSquares","idxOfMaxOfArr","max","maxIdx","minimax","depth","maximizingPlayer","minimizingPlayer","possibleMovesArr","map","scoresForPossibleMovesArr","alert"],"mappings":"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","sourcesContent":["const TOTALNUMOFCOLUMNS = 7;\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFSQUARES = 42;\n\nfunction findLegalSquare(board, idx) {\n    /**\n     * Returns the index of a legal square that can be filled.\n     * Note the legal square will be within the same column as idx.\n     * If all the squares within idx's column are filled, then this function returns -1.\n     */\n    const didNotFindLegalSquareIdx = -1;\n    let traversingIdx = idx;\n    while (traversingIdx - TOTALNUMOFCOLUMNS >= 0) {\n        traversingIdx -= TOTALNUMOFCOLUMNS;\n    }\n    for (traversingIdx; traversingIdx < TOTALNUMOFSQUARES; traversingIdx += TOTALNUMOFCOLUMNS) {\n        if (board[traversingIdx] === null) {\n            return traversingIdx;\n        }\n    }\n    return didNotFindLegalSquareIdx;\n}\n\nfunction calculateScoreForThese4Squares(arr, player, opposingPlayer) {\n    /**\n     * Returns the score for the given arr, assuming the length of the arr is 4\n     */\n\n    let score = 0;\n\n    if (arr.filter(val => val === player).length === 4) {\n        score += 100;\n    } else if (arr.filter(val => val === player).length === 3 && arr.filter(val => val === null).length === 1) {\n        score += 5;\n    } else if (arr.filter(val => val === player).length === 2 && arr.filter(val => val === null).length === 2) {\n        score += 2;\n    }\n\n    if (arr.filter(val => val === opposingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n        score -= 15;\n    }\n\n    return score;\n}\n\nfunction calculateScoreForMove(board, idx, player, opposingPlayer) {\n    /**\n     * Returns the score for placing player's piece onto the board whose location is idx.\n     */\n\n    let score = 0;\n    const WINDOWLENGTH = 4;\n    const CENTERCOLUMNIDX = Math.floor(TOTALNUMOFCOLUMNS / 2);\n    const newBoard = board.slice();\n    newBoard[idx] = player;\n\n    // score for center piece (preference center location)\n    for (let i = CENTERCOLUMNIDX; i < TOTALNUMOFSQUARES; i += TOTALNUMOFCOLUMNS) {\n        if (newBoard[i] === player) {\n            score += 2;\n        }\n    }\n\n\n    // Score for horizontal\n    // Scores are calculated for window lengths of 4\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFSQUARES; currRowIdx += TOTALNUMOFCOLUMNS) {\n        for (let offset = 0; offset <= TOTALNUMOFCOLUMNS - WINDOWLENGTH; offset++) {\n            const horizontalFourAdjacentSquares = newBoard.slice(currRowIdx + offset, currRowIdx + offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(horizontalFourAdjacentSquares, player, opposingPlayer);\n        }\n    }\n\n    // Score for vertical\n    // Scores are calculated for window lengths of 4\n    for (let currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n        const aColumnOfSquaresArr = [];\n        for (let i = currColIdx; i < TOTALNUMOFSQUARES; i += TOTALNUMOFCOLUMNS) { // gets the stack of squares in the given column denoted by currColIdx\n            aColumnOfSquaresArr.push(newBoard[i]);\n        }\n        for (let i = 0; i <= TOTALNUMOFROWS - WINDOWLENGTH; i++) {\n            const verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(i, i + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(verticalFourAdjacentSquares, player, opposingPlayer);\n        }\n\n    }\n\n    // Score for diagonal\n    // Scores are calculated for window lengths of 4\n\n    // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currIdx = TOTALNUMOFCOLUMNS * (Math.floor(TOTALNUMOFROWS / 2) - 1); currIdx >= 0; currIdx -= TOTALNUMOFCOLUMNS) {\n        const aDiagonalOfSquaresArr = [];\n        // assemble the diagonal of squares arr for the given currIdx\n        for (let i = 0; currIdx + i * TOTALNUMOFCOLUMNS + i < TOTALNUMOFSQUARES; i++) {\n            aDiagonalOfSquaresArr.push(newBoard[currIdx + i * TOTALNUMOFCOLUMNS + i]);\n        }\n        // slice the diagonal squares array with window lengths of 4 and calculate score\n        for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n        }\n    }\n\n    // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currIdx = (TOTALNUMOFCOLUMNS * Math.floor(TOTALNUMOFROWS / 2)) + TOTALNUMOFCOLUMNS - 1; currIdx < TOTALNUMOFSQUARES; currIdx += TOTALNUMOFCOLUMNS) {\n        const aDiagonalOfSquaresArr = [];\n        // assemble the diagonal of squares arr for the given currIdx\n        for (let i = 0; currIdx - i * TOTALNUMOFCOLUMNS - i >= 0; i++) {\n            aDiagonalOfSquaresArr.push(newBoard[currIdx - i * TOTALNUMOFCOLUMNS - i]);\n        }\n        // slice the diagonal squares array with window lengths of 4 and calculate score\n        for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n        }\n    }\n\n    // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currIdx = TOTALNUMOFCOLUMNS * Math.floor(TOTALNUMOFROWS / 2); currIdx < TOTALNUMOFSQUARES; currIdx += TOTALNUMOFCOLUMNS) {\n        const aDiagonalOfSquaresArr = [];\n        // assemble the diagonal of squares arr for the given currIdx\n        for (let i = 0; currIdx - i * TOTALNUMOFCOLUMNS + i >= 0; i++) {\n            aDiagonalOfSquaresArr.push(newBoard[currIdx - i * TOTALNUMOFCOLUMNS + i]);\n        }\n        // slice the diagonal squares array with window lengths of 4 and calculate score\n        for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n        }\n    }\n\n    // CONTINUE HERE AFTER DINNER\n\n    // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = TOTALNUMOFCOLUMNS * (Math.floor(TOTALNUMOFROWS / 2) - 1); currRowIdx < TOTALNUMOFSQUARES; currRowIdx += TOTALNUMOFCOLUMNS) {\n        const aDiagonalOfSquaresArr = [];\n        // assemble the diagonal of squares arr for the given currRowIdx\n        for (let i = 0; currRowIdx - i * TOTALNUMOFCOLUMNS + i >= 0; i++) {\n            aDiagonalOfSquaresArr.push(newBoard[currRowIdx - i * TOTALNUMOFCOLUMNS + i]);\n        }\n        // slice the diagonal squares array with window lengths of 4 and calculate score\n        for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n        }\n    }\n\n    return score;\n}\n\nfunction idxOfMaxOfArr(arr) {\n    let max = arr[0];\n    let maxIdx = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i]\n            maxIdx = i;\n        }\n    }\n    return maxIdx;\n}\n\nfunction minimax(board, depth, maximizingPlayer, minimizingPlayer) {\n    /**\n     * minimax algorithm to determine how the ai will make its move\n     * refer to the pseudocode on wikipedia\n     */\n\n    // get all the possible moves that the player can drop into\n    // this should be an array with the indices\n    const possibleMovesArr = [0,1,2,3,4,5,6].map(idx => findLegalSquare(board, idx)).filter(idx => idx !== -1);\n    const scoresForPossibleMovesArr = possibleMovesArr.map(idx => calculateScoreForMove(board, idx, maximizingPlayer, minimizingPlayer));\n    alert(scoresForPossibleMovesArr);\n    return possibleMovesArr[idxOfMaxOfArr(scoresForPossibleMovesArr)];\n}\n\nexport default minimax;"]},"metadata":{},"sourceType":"module"}