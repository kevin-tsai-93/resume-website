{"ast":null,"code":"import deepCopy2DArray from './deepCopy2DArray';\nexport default function minimax(board, depth, isMaximizingPlayer, maximizingPlayer, minimizingPlayer) {\n  /**\n   * minimax algorithm to determine how and where the ai will make its move\n   * refer to the pseudocode on wikipedia\n   * it will return the optimal rowIdx and colIdx, the location to place the piece onto the board\n   * return value looks like [optimalRowIdx, optimalColIdx]\n   * \n   * board is a row x col array\n   * depth tells you how far down the tree you will traverse to find the calculated score\n   * maximizingPlayer is the player that is trying to win... in this case the AI = \"ai\"\n   * minimizingPlayer is the player that is trying to prevent the maximizingPlayer from winning... in this case HUMAN = \"you\"\n   */\n  const TOTALNUMOFROWS = board.length; // might not need this here\n\n  const TOTALNUMOFCOLUMNS = board[0].length; // get all the possible moves that the player can drop onto the board\n  // will have 2 arrays: column index array and row index array\n  // refer to the note below about the relationship between these two arrays\n\n  const columnIndicesOfBoard = []; // this will look like [0,1,2,3,4,5,6]\n\n  for (let i = 0; i < TOTALNUMOFCOLUMNS; i++) {\n    columnIndicesOfBoard.push(i);\n  } // note that possibleRowIndicesToPlacePieceOntoBoard is relative to columnIndicesOfBoard\n  // i.e. columnIndicesOfBoard = [0,1,2,3,4,5,6]\n  // i.e. possibleRowIndicesToPlacePieceOntoBoard = [3,3,4,2,1,2,1]\n  // this means board[3][0]... board[3][1]... board[4][2]... board[2][3]... board[1][4]... etc are pieces that can be placed onto the board\n\n\n  const possibleRowIndicesToPlacePieceOntoBoard = columnIndicesOfBoard.map(colIdx => findLegalRowIdxWithinColumn(board, colIdx)); // note that possibleRowIndicesToPlacePieceOntoBoard might have -1 values\n\n  let maxScore = null;\n  let optimalRowIdx;\n  let optimalColIdx;\n  const scoresForPossibleMovesArr = []; // delete this later\n\n  for (let i = 0; i < columnIndicesOfBoard.length; i++) {\n    if (possibleRowIndicesToPlacePieceOntoBoard[i] !== -1) {\n      let rowIdx = possibleRowIndicesToPlacePieceOntoBoard[i];\n      let colIdx = columnIndicesOfBoard[i];\n      let calculatedScore = calculateScoreForMove(rowIdx, colIdx, board, maximizingPlayer, minimizingPlayer);\n      scoresForPossibleMovesArr.push(calculatedScore); // delete this later\n\n      if (maxScore === null || calculatedScore >= maxScore) {\n        maxScore = calculatedScore;\n        optimalRowIdx = rowIdx;\n        optimalColIdx = colIdx;\n      }\n    }\n  }\n\n  alert(scoresForPossibleMovesArr); // delete this later\n\n  return [optimalRowIdx, optimalColIdx];\n}\n\nfunction isGameOver(board, maximizingPlayer, minimizingPlayer) {\n  if (isWinner(board, maximizingPlayer)) {\n    return true;\n  } else if (isWinner(board, minimizingPlayer)) {\n    return true;\n  } else if (isBoardAllFilled(board)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction isBoardAllFilled(board) {\n  return board.map(row => row.every(piece => piece !== null)).every(isRowFilled => isRowFilled === true);\n}\n\nfunction isWinner(board, player) {\n  const WINDOWLENGTH = 4;\n  const TOTALNUMOFROWS = board.length;\n  const TOTALNUMOFCOLUMNS = board[0].length; // check horizontal\n\n  for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFCOLUMNS; offset++) {\n      const horizontalFourAdjacentSquares = newBoard[currRowIdx].slice(offset, offset + WINDOWLENGTH);\n\n      if (horizontalFourAdjacentSquares.every(val => val === player)) {\n        return true;\n      }\n    }\n  } // Check vertical\n\n\n  for (let currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n    const aColumnOfSquaresArr = [];\n\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n      aColumnOfSquaresArr.push(newBoard[currRowIdx][currColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFROWS; offset++) {\n      const verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n\n      if (verticalFourAdjacentSquares.every(val => val === player)) {\n        return true;\n      }\n    }\n  } // Check diagonals\n  // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx < TOTALNUMOFROWS && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx++, runningColIdx++) {\n      aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n\n      if (diagonalFourAdjacentSquares.every(val => val === player)) {\n        return true;\n      }\n    }\n  } // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx >= 0 && runningColIdx > 0; runningRowIdx--, runningColIdx--) {\n      aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n\n      if (diagonalFourAdjacentSquares.every(val => val === player)) {\n        return true;\n      }\n    }\n  } // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx >= 0 && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx--, runningColIdx++) {\n      aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n\n      if (diagonalFourAdjacentSquares.every(val => val === player)) {\n        return true;\n      }\n    }\n  } // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx < TOTALNUMOFROWS && runningColIdx > 0; runningRowIdx++, runningColIdx--) {\n      aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n\n      if (diagonalFourAdjacentSquares.every(val => val === player)) {\n        return true;\n      }\n    }\n  } // if you reach here, there is no winner\n\n\n  return false;\n}\n\nfunction findLegalRowIdxWithinColumn(board, selectedColIdx) {\n  /**\n   * Returns the row index of a legal square that can be filled given the board (2 dimensional row x col).\n   * Note the legal square will be within the same column as selectedColIdx.\n   * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n   */\n  const didNotFindLegalRowIdxWithinColumnIdx = -1;\n\n  for (let rowIdx = 0; rowIdx < board.length; rowIdx++) {\n    if (board[rowIdx][selectedColIdx] === null) {\n      return rowIdx;\n    }\n  }\n\n  return didNotFindLegalRowIdxWithinColumnIdx;\n}\n\nfunction calculateScoreForThese4Squares(arr, maximizingPlayer, minimizingPlayer) {\n  /**\n   * Returns the score for the given arr, assuming the length of the arr is 4\n   */\n  let score = 0;\n\n  if (arr.filter(val => val === maximizingPlayer).length === 4) {\n    score += 100;\n  } else if (arr.filter(val => val === maximizingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n    score += 5;\n  } else if (arr.filter(val => val === maximizingPlayer).length === 2 && arr.filter(val => val === null).length === 2) {\n    score += 2;\n  }\n\n  if (arr.filter(val => val === minimizingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n    score -= 15;\n  }\n\n  return score;\n}\n\nfunction calculateScoreForMove(rowIdx, colIdx, board, maximizingPlayer, minimizingPlayer) {\n  /**\n   * Returns the score for placing maximizingPlayer's piece onto the board whose location is rowIdx and colIdx.\n   */\n  let score = 0;\n  const TOTALNUMOFROWS = board.length;\n  const TOTALNUMOFCOLUMNS = board[0].length;\n  const WINDOWLENGTH = 4;\n  const CENTERCOLUMNIDX = Math.floor(TOTALNUMOFCOLUMNS / 2);\n  const newBoard = deepCopy2DArray(board);\n  newBoard[rowIdx][colIdx] = maximizingPlayer; // score for center piece (preference center location)\n\n  for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    if (newBoard[currRowIdx][CENTERCOLUMNIDX] === maximizingPlayer) {\n      score += 2;\n    }\n  } // Score for horizontal\n  // Scores are calculated for window lengths of 4\n\n\n  for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFCOLUMNS; offset++) {\n      const horizontalFourAdjacentSquares = newBoard[currRowIdx].slice(offset, offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(horizontalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Score for vertical\n  // Scores are calculated for window lengths of 4\n\n\n  for (let currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n    const aColumnOfSquaresArr = [];\n\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n      aColumnOfSquaresArr.push(newBoard[currRowIdx][currColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFROWS; offset++) {\n      const verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(verticalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Score for diagonal\n  // Scores are calculated for window lengths of 4\n  // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx < TOTALNUMOFROWS && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx++, runningColIdx++) {\n      aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx >= 0 && runningColIdx > 0; runningRowIdx--, runningColIdx--) {\n      aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx >= 0 && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx--, runningColIdx++) {\n      aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx < TOTALNUMOFROWS && runningColIdx > 0; runningRowIdx++, runningColIdx--) {\n      aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  }\n\n  return score;\n}","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/connect4/minimax.js"],"names":["deepCopy2DArray","minimax","board","depth","isMaximizingPlayer","maximizingPlayer","minimizingPlayer","TOTALNUMOFROWS","length","TOTALNUMOFCOLUMNS","columnIndicesOfBoard","i","push","possibleRowIndicesToPlacePieceOntoBoard","map","colIdx","findLegalRowIdxWithinColumn","maxScore","optimalRowIdx","optimalColIdx","scoresForPossibleMovesArr","rowIdx","calculatedScore","calculateScoreForMove","alert","isGameOver","isWinner","isBoardAllFilled","row","every","piece","isRowFilled","player","WINDOWLENGTH","currRowIdx","offset","horizontalFourAdjacentSquares","newBoard","slice","val","currColIdx","aColumnOfSquaresArr","verticalFourAdjacentSquares","Math","floor","aDiagonalOfSquaresArr","runningRowIdx","runningColIdx","diagonalFourAdjacentSquares","selectedColIdx","didNotFindLegalRowIdxWithinColumnIdx","calculateScoreForThese4Squares","arr","score","filter","CENTERCOLUMNIDX"],"mappings":"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","sourcesContent":["import deepCopy2DArray from './deepCopy2DArray';\n\nexport default function minimax(board, depth, isMaximizingPlayer, maximizingPlayer, minimizingPlayer) {\n    /**\n     * minimax algorithm to determine how and where the ai will make its move\n     * refer to the pseudocode on wikipedia\n     * it will return the optimal rowIdx and colIdx, the location to place the piece onto the board\n     * return value looks like [optimalRowIdx, optimalColIdx]\n     * \n     * board is a row x col array\n     * depth tells you how far down the tree you will traverse to find the calculated score\n     * maximizingPlayer is the player that is trying to win... in this case the AI = \"ai\"\n     * minimizingPlayer is the player that is trying to prevent the maximizingPlayer from winning... in this case HUMAN = \"you\"\n     */\n\n    const TOTALNUMOFROWS = board.length; // might not need this here\n    const TOTALNUMOFCOLUMNS = board[0].length;\n\n    // get all the possible moves that the player can drop onto the board\n    // will have 2 arrays: column index array and row index array\n    // refer to the note below about the relationship between these two arrays\n    const columnIndicesOfBoard = []; // this will look like [0,1,2,3,4,5,6]\n    for (let i = 0; i < TOTALNUMOFCOLUMNS; i++) {\n        columnIndicesOfBoard.push(i);\n    }\n    // note that possibleRowIndicesToPlacePieceOntoBoard is relative to columnIndicesOfBoard\n    // i.e. columnIndicesOfBoard = [0,1,2,3,4,5,6]\n    // i.e. possibleRowIndicesToPlacePieceOntoBoard = [3,3,4,2,1,2,1]\n    // this means board[3][0]... board[3][1]... board[4][2]... board[2][3]... board[1][4]... etc are pieces that can be placed onto the board\n    const possibleRowIndicesToPlacePieceOntoBoard = columnIndicesOfBoard.map(colIdx => findLegalRowIdxWithinColumn(board, colIdx)); // note that possibleRowIndicesToPlacePieceOntoBoard might have -1 values\n    let maxScore = null;\n    let optimalRowIdx;\n    let optimalColIdx;\n\n\n\n    const scoresForPossibleMovesArr = []; // delete this later\n\n    for (let i = 0; i < columnIndicesOfBoard.length; i++) {\n        if (possibleRowIndicesToPlacePieceOntoBoard[i] !== -1) {\n            let rowIdx = possibleRowIndicesToPlacePieceOntoBoard[i];\n            let colIdx = columnIndicesOfBoard[i];\n            let calculatedScore = calculateScoreForMove(rowIdx, colIdx, board, maximizingPlayer, minimizingPlayer);\n            scoresForPossibleMovesArr.push(calculatedScore); // delete this later\n            if (maxScore === null || calculatedScore >= maxScore) {\n                maxScore = calculatedScore;\n                optimalRowIdx = rowIdx;\n                optimalColIdx = colIdx;\n            }\n        }\n    }\n    alert(scoresForPossibleMovesArr); // delete this later\n    return [optimalRowIdx, optimalColIdx];\n}\n\nfunction isGameOver(board, maximizingPlayer, minimizingPlayer) {\n    if (isWinner(board, maximizingPlayer)) {\n        return true;\n    } else if (isWinner(board, minimizingPlayer)) {\n        return true;\n    } else if (isBoardAllFilled(board)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction isBoardAllFilled(board) {\n    return board.map(row => row.every(piece => piece !== null)).every(isRowFilled => isRowFilled === true);\n}\n\nfunction isWinner(board, player) {\n    const WINDOWLENGTH = 4;\n    const TOTALNUMOFROWS = board.length;\n    const TOTALNUMOFCOLUMNS = board[0].length;\n\n    // check horizontal\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFCOLUMNS; offset++) {\n            const horizontalFourAdjacentSquares = newBoard[currRowIdx].slice(offset, offset + WINDOWLENGTH);\n            if (horizontalFourAdjacentSquares.every(val => val === player)) {\n                return true;\n            }\n        }\n    }\n\n    // Check vertical\n    for (let currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n        const aColumnOfSquaresArr = [];\n        for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n            aColumnOfSquaresArr.push(newBoard[currRowIdx][currColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFROWS; offset++) {\n            const verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            if (verticalFourAdjacentSquares.every(val => val === player)) {\n                return true;\n            }\n        }\n    }\n\n    // Check diagonals\n\n    // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx < TOTALNUMOFROWS && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx++, runningColIdx++) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            if (diagonalFourAdjacentSquares.every(val => val === player)) {\n                return true;\n            }\n        }\n    }\n\n    // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx >= 0 && runningColIdx > 0; runningRowIdx--, runningColIdx--) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            if (diagonalFourAdjacentSquares.every(val => val === player)) {\n                return true;\n            }\n        }\n    }\n\n    // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx >= 0 && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx--, runningColIdx++) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            if (diagonalFourAdjacentSquares.every(val => val === player)) {\n                return true;\n            }\n        }\n    }\n\n    // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx < TOTALNUMOFROWS && runningColIdx > 0; runningRowIdx++, runningColIdx--) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            if (diagonalFourAdjacentSquares.every(val => val === player)) {\n                return true;\n            }\n        }\n    }\n\n    // if you reach here, there is no winner\n    return false;\n\n}\n\nfunction findLegalRowIdxWithinColumn(board, selectedColIdx) {\n    /**\n     * Returns the row index of a legal square that can be filled given the board (2 dimensional row x col).\n     * Note the legal square will be within the same column as selectedColIdx.\n     * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n     */\n    const didNotFindLegalRowIdxWithinColumnIdx = -1;\n    for (let rowIdx = 0; rowIdx < board.length; rowIdx++) {\n        if (board[rowIdx][selectedColIdx] === null) {\n            return rowIdx;\n        }\n    }\n    return didNotFindLegalRowIdxWithinColumnIdx;\n}\n\nfunction calculateScoreForThese4Squares(arr, maximizingPlayer, minimizingPlayer) {\n    /**\n     * Returns the score for the given arr, assuming the length of the arr is 4\n     */\n\n    let score = 0;\n\n    if (arr.filter(val => val === maximizingPlayer).length === 4) {\n        score += 100;\n    } else if (arr.filter(val => val === maximizingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n        score += 5;\n    } else if (arr.filter(val => val === maximizingPlayer).length === 2 && arr.filter(val => val === null).length === 2) {\n        score += 2;\n    }\n\n    if (arr.filter(val => val === minimizingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n        score -= 15;\n    }\n\n    return score;\n}\n\nfunction calculateScoreForMove(rowIdx, colIdx, board, maximizingPlayer, minimizingPlayer) {\n    /**\n     * Returns the score for placing maximizingPlayer's piece onto the board whose location is rowIdx and colIdx.\n     */\n\n    let score = 0;\n\n    const TOTALNUMOFROWS = board.length;\n    const TOTALNUMOFCOLUMNS = board[0].length;\n    const WINDOWLENGTH = 4;\n    const CENTERCOLUMNIDX = Math.floor(TOTALNUMOFCOLUMNS / 2);\n\n    const newBoard = deepCopy2DArray(board);\n    newBoard[rowIdx][colIdx] = maximizingPlayer;\n\n    // score for center piece (preference center location)\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        if (newBoard[currRowIdx][CENTERCOLUMNIDX] === maximizingPlayer) {\n            score += 2;\n        }\n    }\n\n\n    // Score for horizontal\n    // Scores are calculated for window lengths of 4\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFCOLUMNS; offset++) {\n            const horizontalFourAdjacentSquares = newBoard[currRowIdx].slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(horizontalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Score for vertical\n    // Scores are calculated for window lengths of 4\n    for (let currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n        const aColumnOfSquaresArr = [];\n        for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n            aColumnOfSquaresArr.push(newBoard[currRowIdx][currColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFROWS; offset++) {\n            const verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(verticalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Score for diagonal\n    // Scores are calculated for window lengths of 4\n\n    // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx < TOTALNUMOFROWS && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx++, runningColIdx++) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx >= 0 && runningColIdx > 0; runningRowIdx--, runningColIdx--) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx >= 0 && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx--, runningColIdx++) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx < TOTALNUMOFROWS && runningColIdx > 0; runningRowIdx++, runningColIdx--) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    return score;\n}"]},"metadata":{},"sourceType":"module"}