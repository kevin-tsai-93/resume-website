{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js\";\nimport Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax'; // Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFCOLS = 7;\n\nfunction newSquares() {\n  const squares = new Array(TOTALNUMOFROWS);\n\n  for (let rowIdx = 0; rowIdx < squares.length; rowIdx++) {\n    squares[rowIdx] = new Array(TOTALNUMOFCOLS);\n\n    for (let colIdx = 0; colIdx < squares[rowIdx].length; colIdx++) {\n      squares[rowIdx][colIdx] = null;\n    }\n  }\n\n  return squares;\n}\n\nclass Connect4Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: newSquares(),\n      // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n      isHumanTurn: true,\n      mostRecentSelectionRowIdx: null,\n      mostRecentSelectionColIdx: null\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.findLegalRowIdxWithinColumn = this.findLegalRowIdxWithinColumn.bind(this);\n    this.calculateWinner = this.calculateWinner.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  handleClick(selectedColIdx) {\n    const squares = this.state.squares.slice();\n    const legalRowPositionToFillIdx = this.findLegalRowIdxWithinColumn(selectedColIdx);\n\n    if (legalRowPositionToFillIdx !== -1) {\n      squares[legalRowPositionToFillIdx][selectedColIdx] = this.state.isHumanTurn ? HUMAN : AI;\n      this.setState(prevState => ({\n        squares: squares,\n        isHumanTurn: !prevState.isHumanTurn,\n        mostRecentSelectionRowIdx: legalRowPositionToFillIdx,\n        mostRecentSelectionColIdx: selectedColIdx\n      }));\n    }\n  }\n\n  handleReset() {\n    this.setState({\n      squares: newSquares(),\n      // either HUMAN or AI or null\n      isHumanTurn: true,\n      mostRecentSelectionRowIdx: null,\n      mostRecentSelectionColIdx: null\n    });\n  }\n\n  findLegalRowIdxWithinColumn(selectedColIdx) {\n    /**\n     * Returns the row index of a legal square that can be filled.\n     * Note the legal square will be within the same column as selectedColIdx.\n     * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n     */\n    const didNotFindLegalRowIdxWithinColumnIdx = -1;\n\n    for (let rowIdx = 0; rowIdx < this.state.squares.length; rowIdx++) {\n      if (this.state.squares[rowIdx][selectedColIdx] === null) {\n        return rowIdx;\n      }\n    }\n\n    return didNotFindLegalRowIdxWithinColumnIdx;\n  }\n\n  calculateWinner() {\n    /**\n     * Returns the name of the winner HUMAN or AI. Else returns null.\n     */\n    let winner = null;\n    const WINDOW = 4;\n    const mostRecentPlayer = this.state.isHumanTurn ? AI : HUMAN; // if game just started, there is no winner\n\n    if (this.state.mostRecentSelectionRowIdx === null) {\n      return winner;\n    } // Check horizontal\n\n\n    for (let colIdx = 0; colIdx + WINDOW <= TOTALNUMOFCOLS; colIdx++) {\n      const fourHorizontalAdjacentSquares = this.state.squares[this.state.mostRecentSelectionRowIdx].slice(colIdx, colIdx + WINDOW);\n\n      if (fourHorizontalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n        winner = mostRecentPlayer;\n        return winner;\n      }\n    } // Check vertical\n\n\n    for (let rowIdx = 0; rowIdx + WINDOW <= TOTALNUMOFROWS; rowIdx++) {\n      let matchingMostRecentPlayerCounter = 0;\n\n      for (let offset = 0; offset < WINDOW; offset++) {\n        if (this.state.squares[rowIdx + offset][this.state.mostRecentSelectionColIdx] === mostRecentPlayer) {\n          matchingMostRecentPlayerCounter++;\n        }\n\n        if (matchingMostRecentPlayerCounter === WINDOW) {\n          winner = mostRecentPlayer;\n          return winner;\n        }\n      }\n    } // Check Diagonal\n    // check positively sloped diagonal... from bottom-left to top-right\n\n\n    const positiveDiagonalArr = [];\n    let rowIdx = this.state.mostRecentSelectionRowIdx;\n    let colIdx = this.state.mostRecentSelectionColIdx;\n\n    while (rowIdx - 1 >= 0 && colIdx - 1 >= 0) {\n      rowIdx--;\n      colIdx--;\n    }\n\n    while (rowIdx < TOTALNUMOFROWS && colIdx < TOTALNUMOFCOLS) {\n      positiveDiagonalArr.push(this.state.squares[rowIdx][colIdx]);\n      rowIdx++;\n      colIdx++;\n    }\n\n    for (let i = 0; i + WINDOW <= positiveDiagonalArr.length; i++) {\n      const fourPositiveDiagonalAdjacentSquares = positiveDiagonalArr.slice(i, i + WINDOW);\n\n      if (fourPositiveDiagonalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n        winner = mostRecentPlayer;\n        return winner;\n      }\n    } // check negatively sloped diagonal... from top-left to bottom-right\n\n\n    const negativeDiagonalArr = [];\n    rowIdx = this.state.mostRecentSelectionRowIdx;\n    colIdx = this.state.mostRecentSelectionColIdx;\n\n    while (rowIdx - 1 >= 0 && colIdx + 1 < TOTALNUMOFCOLS) {\n      rowIdx--;\n      colIdx++;\n    }\n\n    while (rowIdx < TOTALNUMOFROWS && colIdx >= 0) {\n      negativeDiagonalArr.push(this.state.squares[rowIdx][colIdx]);\n      rowIdx++;\n      colIdx--;\n    }\n\n    for (let i = 0; i + WINDOW <= negativeDiagonalArr.length; i++) {\n      const fourNegativeDiagonalAdjacentSquares = negativeDiagonalArr.slice(i, i + WINDOW);\n\n      if (fourNegativeDiagonalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n        winner = mostRecentPlayer;\n        return winner;\n      }\n    }\n\n    return winner; // if no winner was found, winner variable does not change from intial null initialization\n  }\n\n  render() {\n    // calculate the winner\n    const winner = this.calculateWinner();\n    let isGameOver = false;\n\n    if (winner !== null) {\n      isGameOver = true;\n    } else if (!this.state.squares.map(row => row.includes(null)).includes(true)) {\n      // meaning every piece on the board is filled but no winner\n      isGameOver = true;\n    } // let the AI make a move if it's the AI's turn and the game isn't over\n    // if (winner === null && !this.state.isHumanTurn && !isGameOver) {\n    //     let aiSelectedIdx = minimax(this.state.squares.slice(), 0, AI, HUMAN);\n    //     // let max = 6;\n    //     // let min = 0;\n    //     // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n    //     // let aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n    //     // while (aiSelectedIdx === -1) {\n    //     //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n    //     //     aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n    //     // }\n    //     const squares = this.state.squares.slice();\n    //     squares[aiSelectedIdx] = AI;\n    //     this.setState(prevState => ({\n    //         squares : squares,\n    //         isHumanTurn: !prevState.isHumanTurn,\n    //         selectedSquareIdx: aiSelectedIdx\n    //     }));\n    // }\n    // setup the display\n\n\n    const horizontalRule = /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        visibility: \"hidden\",\n        marginBottom: \"0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 32\n    }, this);\n\n    const button = /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        outline: \"none\",\n        userSelect: \"none\"\n      },\n      onClick: this.handleReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 24\n    }, this);\n\n    let greeting = /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"d-flex justify-content-center\",\n      children: \"Good luck!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 24\n    }, this);\n\n    let board = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: this.state.squares,\n        onClick: this.handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 68\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 21\n    }, this);\n\n    if (isGameOver) {\n      board = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: this.state.squares,\n          onClick: () => {\n            return;\n            /* this does nothing... Disables onClick */\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 68\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }, this);\n    }\n\n    if (winner === HUMAN) {\n      greeting = /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"d-flex justify-content-center\",\n        children: \"\\uD83C\\uDF89 Congratulations! You won! \\uD83C\\uDF89\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 24\n      }, this);\n    } else if (winner === AI) {\n      greeting = /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"d-flex justify-content-center\",\n        children: \"The AI won! Try again!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 24\n      }, this);\n    } else if (winner === null && isGameOver) {\n      // this would mean the game ended in a tie\n      greeting = /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"d-flex justify-content-center\",\n        children: \"It's a draw! Try again!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 24\n      }, this);\n    }\n\n    let display = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [greeting, /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [button, horizontalRule]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 29\n      }, this), board]\n    }, void 0, true);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"d-flex justify-content-center\",\n        children: \"Welcome to Connect 4!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), display]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\nexport default Connect4Game;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js"],"names":["Board","React","Component","minimax","HUMAN","AI","TOTALNUMOFROWS","TOTALNUMOFCOLS","newSquares","squares","Array","rowIdx","length","colIdx","Connect4Game","constructor","props","state","isHumanTurn","mostRecentSelectionRowIdx","mostRecentSelectionColIdx","handleClick","bind","findLegalRowIdxWithinColumn","calculateWinner","handleReset","selectedColIdx","slice","legalRowPositionToFillIdx","setState","prevState","didNotFindLegalRowIdxWithinColumnIdx","winner","WINDOW","mostRecentPlayer","fourHorizontalAdjacentSquares","every","val","matchingMostRecentPlayerCounter","offset","positiveDiagonalArr","push","i","fourPositiveDiagonalAdjacentSquares","negativeDiagonalArr","fourNegativeDiagonalAdjacentSquares","render","isGameOver","map","row","includes","horizontalRule","visibility","marginBottom","button","outline","userSelect","greeting","board","display","textAlign"],"mappings":"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","sourcesContent":["import Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax';\n\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFCOLS = 7;\n\nfunction newSquares() {\n    const squares = new Array(TOTALNUMOFROWS);\n    for (let rowIdx = 0; rowIdx < squares.length; rowIdx++) {\n        squares[rowIdx] = new Array(TOTALNUMOFCOLS);\n        for (let colIdx = 0; colIdx < squares[rowIdx].length; colIdx++) {\n            squares[rowIdx][colIdx] = null;\n        }\n    }\n    return squares;\n}\n\n\nclass Connect4Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: newSquares(), // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n            isHumanTurn: true,\n            mostRecentSelectionRowIdx : null,\n            mostRecentSelectionColIdx: null\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.findLegalRowIdxWithinColumn = this.findLegalRowIdxWithinColumn.bind(this);\n        this.calculateWinner = this.calculateWinner.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n    }\n\n    handleClick(selectedColIdx) {\n        const squares = this.state.squares.slice();\n        const legalRowPositionToFillIdx = this.findLegalRowIdxWithinColumn(selectedColIdx);\n        if (legalRowPositionToFillIdx !== -1) {\n            squares[legalRowPositionToFillIdx][selectedColIdx] = this.state.isHumanTurn ? HUMAN : AI;\n            this.setState(prevState => ({\n                squares: squares,\n                isHumanTurn: !prevState.isHumanTurn,\n                mostRecentSelectionRowIdx: legalRowPositionToFillIdx,\n                mostRecentSelectionColIdx: selectedColIdx\n            }));\n        }\n    }\n\n    handleReset() {\n        this.setState({\n            squares: newSquares(), // either HUMAN or AI or null\n            isHumanTurn: true,\n            mostRecentSelectionRowIdx : null,\n            mostRecentSelectionColIdx: null\n        });\n    }\n\n    findLegalRowIdxWithinColumn(selectedColIdx) {\n        /**\n         * Returns the row index of a legal square that can be filled.\n         * Note the legal square will be within the same column as selectedColIdx.\n         * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n         */\n        const didNotFindLegalRowIdxWithinColumnIdx = -1;\n        for (let rowIdx = 0; rowIdx < this.state.squares.length; rowIdx++) {\n            if (this.state.squares[rowIdx][selectedColIdx] === null) {\n                return rowIdx;\n            }\n        }\n        return didNotFindLegalRowIdxWithinColumnIdx;\n    }\n\n    calculateWinner() {\n        /**\n         * Returns the name of the winner HUMAN or AI. Else returns null.\n         */\n\n        let winner = null;\n\n        const WINDOW = 4;\n\n        const mostRecentPlayer = this.state.isHumanTurn ? AI : HUMAN;\n\n        // if game just started, there is no winner\n        if (this.state.mostRecentSelectionRowIdx === null) {\n            return winner;\n        }\n\n        // Check horizontal\n        for (let colIdx = 0; colIdx + WINDOW <= TOTALNUMOFCOLS; colIdx++) {\n            const fourHorizontalAdjacentSquares = this.state.squares[this.state.mostRecentSelectionRowIdx].slice(colIdx, colIdx + WINDOW);\n            if (fourHorizontalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n                winner = mostRecentPlayer;\n                return winner;\n            }\n        }\n\n\n        // Check vertical\n        for (let rowIdx = 0; rowIdx + WINDOW <= TOTALNUMOFROWS; rowIdx++) {\n            let matchingMostRecentPlayerCounter = 0;\n            for (let offset = 0; offset < WINDOW; offset++) {\n                if (this.state.squares[rowIdx + offset][this.state.mostRecentSelectionColIdx] === mostRecentPlayer) {\n                    matchingMostRecentPlayerCounter++;\n                }\n                if (matchingMostRecentPlayerCounter === WINDOW) {\n                    winner = mostRecentPlayer;\n                    return winner;\n                }\n            }\n        }\n\n\n        // Check Diagonal\n\n        // check positively sloped diagonal... from bottom-left to top-right\n        const positiveDiagonalArr = [];\n        let rowIdx = this.state.mostRecentSelectionRowIdx;\n        let colIdx = this.state.mostRecentSelectionColIdx;\n\n        while (rowIdx - 1 >= 0 && colIdx - 1 >= 0) {\n            rowIdx--;\n            colIdx--;\n        }\n\n        while (rowIdx < TOTALNUMOFROWS && colIdx < TOTALNUMOFCOLS) {\n            positiveDiagonalArr.push(this.state.squares[rowIdx][colIdx]);\n            rowIdx++;\n            colIdx++;\n        }\n\n        for (let i = 0; i + WINDOW <= positiveDiagonalArr.length; i++) {\n            const fourPositiveDiagonalAdjacentSquares = positiveDiagonalArr.slice(i, i + WINDOW);\n            if (fourPositiveDiagonalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n                winner = mostRecentPlayer;\n                return winner;\n            }\n        }\n\n        // check negatively sloped diagonal... from top-left to bottom-right\n        const negativeDiagonalArr = [];\n        rowIdx = this.state.mostRecentSelectionRowIdx;\n        colIdx = this.state.mostRecentSelectionColIdx;\n\n        while (rowIdx - 1 >= 0 && colIdx + 1 < TOTALNUMOFCOLS) {\n            rowIdx--;\n            colIdx++;\n        }\n\n        while (rowIdx < TOTALNUMOFROWS && colIdx >= 0) {\n            negativeDiagonalArr.push(this.state.squares[rowIdx][colIdx]);\n            rowIdx++;\n            colIdx--;\n        }\n\n        for (let i = 0; i + WINDOW <= negativeDiagonalArr.length; i++) {\n            const fourNegativeDiagonalAdjacentSquares = negativeDiagonalArr.slice(i, i + WINDOW);\n            if (fourNegativeDiagonalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n                winner = mostRecentPlayer;\n                return winner;\n            }\n        }\n  \n\n        return winner; // if no winner was found, winner variable does not change from intial null initialization\n    }\n\n    render() {\n        \n        // calculate the winner\n        const winner = this.calculateWinner();\n\n        let isGameOver = false;\n        if (winner !== null) {\n            isGameOver = true;\n        } else if (!this.state.squares.map(row => row.includes(null)).includes(true)) { // meaning every piece on the board is filled but no winner\n            isGameOver = true;\n        }\n\n        // let the AI make a move if it's the AI's turn and the game isn't over\n        // if (winner === null && !this.state.isHumanTurn && !isGameOver) {\n        //     let aiSelectedIdx = minimax(this.state.squares.slice(), 0, AI, HUMAN);\n        //     // let max = 6;\n        //     // let min = 0;\n        //     // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n        //     // let aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n        //     // while (aiSelectedIdx === -1) {\n        //     //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n        //     //     aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n        //     // }\n        //     const squares = this.state.squares.slice();\n        //     squares[aiSelectedIdx] = AI;\n        //     this.setState(prevState => ({\n        //         squares : squares,\n        //         isHumanTurn: !prevState.isHumanTurn,\n        //         selectedSquareIdx: aiSelectedIdx\n        //     }));\n        // }\n\n        // setup the display\n\n        const horizontalRule = <hr style={{visibility: \"hidden\", marginBottom: \"0\"}} />;\n        const button = <button style={{outline: \"none\", userSelect: \"none\"}} onClick={this.handleReset}>Reset</button>;\n        let greeting = <h5 className=\"d-flex justify-content-center\" >Good luck!</h5>;\n        let board = <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={this.handleClick} /></div>;\n\n        if (isGameOver) {\n            board = <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={() => {return; /* this does nothing... Disables onClick */}} /></div>;\n        }\n\n        if (winner === HUMAN) {\n            greeting = <h5 className=\"d-flex justify-content-center\">🎉 Congratulations! You won! 🎉</h5>;\n        } else if (winner === AI) {\n            greeting = <h5 className=\"d-flex justify-content-center\">The AI won! Try again!</h5>;\n        } else if (winner === null && isGameOver) { // this would mean the game ended in a tie\n            greeting = <h5 className=\"d-flex justify-content-center\" >It's a draw! Try again!</h5>;\n        }\n\n        let display =   <>\n                            {greeting}\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            {board}\n                        </>;\n\n        return (\n            <div className=\"container\">\n                <h2 className=\"d-flex justify-content-center\">Welcome to Connect 4!</h2>\n                {display}\n            </div>\n        );\n    };\n};\n\nexport default Connect4Game;"]},"metadata":{},"sourceType":"module"}