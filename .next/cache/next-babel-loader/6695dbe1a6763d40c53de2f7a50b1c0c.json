{"ast":null,"code":"const TOTALNUMOFCOLUMNS = 7;\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFSQUARES = 42;\n\nfunction findLegalSquare(board, idx) {\n  /**\n   * Returns the index of a legal square that can be filled.\n   * Note the legal square will be within the same column as idx.\n   * If all the squares within idx's column are filled, then this function returns -1.\n   */\n  const didNotFindLegalSquareIdx = -1;\n  let traversingIdx = idx;\n\n  while (traversingIdx - TOTALNUMOFCOLUMNS >= 0) {\n    traversingIdx -= TOTALNUMOFCOLUMNS;\n  }\n\n  for (traversingIdx; traversingIdx < TOTALNUMOFSQUARES; traversingIdx += TOTALNUMOFCOLUMNS) {\n    if (board[traversingIdx] === null) {\n      return traversingIdx;\n    }\n  }\n\n  return didNotFindLegalSquareIdx;\n}\n\nfunction calculateScoreForThese4Squares(arr, player, opposingPlayer) {\n  /**\n   * Returns the score for the given arr, assuming the length of the arr is 4\n   */\n  let score = 0;\n\n  if (arr.filter(val => val === player).length === 4) {\n    score += 100;\n  } else if (arr.filter(val => val === player).length === 3 && arr.filter(val => val === null).length === 1) {\n    score += 5;\n  } else if (arr.filter(val => val === player).length === 2 && arr.filter(val => val === null).length === 2) {\n    score += 2;\n  }\n\n  if (arr.filter(val => val === opposingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n    score -= 15;\n  }\n\n  return score;\n}\n\nfunction calculateScoreForMove(board, idx, player, opposingPlayer) {\n  /**\n   * Returns the score for placing player's piece onto the board whose location is idx.\n   */\n  let score = 0;\n  const WINDOWLENGTH = 4;\n  const CENTERCOLUMNIDX = Math.floor(TOTALNUMOFCOLUMNS / 2);\n  const newBoard = board.slice();\n  newBoard[idx] = player; // score for center piece (preference center location)\n\n  for (let i = CENTERCOLUMNIDX; i < TOTALNUMOFSQUARES; i += TOTALNUMOFCOLUMNS) {\n    if (newBoard[i] === player) {\n      score += 2;\n    }\n  } // Score for horizontal\n  // Scores are calculated for window lengths of 4\n\n\n  for (let currRowIdx = 0; currRowIdx < TOTALNUMOFSQUARES; currRowIdx += TOTALNUMOFCOLUMNS) {\n    for (let i = 0; i <= TOTALNUMOFCOLUMNS - WINDOWLENGTH; i++) {\n      const horizontalFourAdjacentSquares = newBoard.slice(currRowIdx + i, currRowIdx + i + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(horizontalFourAdjacentSquares, player, opposingPlayer);\n    }\n  } // Score for vertical\n  // Scores are calculated for window lengths of 4\n\n\n  for (let currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n    const aColumnOfSquaresArr = [];\n\n    for (let i = currColIdx; i < TOTALNUMOFSQUARES; i += TOTALNUMOFCOLUMNS) {\n      // gets the stack of squares in the given column denoted by currColIdx\n      aColumnOfSquaresArr.push(newBoard[i]);\n    }\n\n    for (let i = 0; i <= TOTALNUMOFROWS - WINDOWLENGTH; i++) {\n      const verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(i, i + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(verticalFourAdjacentSquares, player, opposingPlayer);\n    }\n  } // Score for diagonal\n  // Scores are calculated for window lengths of 4\n  // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (let currIdx = TOTALNUMOFCOLUMNS * (Math.floor(TOTALNUMOFROWS / 2) - 1); currIdx >= 0; currIdx -= TOTALNUMOFCOLUMNS) {\n    const aDiagonalOfSquaresArr = []; // assemble the diagonal of squares arr for the given currIdx\n\n    for (let i = 0; currIdx + i * TOTALNUMOFCOLUMNS + i < TOTALNUMOFSQUARES; i++) {\n      aDiagonalOfSquaresArr.push(newBoard[currIdx + i * TOTALNUMOFCOLUMNS + i]);\n    } // slice the diagonal squares array with window lengths of 4 and calculate score\n\n\n    for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n    }\n  } // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (let currIdx = TOTALNUMOFCOLUMNS * Math.floor(TOTALNUMOFROWS / 2) + TOTALNUMOFCOLUMNS - 1; currIdx < TOTALNUMOFSQUARES; currIdx += TOTALNUMOFCOLUMNS) {\n    const aDiagonalOfSquaresArr = []; // assemble the diagonal of squares arr for the given currIdx\n\n    for (let i = 0; currIdx - i * TOTALNUMOFCOLUMNS - i >= 0; i++) {\n      aDiagonalOfSquaresArr.push(newBoard[currIdx - i * TOTALNUMOFCOLUMNS - i]);\n    } // slice the diagonal squares array with window lengths of 4 and calculate score\n\n\n    for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n    }\n  } // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (let currIdx = TOTALNUMOFCOLUMNS * Math.floor(TOTALNUMOFROWS / 2); currIdx < TOTALNUMOFSQUARES; currIdx += TOTALNUMOFCOLUMNS) {\n    const aDiagonalOfSquaresArr = []; // assemble the diagonal of squares arr for the given currIdx\n\n    for (let i = 0; currIdx - i * TOTALNUMOFCOLUMNS + i >= 0; i++) {\n      aDiagonalOfSquaresArr.push(newBoard[currIdx - i * TOTALNUMOFCOLUMNS + i]);\n    } // slice the diagonal squares array with window lengths of 4 and calculate score\n\n\n    for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n    }\n  } // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = TOTALNUMOFCOLUMNS * (Math.floor(TOTALNUMOFROWS / 2) - 1); currRowIdx < TOTALNUMOFSQUARES; currRowIdx += TOTALNUMOFCOLUMNS) {\n    const aDiagonalOfSquaresArr = []; // assemble the diagonal of squares arr for the given currRowIdx\n\n    for (let i = 0; currRowIdx - i * TOTALNUMOFCOLUMNS + i >= 0; i++) {\n      aDiagonalOfSquaresArr.push(newBoard[currRowIdx - i * TOTALNUMOFCOLUMNS + i]);\n    } // slice the diagonal squares array with window lengths of 4 and calculate score\n\n\n    for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n    }\n  }\n\n  return score;\n}\n\nfunction calculateWinner(board, lastSquareIdx) {\n  /**\n   * Returns the name of the winner HUMAN or AI. Else returns null.\n   */\n  // Check horizontal\n  const frontOfcurrRowIdxIdx = lastSquareIdx - lastSquareIdx % TOTALNUMOFCOLUMNS;\n  let currRowIdxIdx = frontOfcurrRowIdxIdx;\n  let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n  for (currRowIdxIdx; currRowIdxIdx < frontOfcurrRowIdxIdx + TOTALNUMOFCOLUMNS; currRowIdxIdx++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[currRowIdxIdx]; // winner has been found, return the winner\n    } else if (currRowIdxIdx + 1 < frontOfcurrRowIdxIdx + TOTALNUMOFCOLUMNS && board[currRowIdxIdx] !== null && board[currRowIdxIdx] === board[currRowIdxIdx + 1]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // Check vertical\n\n\n  let currColIdx = lastSquareIdx % TOTALNUMOFCOLUMNS;\n  const outOfBoundsIdx = TOTALNUMOFSQUARES;\n  howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n  for (currColIdx; currColIdx < outOfBoundsIdx; currColIdx += TOTALNUMOFCOLUMNS) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[currColIdx]; // winner has been found, return the winner\n    } else if (currColIdx + TOTALNUMOFCOLUMNS < outOfBoundsIdx && board[currColIdx] !== null && board[currColIdx] === board[currColIdx + TOTALNUMOFCOLUMNS]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // Check Diagonal\n  // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n  // get bottom left squares as indices\n\n\n  const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n  const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n  const bottomLeftTopRightIdx = [];\n  let i = 1;\n\n  while (lastSquareIdx - TOTALNUMOFCOLUMNS * i >= 0) {\n    if (lastSquareIdx - TOTALNUMOFCOLUMNS * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - TOTALNUMOFCOLUMNS * i - i)) {\n      bottomLeftTopRightIdx.unshift(lastSquareIdx - TOTALNUMOFCOLUMNS * i - i);\n      i++;\n    } else {\n      break;\n    }\n  } // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n\n\n  bottomLeftTopRightIdx.push(lastSquareIdx); // get the top right squares as indices\n\n  i = 1;\n\n  while (lastSquareIdx + TOTALNUMOFCOLUMNS * i < TOTALNUMOFSQUARES) {\n    if (lastSquareIdx + TOTALNUMOFCOLUMNS * i + i < TOTALNUMOFSQUARES && !leftColumnIdx.has(lastSquareIdx + TOTALNUMOFCOLUMNS * i + i)) {\n      bottomLeftTopRightIdx.push(lastSquareIdx + TOTALNUMOFCOLUMNS * i + i);\n      i++;\n    } else {\n      break;\n    }\n  } // check to see if there is a 4-in-a-row from bottom left to top right\n\n\n  howManyConsecutiveCounter = 1;\n\n  for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n    } else if (board[bottomLeftTopRightIdx[i]] !== null && board[bottomLeftTopRightIdx[i]] === board[bottomLeftTopRightIdx[i + 1]]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the lastSquareIdx\n  // get bottom right squares as indices\n\n\n  const bottomRightTopLeftIdx = [];\n  i = 1;\n\n  while (lastSquareIdx - TOTALNUMOFCOLUMNS * i >= 0) {\n    if (!leftColumnIdx.has(lastSquareIdx - TOTALNUMOFCOLUMNS * i + i)) {\n      bottomRightTopLeftIdx.unshift(lastSquareIdx - TOTALNUMOFCOLUMNS * i + i);\n      i++;\n    } else {\n      break;\n    }\n  } // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n\n\n  bottomRightTopLeftIdx.push(lastSquareIdx); // get the top left squares as indices\n\n  i = 1;\n\n  while (lastSquareIdx + TOTALNUMOFCOLUMNS * i < TOTALNUMOFSQUARES) {\n    if (!rightColumnIdx.has(lastSquareIdx + TOTALNUMOFCOLUMNS * i - i)) {\n      bottomRightTopLeftIdx.push(lastSquareIdx + TOTALNUMOFCOLUMNS * i - i);\n      i++;\n    } else {\n      break;\n    }\n  } // check to see if there is a 4-in-a-row from bottom right to top left\n\n\n  howManyConsecutiveCounter = 1;\n\n  for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n    } else if (board[bottomRightTopLeftIdx[i]] !== null && board[bottomRightTopLeftIdx[i]] === board[bottomRightTopLeftIdx[i + 1]]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  }\n\n  return null;\n}\n\nfunction idxOfMaxOfArr(arr) {\n  let max = arr[0];\n  let maxIdx = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIdx = i;\n    }\n  }\n\n  return maxIdx;\n}\n\nfunction minimax(board, depth, maximizingPlayer, minimizingPlayer) {\n  /**\n   * minimax algorithm to determine how the ai will make its move\n   * refer to the pseudocode on wikipedia\n   */\n  // get all the possible moves that the player can drop into\n  // this should be an array with the indices\n  const possibleMovesArr = [0, 1, 2, 3, 4, 5, 6].map(idx => findLegalSquare(board, idx)).filter(idx => idx !== -1);\n  const scoresForPossibleMovesArr = possibleMovesArr.map(idx => calculateScoreForMove(board, idx, maximizingPlayer, minimizingPlayer));\n  alert(scoresForPossibleMovesArr);\n  return possibleMovesArr[idxOfMaxOfArr(scoresForPossibleMovesArr)];\n}\n\nexport default minimax;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/connect4/minimax.js"],"names":["TOTALNUMOFCOLUMNS","TOTALNUMOFROWS","TOTALNUMOFSQUARES","findLegalSquare","board","idx","didNotFindLegalSquareIdx","traversingIdx","calculateScoreForThese4Squares","arr","player","opposingPlayer","score","filter","val","length","calculateScoreForMove","WINDOWLENGTH","CENTERCOLUMNIDX","Math","floor","newBoard","slice","i","currRowIdx","horizontalFourAdjacentSquares","currColIdx","aColumnOfSquaresArr","push","verticalFourAdjacentSquares","currIdx","aDiagonalOfSquaresArr","diagonalFourAdjacentSquares","calculateWinner","lastSquareIdx","frontOfcurrRowIdxIdx","currRowIdxIdx","howManyConsecutiveCounter","outOfBoundsIdx","rightColumnIdx","Set","leftColumnIdx","bottomLeftTopRightIdx","has","unshift","bottomRightTopLeftIdx","idxOfMaxOfArr","max","maxIdx","minimax","depth","maximizingPlayer","minimizingPlayer","possibleMovesArr","map","scoresForPossibleMovesArr","alert"],"mappings":"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","sourcesContent":["const TOTALNUMOFCOLUMNS = 7;\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFSQUARES = 42;\n\nfunction findLegalSquare(board, idx) {\n    /**\n     * Returns the index of a legal square that can be filled.\n     * Note the legal square will be within the same column as idx.\n     * If all the squares within idx's column are filled, then this function returns -1.\n     */\n    const didNotFindLegalSquareIdx = -1;\n    let traversingIdx = idx;\n    while (traversingIdx - TOTALNUMOFCOLUMNS >= 0) {\n        traversingIdx -= TOTALNUMOFCOLUMNS;\n    }\n    for (traversingIdx; traversingIdx < TOTALNUMOFSQUARES; traversingIdx += TOTALNUMOFCOLUMNS) {\n        if (board[traversingIdx] === null) {\n            return traversingIdx;\n        }\n    }\n    return didNotFindLegalSquareIdx;\n}\n\nfunction calculateScoreForThese4Squares(arr, player, opposingPlayer) {\n    /**\n     * Returns the score for the given arr, assuming the length of the arr is 4\n     */\n\n    let score = 0;\n\n    if (arr.filter(val => val === player).length === 4) {\n        score += 100;\n    } else if (arr.filter(val => val === player).length === 3 && arr.filter(val => val === null).length === 1) {\n        score += 5;\n    } else if (arr.filter(val => val === player).length === 2 && arr.filter(val => val === null).length === 2) {\n        score += 2;\n    }\n\n    if (arr.filter(val => val === opposingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n        score -= 15;\n    }\n\n    return score;\n}\n\nfunction calculateScoreForMove(board, idx, player, opposingPlayer) {\n    /**\n     * Returns the score for placing player's piece onto the board whose location is idx.\n     */\n\n    let score = 0;\n    const WINDOWLENGTH = 4;\n    const CENTERCOLUMNIDX = Math.floor(TOTALNUMOFCOLUMNS / 2);\n    const newBoard = board.slice();\n    newBoard[idx] = player;\n\n    // score for center piece (preference center location)\n    for (let i = CENTERCOLUMNIDX; i < TOTALNUMOFSQUARES; i += TOTALNUMOFCOLUMNS) {\n        if (newBoard[i] === player) {\n            score += 2;\n        }\n    }\n\n\n    // Score for horizontal\n    // Scores are calculated for window lengths of 4\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFSQUARES; currRowIdx += TOTALNUMOFCOLUMNS) {\n        for (let i = 0; i <= TOTALNUMOFCOLUMNS - WINDOWLENGTH; i++) {\n            const horizontalFourAdjacentSquares = newBoard.slice(currRowIdx + i, currRowIdx + i + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(horizontalFourAdjacentSquares, player, opposingPlayer);\n        }\n\n    }\n\n    // Score for vertical\n    // Scores are calculated for window lengths of 4\n    for (let currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n        const aColumnOfSquaresArr = [];\n        for (let i = currColIdx; i < TOTALNUMOFSQUARES; i += TOTALNUMOFCOLUMNS) { // gets the stack of squares in the given column denoted by currColIdx\n            aColumnOfSquaresArr.push(newBoard[i]);\n        }\n        for (let i = 0; i <= TOTALNUMOFROWS - WINDOWLENGTH; i++) {\n            const verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(i, i + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(verticalFourAdjacentSquares, player, opposingPlayer);\n        }\n\n    }\n\n    // Score for diagonal\n    // Scores are calculated for window lengths of 4\n\n    // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currIdx = TOTALNUMOFCOLUMNS * (Math.floor(TOTALNUMOFROWS / 2) - 1); currIdx >= 0; currIdx -= TOTALNUMOFCOLUMNS) {\n        const aDiagonalOfSquaresArr = [];\n        // assemble the diagonal of squares arr for the given currIdx\n        for (let i = 0; currIdx + i * TOTALNUMOFCOLUMNS + i < TOTALNUMOFSQUARES; i++) {\n            aDiagonalOfSquaresArr.push(newBoard[currIdx + i * TOTALNUMOFCOLUMNS + i]);\n        }\n        // slice the diagonal squares array with window lengths of 4 and calculate score\n        for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n        }\n    }\n\n    // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currIdx = (TOTALNUMOFCOLUMNS * Math.floor(TOTALNUMOFROWS / 2)) + TOTALNUMOFCOLUMNS - 1; currIdx < TOTALNUMOFSQUARES; currIdx += TOTALNUMOFCOLUMNS) {\n        const aDiagonalOfSquaresArr = [];\n        // assemble the diagonal of squares arr for the given currIdx\n        for (let i = 0; currIdx - i * TOTALNUMOFCOLUMNS - i >= 0; i++) {\n            aDiagonalOfSquaresArr.push(newBoard[currIdx - i * TOTALNUMOFCOLUMNS - i]);\n        }\n        // slice the diagonal squares array with window lengths of 4 and calculate score\n        for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n        }\n    }\n\n    // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currIdx = TOTALNUMOFCOLUMNS * Math.floor(TOTALNUMOFROWS / 2); currIdx < TOTALNUMOFSQUARES; currIdx += TOTALNUMOFCOLUMNS) {\n        const aDiagonalOfSquaresArr = [];\n        // assemble the diagonal of squares arr for the given currIdx\n        for (let i = 0; currIdx - i * TOTALNUMOFCOLUMNS + i >= 0; i++) {\n            aDiagonalOfSquaresArr.push(newBoard[currIdx - i * TOTALNUMOFCOLUMNS + i]);\n        }\n        // slice the diagonal squares array with window lengths of 4 and calculate score\n        for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n        }\n    }\n\n    // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = TOTALNUMOFCOLUMNS * (Math.floor(TOTALNUMOFROWS / 2) - 1); currRowIdx < TOTALNUMOFSQUARES; currRowIdx += TOTALNUMOFCOLUMNS) {\n        const aDiagonalOfSquaresArr = [];\n        // assemble the diagonal of squares arr for the given currRowIdx\n        for (let i = 0; currRowIdx - i * TOTALNUMOFCOLUMNS + i >= 0; i++) {\n            aDiagonalOfSquaresArr.push(newBoard[currRowIdx - i * TOTALNUMOFCOLUMNS + i]);\n        }\n        // slice the diagonal squares array with window lengths of 4 and calculate score\n        for (let i = 0; i <= aDiagonalOfSquaresArr.length - WINDOWLENGTH; i++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(i, i + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, player, opposingPlayer);\n        }\n    }\n\n    return score;\n}\n\nfunction calculateWinner(board, lastSquareIdx) {\n    /**\n     * Returns the name of the winner HUMAN or AI. Else returns null.\n     */\n\n    // Check horizontal\n    const frontOfcurrRowIdxIdx = lastSquareIdx - (lastSquareIdx % TOTALNUMOFCOLUMNS);\n    let currRowIdxIdx = frontOfcurrRowIdxIdx;\n    let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n    for (currRowIdxIdx; currRowIdxIdx < frontOfcurrRowIdxIdx + TOTALNUMOFCOLUMNS; currRowIdxIdx++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[currRowIdxIdx]; // winner has been found, return the winner\n        } else if (currRowIdxIdx + 1 < frontOfcurrRowIdxIdx + TOTALNUMOFCOLUMNS && board[currRowIdxIdx] !== null && board[currRowIdxIdx] === board[currRowIdxIdx + 1]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // Check vertical\n    let currColIdx = lastSquareIdx % TOTALNUMOFCOLUMNS;\n    const outOfBoundsIdx = TOTALNUMOFSQUARES;\n    howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n    for (currColIdx; currColIdx < outOfBoundsIdx ; currColIdx += TOTALNUMOFCOLUMNS) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[currColIdx]; // winner has been found, return the winner\n        } else if (currColIdx + TOTALNUMOFCOLUMNS < outOfBoundsIdx && board[currColIdx] !== null && board[currColIdx] === board[currColIdx + TOTALNUMOFCOLUMNS]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // Check Diagonal\n\n    // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n    // get bottom left squares as indices\n    const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n    const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n    const bottomLeftTopRightIdx = [];\n    let i = 1;\n    while (lastSquareIdx - TOTALNUMOFCOLUMNS * i >= 0) {\n        if (lastSquareIdx - TOTALNUMOFCOLUMNS * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - TOTALNUMOFCOLUMNS * i - i)) {\n            bottomLeftTopRightIdx.unshift(lastSquareIdx - TOTALNUMOFCOLUMNS * i - i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n    bottomLeftTopRightIdx.push(lastSquareIdx);\n\n    // get the top right squares as indices\n    i = 1;\n    while (lastSquareIdx + TOTALNUMOFCOLUMNS * i < TOTALNUMOFSQUARES) {\n        if (lastSquareIdx + TOTALNUMOFCOLUMNS * i + i < TOTALNUMOFSQUARES && !leftColumnIdx.has(lastSquareIdx + TOTALNUMOFCOLUMNS * i + i)) {\n            bottomLeftTopRightIdx.push(lastSquareIdx + TOTALNUMOFCOLUMNS * i + i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // check to see if there is a 4-in-a-row from bottom left to top right\n    howManyConsecutiveCounter = 1;\n    for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n        } else if (board[bottomLeftTopRightIdx[i]] !== null && board[bottomLeftTopRightIdx[i]] === board[bottomLeftTopRightIdx[i + 1]]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the lastSquareIdx\n    // get bottom right squares as indices\n    const bottomRightTopLeftIdx = [];\n    i = 1;\n    while (lastSquareIdx - TOTALNUMOFCOLUMNS * i >= 0) {\n        if (!leftColumnIdx.has(lastSquareIdx - TOTALNUMOFCOLUMNS * i + i)) {\n            bottomRightTopLeftIdx.unshift(lastSquareIdx - TOTALNUMOFCOLUMNS * i + i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n    bottomRightTopLeftIdx.push(lastSquareIdx);\n\n    // get the top left squares as indices\n    i = 1;\n    while (lastSquareIdx + TOTALNUMOFCOLUMNS * i < TOTALNUMOFSQUARES) {\n        if (!rightColumnIdx.has(lastSquareIdx + TOTALNUMOFCOLUMNS * i - i)) {\n            bottomRightTopLeftIdx.push(lastSquareIdx + TOTALNUMOFCOLUMNS * i - i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // check to see if there is a 4-in-a-row from bottom right to top left\n    howManyConsecutiveCounter = 1;\n    for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n        } else if (board[bottomRightTopLeftIdx[i]] !== null && board[bottomRightTopLeftIdx[i]] === board[bottomRightTopLeftIdx[i + 1]]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    return null;\n}\n\nfunction idxOfMaxOfArr(arr) {\n    let max = arr[0];\n    let maxIdx = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i]\n            maxIdx = i;\n        }\n    }\n    return maxIdx;\n}\n\nfunction minimax(board, depth, maximizingPlayer, minimizingPlayer) {\n    /**\n     * minimax algorithm to determine how the ai will make its move\n     * refer to the pseudocode on wikipedia\n     */\n\n    // get all the possible moves that the player can drop into\n    // this should be an array with the indices\n    const possibleMovesArr = [0,1,2,3,4,5,6].map(idx => findLegalSquare(board, idx)).filter(idx => idx !== -1);\n    const scoresForPossibleMovesArr = possibleMovesArr.map(idx => calculateScoreForMove(board, idx, maximizingPlayer, minimizingPlayer));\n    alert(scoresForPossibleMovesArr);\n    return possibleMovesArr[idxOfMaxOfArr(scoresForPossibleMovesArr)];\n}\n\nexport default minimax;"]},"metadata":{},"sourceType":"module"}