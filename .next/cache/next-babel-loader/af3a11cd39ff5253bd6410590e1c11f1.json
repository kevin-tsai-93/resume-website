{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax'; // Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nvar HUMAN = \"you\";\nvar AI = \"ai\";\nvar TOTALNUMOFROWS = 6;\nvar TOTALNUMOFCOLS = 7;\n\nfunction newSquares() {\n  var squares = new Array(TOTALNUMOFROWS);\n\n  for (var rowIdx = 0; rowIdx < squares.length; rowIdx++) {\n    squares[rowIdx] = new Array(TOTALNUMOFCOLS);\n\n    for (var colIdx = 0; colIdx < squares[rowIdx].length; colIdx++) {\n      squares[rowIdx][colIdx] = null;\n    }\n  }\n\n  return squares;\n}\n\nvar Connect4Game = /*#__PURE__*/function (_React$Component) {\n  _inherits(Connect4Game, _React$Component);\n\n  var _super = _createSuper(Connect4Game);\n\n  function Connect4Game(props) {\n    var _this;\n\n    _classCallCheck(this, Connect4Game);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      squares: newSquares(),\n      // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n      winner: null\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.findLegalRowIdxWithinColumn = _this.findLegalRowIdxWithinColumn.bind(_assertThisInitialized(_this));\n    _this.calculateWinner = _this.calculateWinner.bind(_assertThisInitialized(_this));\n    _this.handleReset = _this.handleReset.bind(_assertThisInitialized(_this));\n    _this.aiMakesMove = _this.aiMakesMove.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Connect4Game, [{\n    key: \"handleClick\",\n    value: function handleClick(selectedColIdx) {\n      var squares = this.state.squares.slice();\n      var legalRowPositionToFillIdx = this.findLegalRowIdxWithinColumn(selectedColIdx);\n\n      if (legalRowPositionToFillIdx !== -1) {\n        squares[legalRowPositionToFillIdx][selectedColIdx] = HUMAN;\n        var winner = this.calculateWinner(squares, HUMAN, legalRowPositionToFillIdx, selectedColIdx); // let the AI make a move if it's the AI's turn and the game isn't over\n\n        if (winner === null && !isGameOver) {\n          this.aiMakesMove(squares);\n        }\n\n        this.setState(function (prevState) {\n          return {\n            squares: squares,\n            winner: winner\n          };\n        });\n      }\n    }\n  }, {\n    key: \"handleReset\",\n    value: function handleReset() {\n      this.setState({\n        squares: newSquares(),\n        winner: null\n      });\n    }\n  }, {\n    key: \"aiMakesMove\",\n    value: function aiMakesMove(board) {\n      var _minimax = minimax(board, 0, AI, HUMAN),\n          _minimax2 = _slicedToArray(_minimax, 2),\n          optimalRowIdx = _minimax2[0],\n          optimalColIdx = _minimax2[1]; // let max = 6;\n      // let min = 0;\n      // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n      // let aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n      // while (aiSelectedIdx === -1) {\n      //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n      //     aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n      // }\n\n\n      return [optimalRowIdx, optimalColIdx];\n    }\n  }, {\n    key: \"findLegalRowIdxWithinColumn\",\n    value: function findLegalRowIdxWithinColumn(selectedColIdx) {\n      /**\n       * Returns the row index of a legal square that can be filled.\n       * Note the legal square will be within the same column as selectedColIdx.\n       * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n       */\n      var didNotFindLegalRowIdxWithinColumnIdx = -1;\n\n      for (var rowIdx = 0; rowIdx < this.state.squares.length; rowIdx++) {\n        if (this.state.squares[rowIdx][selectedColIdx] === null) {\n          return rowIdx;\n        }\n      }\n\n      return didNotFindLegalRowIdxWithinColumnIdx;\n    }\n  }, {\n    key: \"calculateWinner\",\n    value: function calculateWinner(board, mostRecentPlayer, mostRecentSelectionRowIdx, mostRecentSelectionColIdx) {\n      /**\n       * Returns the name of the winner HUMAN or AI. Else returns null.\n       */\n      var winner = null;\n      var WINDOW = 4; // if game just started, there is no winner\n\n      if (mostRecentSelectionRowIdx === null) {\n        return winner;\n      } // Check horizontal\n\n\n      for (var _colIdx = 0; _colIdx + WINDOW <= TOTALNUMOFCOLS; _colIdx++) {\n        var fourHorizontalAdjacentSquares = board[mostRecentSelectionRowIdx].slice(_colIdx, _colIdx + WINDOW);\n\n        if (fourHorizontalAdjacentSquares.every(function (val) {\n          return val === mostRecentPlayer;\n        })) {\n          winner = mostRecentPlayer;\n          return winner;\n        }\n      } // Check vertical\n\n\n      for (var _rowIdx = 0; _rowIdx + WINDOW <= TOTALNUMOFROWS; _rowIdx++) {\n        var matchingMostRecentPlayerCounter = 0;\n\n        for (var offset = 0; offset < WINDOW; offset++) {\n          if (board[_rowIdx + offset][mostRecentSelectionColIdx] === mostRecentPlayer) {\n            matchingMostRecentPlayerCounter++;\n          }\n\n          if (matchingMostRecentPlayerCounter === WINDOW) {\n            winner = mostRecentPlayer;\n            return winner;\n          }\n        }\n      } // Check Diagonal\n      // check positively sloped diagonal... from bottom-left to top-right\n\n\n      var positiveDiagonalArr = [];\n      var rowIdx = mostRecentSelectionRowIdx;\n      var colIdx = mostRecentSelectionColIdx;\n\n      while (rowIdx - 1 >= 0 && colIdx - 1 >= 0) {\n        rowIdx--;\n        colIdx--;\n      }\n\n      while (rowIdx < TOTALNUMOFROWS && colIdx < TOTALNUMOFCOLS) {\n        positiveDiagonalArr.push(board[rowIdx][colIdx]);\n        rowIdx++;\n        colIdx++;\n      }\n\n      for (var i = 0; i + WINDOW <= positiveDiagonalArr.length; i++) {\n        var fourPositiveDiagonalAdjacentSquares = positiveDiagonalArr.slice(i, i + WINDOW);\n\n        if (fourPositiveDiagonalAdjacentSquares.every(function (val) {\n          return val === mostRecentPlayer;\n        })) {\n          winner = mostRecentPlayer;\n          return winner;\n        }\n      } // check negatively sloped diagonal... from top-left to bottom-right\n\n\n      var negativeDiagonalArr = [];\n      rowIdx = mostRecentSelectionRowIdx;\n      colIdx = mostRecentSelectionColIdx;\n\n      while (rowIdx - 1 >= 0 && colIdx + 1 < TOTALNUMOFCOLS) {\n        rowIdx--;\n        colIdx++;\n      }\n\n      while (rowIdx < TOTALNUMOFROWS && colIdx >= 0) {\n        negativeDiagonalArr.push(board[rowIdx][colIdx]);\n        rowIdx++;\n        colIdx--;\n      }\n\n      for (var _i = 0; _i + WINDOW <= negativeDiagonalArr.length; _i++) {\n        var fourNegativeDiagonalAdjacentSquares = negativeDiagonalArr.slice(_i, _i + WINDOW);\n\n        if (fourNegativeDiagonalAdjacentSquares.every(function (val) {\n          return val === mostRecentPlayer;\n        })) {\n          winner = mostRecentPlayer;\n          return winner;\n        }\n      }\n\n      return winner; // if no winner was found, winner variable does not change from intial null initialization\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isGameOver = false;\n\n      if (this.state.winner !== null) {\n        isGameOver = true;\n      } else if (!this.state.squares.map(function (row) {\n        return row.includes(null);\n      }).includes(true)) {\n        // meaning every piece on the board is filled but no winner (implying a tie)\n        isGameOver = true;\n      }\n\n      console.log(this.state.squares.slice()); // setup the display\n\n      var horizontalRule = /*#__PURE__*/_jsxDEV(\"hr\", {\n        style: {\n          visibility: \"hidden\",\n          marginBottom: \"0\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 32\n      }, this);\n\n      var button = /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          outline: \"none\",\n          userSelect: \"none\"\n        },\n        onClick: this.handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 24\n      }, this);\n\n      var greeting = /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"d-flex justify-content-center\",\n        children: \"Good luck!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 24\n      }, this);\n\n      var board = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: this.state.squares,\n          onClick: this.handleClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 68\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this);\n\n      if (isGameOver) {\n        board = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(Board, {\n            squares: this.state.squares,\n            onClick: function onClick() {\n              return;\n              /* this does nothing... Disables onClick */\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 68\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this);\n      }\n\n      if (this.state.winner === HUMAN) {\n        greeting = /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"d-flex justify-content-center\",\n          children: \"\\uD83C\\uDF89 Congratulations! You won! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 24\n        }, this);\n      } else if (this.state.winner === AI) {\n        greeting = /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"d-flex justify-content-center\",\n          children: \"The AI won! Try again!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 24\n        }, this);\n      } else if (this.state.winner === null && isGameOver) {\n        // this would mean the game ended in a tie\n        greeting = /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"d-flex justify-content-center\",\n          children: \"It's a draw! Try again!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 24\n        }, this);\n      }\n\n      var display = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [greeting, /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: [button, horizontalRule]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 29\n        }, this), board]\n      }, void 0, true);\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"d-flex justify-content-center\",\n          children: \"Welcome to Connect 4!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }, this), display]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return Connect4Game;\n}(React.Component);\n\n;\nexport default Connect4Game;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js"],"names":["Board","React","Component","minimax","HUMAN","AI","TOTALNUMOFROWS","TOTALNUMOFCOLS","newSquares","squares","Array","rowIdx","length","colIdx","Connect4Game","props","state","winner","handleClick","bind","findLegalRowIdxWithinColumn","calculateWinner","handleReset","aiMakesMove","selectedColIdx","slice","legalRowPositionToFillIdx","isGameOver","setState","prevState","board","optimalRowIdx","optimalColIdx","didNotFindLegalRowIdxWithinColumnIdx","mostRecentPlayer","mostRecentSelectionRowIdx","mostRecentSelectionColIdx","WINDOW","fourHorizontalAdjacentSquares","every","val","matchingMostRecentPlayerCounter","offset","positiveDiagonalArr","push","i","fourPositiveDiagonalAdjacentSquares","negativeDiagonalArr","fourNegativeDiagonalAdjacentSquares","map","row","includes","console","log","horizontalRule","visibility","marginBottom","button","outline","userSelect","greeting","display","textAlign"],"mappings":"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","sourcesContent":["import Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax';\n\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFCOLS = 7;\n\nfunction newSquares() {\n    const squares = new Array(TOTALNUMOFROWS);\n    for (let rowIdx = 0; rowIdx < squares.length; rowIdx++) {\n        squares[rowIdx] = new Array(TOTALNUMOFCOLS);\n        for (let colIdx = 0; colIdx < squares[rowIdx].length; colIdx++) {\n            squares[rowIdx][colIdx] = null;\n        }\n    }\n    return squares;\n}\n\n\nclass Connect4Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: newSquares(), // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n            winner: null,\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.findLegalRowIdxWithinColumn = this.findLegalRowIdxWithinColumn.bind(this);\n        this.calculateWinner = this.calculateWinner.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.aiMakesMove = this.aiMakesMove.bind(this);\n    }\n\n    handleClick(selectedColIdx) {\n        const squares = this.state.squares.slice();\n        const legalRowPositionToFillIdx = this.findLegalRowIdxWithinColumn(selectedColIdx);\n        if (legalRowPositionToFillIdx !== -1) {\n            squares[legalRowPositionToFillIdx][selectedColIdx] = HUMAN;\n            let winner = this.calculateWinner(squares, HUMAN, legalRowPositionToFillIdx, selectedColIdx);\n            // let the AI make a move if it's the AI's turn and the game isn't over\n            if (winner === null && !isGameOver) {\n                this.aiMakesMove(squares);\n            }\n            this.setState(prevState => ({\n                squares: squares,\n                winner: winner\n            }));\n        }\n    }\n\n    handleReset() {\n        this.setState({\n            squares: newSquares(),\n            winner: null\n        });\n    }\n\n    aiMakesMove(board) {\n        let [optimalRowIdx, optimalColIdx] = minimax(board, 0, AI, HUMAN);\n        // let max = 6;\n        // let min = 0;\n        // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n        // let aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n        // while (aiSelectedIdx === -1) {\n        //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n        //     aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n        // }\n        return [optimalRowIdx, optimalColIdx];\n    }\n\n    findLegalRowIdxWithinColumn(selectedColIdx) {\n        /**\n         * Returns the row index of a legal square that can be filled.\n         * Note the legal square will be within the same column as selectedColIdx.\n         * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n         */\n        const didNotFindLegalRowIdxWithinColumnIdx = -1;\n        for (let rowIdx = 0; rowIdx < this.state.squares.length; rowIdx++) {\n            if (this.state.squares[rowIdx][selectedColIdx] === null) {\n                return rowIdx;\n            }\n        }\n        return didNotFindLegalRowIdxWithinColumnIdx;\n    }\n\n    calculateWinner(board, mostRecentPlayer, mostRecentSelectionRowIdx, mostRecentSelectionColIdx) {\n        /**\n         * Returns the name of the winner HUMAN or AI. Else returns null.\n         */\n\n        let winner = null;\n\n        const WINDOW = 4;\n\n        // if game just started, there is no winner\n        if (mostRecentSelectionRowIdx === null) {\n            return winner;\n        }\n\n        // Check horizontal\n        for (let colIdx = 0; colIdx + WINDOW <= TOTALNUMOFCOLS; colIdx++) {\n            const fourHorizontalAdjacentSquares = board[mostRecentSelectionRowIdx].slice(colIdx, colIdx + WINDOW);\n            if (fourHorizontalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n                winner = mostRecentPlayer;\n                return winner;\n            }\n        }\n\n\n        // Check vertical\n        for (let rowIdx = 0; rowIdx + WINDOW <= TOTALNUMOFROWS; rowIdx++) {\n            let matchingMostRecentPlayerCounter = 0;\n            for (let offset = 0; offset < WINDOW; offset++) {\n                if (board[rowIdx + offset][mostRecentSelectionColIdx] === mostRecentPlayer) {\n                    matchingMostRecentPlayerCounter++;\n                }\n                if (matchingMostRecentPlayerCounter === WINDOW) {\n                    winner = mostRecentPlayer;\n                    return winner;\n                }\n            }\n        }\n\n\n        // Check Diagonal\n\n        // check positively sloped diagonal... from bottom-left to top-right\n        const positiveDiagonalArr = [];\n        let rowIdx = mostRecentSelectionRowIdx;\n        let colIdx = mostRecentSelectionColIdx;\n\n        while (rowIdx - 1 >= 0 && colIdx - 1 >= 0) {\n            rowIdx--;\n            colIdx--;\n        }\n\n        while (rowIdx < TOTALNUMOFROWS && colIdx < TOTALNUMOFCOLS) {\n            positiveDiagonalArr.push(board[rowIdx][colIdx]);\n            rowIdx++;\n            colIdx++;\n        }\n\n        for (let i = 0; i + WINDOW <= positiveDiagonalArr.length; i++) {\n            const fourPositiveDiagonalAdjacentSquares = positiveDiagonalArr.slice(i, i + WINDOW);\n            if (fourPositiveDiagonalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n                winner = mostRecentPlayer;\n                return winner;\n            }\n        }\n\n        // check negatively sloped diagonal... from top-left to bottom-right\n        const negativeDiagonalArr = [];\n        rowIdx = mostRecentSelectionRowIdx;\n        colIdx = mostRecentSelectionColIdx;\n\n        while (rowIdx - 1 >= 0 && colIdx + 1 < TOTALNUMOFCOLS) {\n            rowIdx--;\n            colIdx++;\n        }\n\n        while (rowIdx < TOTALNUMOFROWS && colIdx >= 0) {\n            negativeDiagonalArr.push(board[rowIdx][colIdx]);\n            rowIdx++;\n            colIdx--;\n        }\n\n        for (let i = 0; i + WINDOW <= negativeDiagonalArr.length; i++) {\n            const fourNegativeDiagonalAdjacentSquares = negativeDiagonalArr.slice(i, i + WINDOW);\n            if (fourNegativeDiagonalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n                winner = mostRecentPlayer;\n                return winner;\n            }\n        }\n  \n\n        return winner; // if no winner was found, winner variable does not change from intial null initialization\n    }\n\n    render() {\n\n        let isGameOver = false;\n        if (this.state.winner !== null) {\n            isGameOver = true;\n        } else if (!this.state.squares.map(row => row.includes(null)).includes(true)) { // meaning every piece on the board is filled but no winner (implying a tie)\n            isGameOver = true;\n        }\n\n        console.log(this.state.squares.slice());\n\n        // setup the display\n\n        const horizontalRule = <hr style={{visibility: \"hidden\", marginBottom: \"0\"}} />;\n        const button = <button style={{outline: \"none\", userSelect: \"none\"}} onClick={this.handleReset}>Reset</button>;\n        let greeting = <h5 className=\"d-flex justify-content-center\" >Good luck!</h5>;\n        let board = <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={this.handleClick} /></div>;\n\n        if (isGameOver) {\n            board = <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={() => {return; /* this does nothing... Disables onClick */}} /></div>;\n        }\n\n        if (this.state.winner === HUMAN) {\n            greeting = <h5 className=\"d-flex justify-content-center\">🎉 Congratulations! You won! 🎉</h5>;\n        } else if (this.state.winner === AI) {\n            greeting = <h5 className=\"d-flex justify-content-center\">The AI won! Try again!</h5>;\n        } else if (this.state.winner === null && isGameOver) { // this would mean the game ended in a tie\n            greeting = <h5 className=\"d-flex justify-content-center\" >It's a draw! Try again!</h5>;\n        }\n\n        let display =   <>\n                            {greeting}\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            {board}\n                        </>;\n\n        return (\n            <div className=\"container\">\n                <h2 className=\"d-flex justify-content-center\">Welcome to Connect 4!</h2>\n                {display}\n            </div>\n        );\n    };\n};\n\nexport default Connect4Game;"]},"metadata":{},"sourceType":"module"}