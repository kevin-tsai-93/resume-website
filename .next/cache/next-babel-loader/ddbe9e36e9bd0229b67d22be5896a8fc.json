{"ast":null,"code":"function findLegalSquare(board, idx) {\n  /**\n   * Returns the index of a legal square that can be filled.\n   * Note the legal square will be within the same column as idx.\n   * If all the squares within idx's column are filled, then this function returns -1.\n   */\n  const didNotFindLegalSquareIdx = -1;\n  let traversingIdx = idx;\n\n  while (traversingIdx - 7 >= 0) {\n    traversingIdx -= 7;\n  }\n\n  for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n    if (this.state.squares[traversingIdx] === null) {\n      return traversingIdx;\n    }\n  }\n\n  return didNotFindLegalSquareIdx;\n}\n\nfunction calculateScoreForMove(board, player, idx) {\n  /**\n   * Returns the score for placing player's piece onto the board whose location is idx.\n   */\n  let score = 0;\n  const WINDOWLENGTH = 4; // Score for horizontal\n\n  const frontOfRowIdx = idx - idx % 7;\n  let rowArr = board.slice(frontOfRowIdx, frontOfRowIdx + 7);\n\n  for (let frontIdx = 0; cutOffIdx < WINDOWLENGTH; cutOffIdx++) {\n    const windowArr = rowArr.slice(frontIdx, frontIdx + WINDOWLENGTH);\n\n    if (windowArr.filter(val => val === player).length === 4) {\n      score += 100;\n    } else if (windowArr.filter(val => val === player).length === 3 && windowArr.filter(val => val === null).length === 1) {\n      score += 5;\n    }\n  }\n\n  return score;\n}\n\nfunction calculateWinner(board, lastSquareIdx) {\n  /**\n   * Returns the name of the winner HUMAN or AI. Else returns null.\n   */\n  // Check horizontal\n  const frontOfCurrRowIdx = lastSquareIdx - lastSquareIdx % 7;\n  let currRowIdx = frontOfCurrRowIdx;\n  let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n  for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[currRowIdx]; // winner has been found, return the winner\n    } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && board[currRowIdx] !== null && board[currRowIdx] === board[currRowIdx + 1]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // Check vertical\n\n\n  let currColIdx = lastSquareIdx % 7;\n  const outOfBoundsIdx = 42;\n  howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n  for (currColIdx; currColIdx < outOfBoundsIdx; currColIdx += 7) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[currColIdx]; // winner has been found, return the winner\n    } else if (currColIdx + 7 < outOfBoundsIdx && board[currColIdx] !== null && board[currColIdx] === board[currColIdx + 7]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // Check Diagonal\n  // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n  // get bottom left squares as indices\n\n\n  const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n  const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n  const bottomLeftTopRightIdx = [];\n  let i = 1;\n\n  while (lastSquareIdx - 7 * i >= 0) {\n    if (lastSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - 7 * i - i)) {\n      bottomLeftTopRightIdx.unshift(lastSquareIdx - 7 * i - i);\n      i++;\n    } else {\n      break;\n    }\n  } // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n\n\n  bottomLeftTopRightIdx.push(lastSquareIdx); // get the top right squares as indices\n\n  i = 1;\n\n  while (lastSquareIdx + 7 * i < 42) {\n    if (lastSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(lastSquareIdx + 7 * i + i)) {\n      bottomLeftTopRightIdx.push(lastSquareIdx + 7 * i + i);\n      i++;\n    } else {\n      break;\n    }\n  } // check to see if there is a 4-in-a-row from bottom left to top right\n\n\n  howManyConsecutiveCounter = 1;\n\n  for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n    } else if (board[bottomLeftTopRightIdx[i]] !== null && board[bottomLeftTopRightIdx[i]] === board[bottomLeftTopRightIdx[i + 1]]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the lastSquareIdx\n  // get bottom right squares as indices\n\n\n  const bottomRightTopLeftIdx = [];\n  i = 1;\n\n  while (lastSquareIdx - 7 * i >= 0) {\n    if (!leftColumnIdx.has(lastSquareIdx - 7 * i + i)) {\n      bottomRightTopLeftIdx.unshift(lastSquareIdx - 7 * i + i);\n      i++;\n    } else {\n      break;\n    }\n  } // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n\n\n  bottomRightTopLeftIdx.push(lastSquareIdx); // get the top left squares as indices\n\n  i = 1;\n\n  while (lastSquareIdx + 7 * i < 42) {\n    if (!rightColumnIdx.has(lastSquareIdx + 7 * i - i)) {\n      bottomRightTopLeftIdx.push(lastSquareIdx + 7 * i - i);\n      i++;\n    } else {\n      break;\n    }\n  } // check to see if there is a 4-in-a-row from bottom right to top left\n\n\n  howManyConsecutiveCounter = 1;\n\n  for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n    } else if (board[bottomRightTopLeftIdx[i]] !== null && board[bottomRightTopLeftIdx[i]] === board[bottomRightTopLeftIdx[i + 1]]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  }\n\n  return null;\n}\n\nfunction minimax(board, depth, maximizingPlayer) {\n  /**\n   * minimax algorithm to determine how the ai will make its move\n   * refer to the pseudocode on wikipedia\n   */\n  if (depth == 0 || null) {\n    return;\n  }\n}\n\nexport default minimax;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/connect4/minimax.js"],"names":["findLegalSquare","board","idx","didNotFindLegalSquareIdx","traversingIdx","state","squares","calculateScoreForMove","player","score","WINDOWLENGTH","frontOfRowIdx","rowArr","slice","frontIdx","cutOffIdx","windowArr","filter","val","length","calculateWinner","lastSquareIdx","frontOfCurrRowIdx","currRowIdx","howManyConsecutiveCounter","currColIdx","outOfBoundsIdx","rightColumnIdx","Set","leftColumnIdx","bottomLeftTopRightIdx","i","has","unshift","push","bottomRightTopLeftIdx","minimax","depth","maximizingPlayer"],"mappings":"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","sourcesContent":["function findLegalSquare(board, idx) {\n    /**\n     * Returns the index of a legal square that can be filled.\n     * Note the legal square will be within the same column as idx.\n     * If all the squares within idx's column are filled, then this function returns -1.\n     */\n    const didNotFindLegalSquareIdx = -1;\n    let traversingIdx = idx;\n    while (traversingIdx - 7 >= 0) {\n        traversingIdx -= 7;\n    }\n    for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n        if (this.state.squares[traversingIdx] === null) {\n            return traversingIdx;\n        }\n    }\n    return didNotFindLegalSquareIdx;\n}\n\nfunction calculateScoreForMove(board, player, idx) {\n    /**\n     * Returns the score for placing player's piece onto the board whose location is idx.\n     */\n\n    let score = 0;\n    const WINDOWLENGTH = 4;\n\n    // Score for horizontal\n    const frontOfRowIdx = idx - (idx % 7);\n    let rowArr = board.slice(frontOfRowIdx, frontOfRowIdx + 7);\n    for (let frontIdx = 0; cutOffIdx < WINDOWLENGTH; cutOffIdx++) {\n        const windowArr = rowArr.slice(frontIdx, frontIdx + WINDOWLENGTH);\n        if (windowArr.filter(val => val === player).length === 4) {\n            score += 100;\n        } else if (windowArr.filter(val => val === player).length === 3 && windowArr.filter(val => val === null).length === 1) {\n            score += 5;\n        }\n    }\n\n    return score;\n}\n\nfunction calculateWinner(board, lastSquareIdx) {\n    /**\n     * Returns the name of the winner HUMAN or AI. Else returns null.\n     */\n\n    // Check horizontal\n    const frontOfCurrRowIdx = lastSquareIdx - (lastSquareIdx % 7);\n    let currRowIdx = frontOfCurrRowIdx;\n    let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n    for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[currRowIdx]; // winner has been found, return the winner\n        } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && board[currRowIdx] !== null && board[currRowIdx] === board[currRowIdx + 1]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // Check vertical\n    let currColIdx = lastSquareIdx % 7;\n    const outOfBoundsIdx = 42;\n    howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n    for (currColIdx; currColIdx < outOfBoundsIdx ; currColIdx += 7) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[currColIdx]; // winner has been found, return the winner\n        } else if (currColIdx + 7 < outOfBoundsIdx && board[currColIdx] !== null && board[currColIdx] === board[currColIdx + 7]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // Check Diagonal\n\n    // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n    // get bottom left squares as indices\n    const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n    const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n    const bottomLeftTopRightIdx = [];\n    let i = 1;\n    while (lastSquareIdx - 7 * i >= 0) {\n        if (lastSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - 7 * i - i)) {\n            bottomLeftTopRightIdx.unshift(lastSquareIdx - 7 * i - i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n    bottomLeftTopRightIdx.push(lastSquareIdx);\n\n    // get the top right squares as indices\n    i = 1;\n    while (lastSquareIdx + 7 * i < 42) {\n        if (lastSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(lastSquareIdx + 7 * i + i)) {\n            bottomLeftTopRightIdx.push(lastSquareIdx + 7 * i + i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // check to see if there is a 4-in-a-row from bottom left to top right\n    howManyConsecutiveCounter = 1;\n    for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n        } else if (board[bottomLeftTopRightIdx[i]] !== null && board[bottomLeftTopRightIdx[i]] === board[bottomLeftTopRightIdx[i + 1]]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the lastSquareIdx\n    // get bottom right squares as indices\n    const bottomRightTopLeftIdx = [];\n    i = 1;\n    while (lastSquareIdx - 7 * i >= 0) {\n        if (!leftColumnIdx.has(lastSquareIdx - 7 * i + i)) {\n            bottomRightTopLeftIdx.unshift(lastSquareIdx - 7 * i + i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n    bottomRightTopLeftIdx.push(lastSquareIdx);\n\n    // get the top left squares as indices\n    i = 1;\n    while (lastSquareIdx + 7 * i < 42) {\n        if (!rightColumnIdx.has(lastSquareIdx + 7 * i - i)) {\n            bottomRightTopLeftIdx.push(lastSquareIdx + 7 * i - i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // check to see if there is a 4-in-a-row from bottom right to top left\n    howManyConsecutiveCounter = 1;\n    for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n        } else if (board[bottomRightTopLeftIdx[i]] !== null && board[bottomRightTopLeftIdx[i]] === board[bottomRightTopLeftIdx[i + 1]]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    return null;\n}\n\nfunction minimax(board, depth, maximizingPlayer) {\n    /**\n     * minimax algorithm to determine how the ai will make its move\n     * refer to the pseudocode on wikipedia\n     */\n\n     if (depth == 0 || null) {\n         return;\n     }\n}\n\nexport default minimax;"]},"metadata":{},"sourceType":"module"}