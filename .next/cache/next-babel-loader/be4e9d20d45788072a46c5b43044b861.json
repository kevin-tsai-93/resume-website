{"ast":null,"code":"function findLegalSquare(board, idx) {\n  /**\n   * Returns the index of a legal square that can be filled.\n   * Note the legal square will be within the same column as idx.\n   * If all the squares within idx's column are filled, then this function returns -1.\n   */\n  const didNotFindLegalSquareIdx = -1;\n  let traversingIdx = idx;\n\n  while (traversingIdx - 7 >= 0) {\n    traversingIdx -= 7;\n  }\n\n  for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n    if (board[traversingIdx] === null) {\n      return traversingIdx;\n    }\n  }\n\n  return didNotFindLegalSquareIdx;\n}\n\nfunction calculateScoreForWindow(windowArr, player, opposingPlayer) {\n  /**\n   * Returns the score for a given arr, assuming the window is 4\n   */\n  let score = 0;\n\n  if (windowArr.filter(val => val === player).length === 4) {\n    score += 100;\n  } else if (windowArr.filter(val => val === player).length === 3 && windowArr.filter(val => val === null).length === 1) {\n    score += 5;\n  } else if (windowArr.filter(val => val === player).length === 2 && windowArr.filter(val => val === null).length === 2) {\n    score += 2;\n  }\n\n  if (windowArr.filter(val => val === opposingPlayer).length === 3 && windowArr.filter(val => val === null).length === 1) {\n    score -= 8;\n  }\n\n  return score;\n}\n\nfunction calculateScoreForMove(board, idx, player, opposingPlayer) {\n  /**\n   * Returns the score for placing player's piece onto the board whose location is idx.\n   */\n  let score = 0;\n  const WINDOWLENGTH = 4;\n  const TOTALPIECES = 42;\n  const newBoard = board.slice();\n  newBoard[idx] = player; // score for center piece (preference center location)\n\n  for (let i = 3; i < TOTALPIECES; i += 7) {\n    if (board[i] === player) {\n      score += 2;\n    }\n  } // Score for horizontal\n\n\n  for (let currRow = 0; currRow < TOTALPIECES; currRow += 7) {\n    for (let i = 0; i < WINDOWLENGTH; i++) {\n      const windowArr = rowArr.slice(currRow + i, currRow + i + WINDOWLENGTH);\n      score += calculateScoreForWindow(windowArr, player, opposingPlayer);\n    }\n  } // Score for vertical\n\n\n  const frontOfColIdx = idx % 7;\n  const colArr = [];\n  let playerOnColArrIdx;\n\n  for (let i = frontOfColIdx; i < 42; i += 7) {\n    if (idx !== i) {\n      colArr.push(board[i]);\n    } else {\n      // put the player's piece onto the new board if idx === i\n      colArr.push(player);\n      playerOnColArrIdx = colArr.length - 1;\n    }\n  }\n\n  for (let frontIdx = 0; frontIdx < WINDOWLENGTH; frontIdx++) {\n    const windowArr = colArr.slice(frontIdx, frontIdx + WINDOWLENGTH);\n    score += calculateScoreForWindow(windowArr, player, opposingPlayer);\n  } // // Score for diagonal\n  // // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n  // // get bottom left squares as indices\n  // const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n  // const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n  // const bottomLeftTopRightIdx = [];\n  // let i = 1;\n  // while (lastSquareIdx - 7 * i >= 0) {\n  //     if (lastSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - 7 * i - i)) {\n  //         bottomLeftTopRightIdx.unshift(lastSquareIdx - 7 * i - i);\n  //         i++;\n  //     } else {\n  //         break;\n  //     }\n  // }\n  // // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n  // bottomLeftTopRightIdx.push(lastSquareIdx);\n  // // get the top right squares as indices\n  // i = 1;\n  // while (lastSquareIdx + 7 * i < 42) {\n  //     if (lastSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(lastSquareIdx + 7 * i + i)) {\n  //         bottomLeftTopRightIdx.push(lastSquareIdx + 7 * i + i);\n  //         i++;\n  //     } else {\n  //         break;\n  //     }\n  // }\n\n\n  return score;\n}\n\nfunction calculateWinner(board, lastSquareIdx) {\n  /**\n   * Returns the name of the winner HUMAN or AI. Else returns null.\n   */\n  // Check horizontal\n  const frontOfCurrRowIdx = lastSquareIdx - lastSquareIdx % 7;\n  let currRowIdx = frontOfCurrRowIdx;\n  let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n  for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[currRowIdx]; // winner has been found, return the winner\n    } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && board[currRowIdx] !== null && board[currRowIdx] === board[currRowIdx + 1]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // Check vertical\n\n\n  let currColIdx = lastSquareIdx % 7;\n  const outOfBoundsIdx = 42;\n  howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n  for (currColIdx; currColIdx < outOfBoundsIdx; currColIdx += 7) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[currColIdx]; // winner has been found, return the winner\n    } else if (currColIdx + 7 < outOfBoundsIdx && board[currColIdx] !== null && board[currColIdx] === board[currColIdx + 7]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // Check Diagonal\n  // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n  // get bottom left squares as indices\n\n\n  const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n  const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n  const bottomLeftTopRightIdx = [];\n  let i = 1;\n\n  while (lastSquareIdx - 7 * i >= 0) {\n    if (lastSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - 7 * i - i)) {\n      bottomLeftTopRightIdx.unshift(lastSquareIdx - 7 * i - i);\n      i++;\n    } else {\n      break;\n    }\n  } // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n\n\n  bottomLeftTopRightIdx.push(lastSquareIdx); // get the top right squares as indices\n\n  i = 1;\n\n  while (lastSquareIdx + 7 * i < 42) {\n    if (lastSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(lastSquareIdx + 7 * i + i)) {\n      bottomLeftTopRightIdx.push(lastSquareIdx + 7 * i + i);\n      i++;\n    } else {\n      break;\n    }\n  } // check to see if there is a 4-in-a-row from bottom left to top right\n\n\n  howManyConsecutiveCounter = 1;\n\n  for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n    } else if (board[bottomLeftTopRightIdx[i]] !== null && board[bottomLeftTopRightIdx[i]] === board[bottomLeftTopRightIdx[i + 1]]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the lastSquareIdx\n  // get bottom right squares as indices\n\n\n  const bottomRightTopLeftIdx = [];\n  i = 1;\n\n  while (lastSquareIdx - 7 * i >= 0) {\n    if (!leftColumnIdx.has(lastSquareIdx - 7 * i + i)) {\n      bottomRightTopLeftIdx.unshift(lastSquareIdx - 7 * i + i);\n      i++;\n    } else {\n      break;\n    }\n  } // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n\n\n  bottomRightTopLeftIdx.push(lastSquareIdx); // get the top left squares as indices\n\n  i = 1;\n\n  while (lastSquareIdx + 7 * i < 42) {\n    if (!rightColumnIdx.has(lastSquareIdx + 7 * i - i)) {\n      bottomRightTopLeftIdx.push(lastSquareIdx + 7 * i - i);\n      i++;\n    } else {\n      break;\n    }\n  } // check to see if there is a 4-in-a-row from bottom right to top left\n\n\n  howManyConsecutiveCounter = 1;\n\n  for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n    } else if (board[bottomRightTopLeftIdx[i]] !== null && board[bottomRightTopLeftIdx[i]] === board[bottomRightTopLeftIdx[i + 1]]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  }\n\n  return null;\n}\n\nfunction idxOfMaxOfArr(arr) {\n  let max = arr[0];\n  let maxIdx = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIdx = i;\n    }\n  }\n\n  return maxIdx;\n}\n\nfunction minimax(board, depth, maximizingPlayer, minimizingPlayer) {\n  /**\n   * minimax algorithm to determine how the ai will make its move\n   * refer to the pseudocode on wikipedia\n   */\n  // get all the possible moves that the player can drop into\n  // this should be an array with the indices\n  const possibleMovesArr = [0, 1, 2, 3, 4, 5, 6].map(idx => findLegalSquare(board, idx)).filter(idx => idx !== -1);\n  const scoresForPossibleMovesArr = possibleMovesArr.map(idx => calculateScoreForMove(board, idx, maximizingPlayer, minimizingPlayer));\n  alert(scoresForPossibleMovesArr);\n  return possibleMovesArr[idxOfMaxOfArr(scoresForPossibleMovesArr)];\n}\n\nexport default minimax;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/connect4/minimax.js"],"names":["findLegalSquare","board","idx","didNotFindLegalSquareIdx","traversingIdx","calculateScoreForWindow","windowArr","player","opposingPlayer","score","filter","val","length","calculateScoreForMove","WINDOWLENGTH","TOTALPIECES","newBoard","slice","i","currRow","rowArr","frontOfColIdx","colArr","playerOnColArrIdx","push","frontIdx","calculateWinner","lastSquareIdx","frontOfCurrRowIdx","currRowIdx","howManyConsecutiveCounter","currColIdx","outOfBoundsIdx","rightColumnIdx","Set","leftColumnIdx","bottomLeftTopRightIdx","has","unshift","bottomRightTopLeftIdx","idxOfMaxOfArr","arr","max","maxIdx","minimax","depth","maximizingPlayer","minimizingPlayer","possibleMovesArr","map","scoresForPossibleMovesArr","alert"],"mappings":"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","sourcesContent":["function findLegalSquare(board, idx) {\n    /**\n     * Returns the index of a legal square that can be filled.\n     * Note the legal square will be within the same column as idx.\n     * If all the squares within idx's column are filled, then this function returns -1.\n     */\n    const didNotFindLegalSquareIdx = -1;\n    let traversingIdx = idx;\n    while (traversingIdx - 7 >= 0) {\n        traversingIdx -= 7;\n    }\n    for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n        if (board[traversingIdx] === null) {\n            return traversingIdx;\n        }\n    }\n    return didNotFindLegalSquareIdx;\n}\n\nfunction calculateScoreForWindow(windowArr, player, opposingPlayer) {\n    /**\n     * Returns the score for a given arr, assuming the window is 4\n     */\n\n    let score = 0;\n\n    if (windowArr.filter(val => val === player).length === 4) {\n        score += 100;\n    } else if (windowArr.filter(val => val === player).length === 3 && windowArr.filter(val => val === null).length === 1) {\n        score += 5;\n    } else if (windowArr.filter(val => val === player).length === 2 && windowArr.filter(val => val === null).length === 2) {\n        score += 2;\n    }\n\n    if (windowArr.filter(val => val === opposingPlayer).length === 3 && windowArr.filter(val => val === null).length === 1) {\n        score -= 8;\n    }\n\n    return score;\n}\n\nfunction calculateScoreForMove(board, idx, player, opposingPlayer) {\n    /**\n     * Returns the score for placing player's piece onto the board whose location is idx.\n     */\n\n    let score = 0;\n    const WINDOWLENGTH = 4;\n    const TOTALPIECES = 42;\n    const newBoard = board.slice();\n    newBoard[idx] = player;\n\n    // score for center piece (preference center location)\n    for (let i = 3; i < TOTALPIECES; i += 7) {\n        if (board[i] === player) {\n            score += 2;\n        }\n    }\n\n\n    // Score for horizontal\n    for (let currRow = 0; currRow < TOTALPIECES; currRow += 7) {\n        for (let i = 0; i < WINDOWLENGTH; i++) {\n            const windowArr = rowArr.slice(currRow + i, currRow + i + WINDOWLENGTH);\n            score += calculateScoreForWindow(windowArr, player, opposingPlayer);\n        }\n\n    }\n\n    // Score for vertical\n    const frontOfColIdx = idx % 7;\n    const colArr = [];\n    let playerOnColArrIdx;\n    for (let i = frontOfColIdx; i < 42; i += 7) {\n        if (idx !== i) {\n            colArr.push(board[i]);            \n        } else { // put the player's piece onto the new board if idx === i\n            colArr.push(player);\n            playerOnColArrIdx = colArr.length - 1;\n        }\n    }\n    for (let frontIdx = 0; frontIdx < WINDOWLENGTH; frontIdx++) {\n        const windowArr = colArr.slice(frontIdx, frontIdx + WINDOWLENGTH);\n        score += calculateScoreForWindow(windowArr, player, opposingPlayer);\n    }\n\n    // // Score for diagonal\n\n    // // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n    // // get bottom left squares as indices\n    // const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n    // const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n    // const bottomLeftTopRightIdx = [];\n    // let i = 1;\n    // while (lastSquareIdx - 7 * i >= 0) {\n    //     if (lastSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - 7 * i - i)) {\n    //         bottomLeftTopRightIdx.unshift(lastSquareIdx - 7 * i - i);\n    //         i++;\n    //     } else {\n    //         break;\n    //     }\n    // }\n\n    // // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n    // bottomLeftTopRightIdx.push(lastSquareIdx);\n\n    // // get the top right squares as indices\n    // i = 1;\n    // while (lastSquareIdx + 7 * i < 42) {\n    //     if (lastSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(lastSquareIdx + 7 * i + i)) {\n    //         bottomLeftTopRightIdx.push(lastSquareIdx + 7 * i + i);\n    //         i++;\n    //     } else {\n    //         break;\n    //     }\n    // }\n\n\n    return score;\n}\n\nfunction calculateWinner(board, lastSquareIdx) {\n    /**\n     * Returns the name of the winner HUMAN or AI. Else returns null.\n     */\n\n    // Check horizontal\n    const frontOfCurrRowIdx = lastSquareIdx - (lastSquareIdx % 7);\n    let currRowIdx = frontOfCurrRowIdx;\n    let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n    for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[currRowIdx]; // winner has been found, return the winner\n        } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && board[currRowIdx] !== null && board[currRowIdx] === board[currRowIdx + 1]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // Check vertical\n    let currColIdx = lastSquareIdx % 7;\n    const outOfBoundsIdx = 42;\n    howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n    for (currColIdx; currColIdx < outOfBoundsIdx ; currColIdx += 7) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[currColIdx]; // winner has been found, return the winner\n        } else if (currColIdx + 7 < outOfBoundsIdx && board[currColIdx] !== null && board[currColIdx] === board[currColIdx + 7]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // Check Diagonal\n\n    // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n    // get bottom left squares as indices\n    const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n    const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n    const bottomLeftTopRightIdx = [];\n    let i = 1;\n    while (lastSquareIdx - 7 * i >= 0) {\n        if (lastSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - 7 * i - i)) {\n            bottomLeftTopRightIdx.unshift(lastSquareIdx - 7 * i - i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n    bottomLeftTopRightIdx.push(lastSquareIdx);\n\n    // get the top right squares as indices\n    i = 1;\n    while (lastSquareIdx + 7 * i < 42) {\n        if (lastSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(lastSquareIdx + 7 * i + i)) {\n            bottomLeftTopRightIdx.push(lastSquareIdx + 7 * i + i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // check to see if there is a 4-in-a-row from bottom left to top right\n    howManyConsecutiveCounter = 1;\n    for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n        } else if (board[bottomLeftTopRightIdx[i]] !== null && board[bottomLeftTopRightIdx[i]] === board[bottomLeftTopRightIdx[i + 1]]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the lastSquareIdx\n    // get bottom right squares as indices\n    const bottomRightTopLeftIdx = [];\n    i = 1;\n    while (lastSquareIdx - 7 * i >= 0) {\n        if (!leftColumnIdx.has(lastSquareIdx - 7 * i + i)) {\n            bottomRightTopLeftIdx.unshift(lastSquareIdx - 7 * i + i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n    bottomRightTopLeftIdx.push(lastSquareIdx);\n\n    // get the top left squares as indices\n    i = 1;\n    while (lastSquareIdx + 7 * i < 42) {\n        if (!rightColumnIdx.has(lastSquareIdx + 7 * i - i)) {\n            bottomRightTopLeftIdx.push(lastSquareIdx + 7 * i - i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // check to see if there is a 4-in-a-row from bottom right to top left\n    howManyConsecutiveCounter = 1;\n    for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n        } else if (board[bottomRightTopLeftIdx[i]] !== null && board[bottomRightTopLeftIdx[i]] === board[bottomRightTopLeftIdx[i + 1]]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    return null;\n}\n\nfunction idxOfMaxOfArr(arr) {\n    let max = arr[0];\n    let maxIdx = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i]\n            maxIdx = i;\n        }\n    }\n    return maxIdx;\n}\n\nfunction minimax(board, depth, maximizingPlayer, minimizingPlayer) {\n    /**\n     * minimax algorithm to determine how the ai will make its move\n     * refer to the pseudocode on wikipedia\n     */\n\n    // get all the possible moves that the player can drop into\n    // this should be an array with the indices\n    const possibleMovesArr = [0,1,2,3,4,5,6].map(idx => findLegalSquare(board, idx)).filter(idx => idx !== -1);\n    const scoresForPossibleMovesArr = possibleMovesArr.map(idx => calculateScoreForMove(board, idx, maximizingPlayer, minimizingPlayer));\n    alert(scoresForPossibleMovesArr);\n    return possibleMovesArr[idxOfMaxOfArr(scoresForPossibleMovesArr)];\n}\n\nexport default minimax;"]},"metadata":{},"sourceType":"module"}