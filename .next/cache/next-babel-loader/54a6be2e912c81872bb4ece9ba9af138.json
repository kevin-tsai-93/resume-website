{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js\";\nimport Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax'; // Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\n\nclass Connect4Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(42).fill(null),\n      // either HUMAN or AI or null\n      isHumanTurn: true,\n      selectedSquareIdx: null\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.findLegalSquare = this.findLegalSquare.bind(this);\n    this.calculateWinner = this.calculateWinner.bind(this);\n  }\n\n  handleClick(currentSquareIdx) {\n    const squares = this.state.squares.slice();\n    const legalSquareToFillIdx = this.findLegalSquare(currentSquareIdx);\n\n    if (legalSquareToFillIdx !== -1) {\n      squares[legalSquareToFillIdx] = this.state.isHumanTurn ? HUMAN : AI;\n      this.setState(prevState => ({\n        squares: squares,\n        isHumanTurn: !prevState.isHumanTurn,\n        selectedSquareIdx: legalSquareToFillIdx\n      }));\n    }\n  }\n\n  findLegalSquare(idx) {\n    /**\n     * Returns the index of a legal square that can be filled. Otherwise, -1.\n     */\n    const didNotFindLegalSquareIdx = -1;\n    let traversingIdx = idx;\n\n    while (traversingIdx - 7 >= 0) {\n      traversingIdx -= 7;\n    }\n\n    for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n      if (this.state.squares[traversingIdx] === null) {\n        return traversingIdx;\n      }\n    }\n\n    return didNotFindLegalSquareIdx;\n  }\n\n  calculateWinner() {\n    /**\n     * Returns the name of the winner HUMAN or AI. Else returns null.\n     */\n    // Check horizontal\n    const frontOfCurrRowIdx = this.state.selectedSquareIdx - this.state.selectedSquareIdx % 7;\n    let currRowIdx = frontOfCurrRowIdx;\n    let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n    for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n      if (howManyConsecutiveCounter === 4) {\n        return this.state.squares[currRowIdx]; // winner has been found, return the winner\n      } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && this.state.squares[currRowIdx] !== null && this.state.squares[currRowIdx] === this.state.squares[currRowIdx + 1]) {\n        howManyConsecutiveCounter++;\n      } else {\n        // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n        howManyConsecutiveCounter = 1;\n      }\n    } // Check vertical\n\n\n    let currColIdx = this.state.selectedSquareIdx % 7;\n    const outOfBoundsIdx = 42;\n    howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n    for (currColIdx; currColIdx < outOfBoundsIdx; currColIdx += 7) {\n      if (howManyConsecutiveCounter === 4) {\n        return this.state.squares[currColIdx]; // winner has been found, return the winner\n      } else if (currColIdx + 7 < outOfBoundsIdx && this.state.squares[currColIdx] !== null && this.state.squares[currColIdx] === this.state.squares[currColIdx + 7]) {\n        howManyConsecutiveCounter++;\n      } else {\n        // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n        howManyConsecutiveCounter = 1;\n      }\n    } // Check Diagonal\n    // start with BOTTOM-LEFT TO TOP-RIGHT relative to the this.state.selectedSquareIdx\n    // get bottom left squares as indices\n\n\n    const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n    const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n    const bottomLeftTopRightIdx = [];\n    let i = 1;\n\n    while (this.state.selectedSquareIdx - 7 * i >= 0) {\n      if (this.state.selectedSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(this.state.selectedSquareIdx - 7 * i - i)) {\n        bottomLeftTopRightIdx.unshift(this.state.selectedSquareIdx - 7 * i - i);\n        i++;\n      } else {\n        break;\n      }\n    } // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n\n\n    bottomLeftTopRightIdx.push(this.state.selectedSquareIdx); // get the top right squares as indices\n\n    i = 1;\n\n    while (this.state.selectedSquareIdx + 7 * i < 42) {\n      if (this.state.selectedSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(this.state.selectedSquareIdx + 7 * i + i)) {\n        bottomLeftTopRightIdx.push(this.state.selectedSquareIdx + 7 * i + i);\n        i++;\n      } else {\n        break;\n      }\n    } // check to see if there is a 4-in-a-row from bottom left to top right\n\n\n    howManyConsecutiveCounter = 1;\n\n    for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n      if (howManyConsecutiveCounter === 4) {\n        return this.state.squares[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n      } else if (this.state.squares[bottomLeftTopRightIdx[i]] !== null && this.state.squares[bottomLeftTopRightIdx[i]] === this.state.squares[bottomLeftTopRightIdx[i + 1]]) {\n        howManyConsecutiveCounter++;\n      } else {\n        // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n        howManyConsecutiveCounter = 1;\n      }\n    } // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the this.state.selectedSquareIdx\n    // get bottom right squares as indices\n\n\n    const bottomRightTopLeftIdx = [];\n    i = 1;\n\n    while (this.state.selectedSquareIdx - 7 * i >= 0) {\n      if (!leftColumnIdx.has(this.state.selectedSquareIdx - 7 * i + i)) {\n        bottomRightTopLeftIdx.unshift(this.state.selectedSquareIdx - 7 * i + i);\n        i++;\n      } else {\n        break;\n      }\n    } // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n\n\n    bottomRightTopLeftIdx.push(this.state.selectedSquareIdx); // get the top left squares as indices\n\n    i = 1;\n\n    while (this.state.selectedSquareIdx + 7 * i < 42) {\n      if (!rightColumnIdx.has(this.state.selectedSquareIdx + 7 * i - i)) {\n        bottomRightTopLeftIdx.push(this.state.selectedSquareIdx + 7 * i - i);\n        i++;\n      } else {\n        break;\n      }\n    } // check to see if there is a 4-in-a-row from bottom right to top left\n\n\n    howManyConsecutiveCounter = 1;\n\n    for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n      if (howManyConsecutiveCounter === 4) {\n        return this.state.squares[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n      } else if (this.state.squares[bottomRightTopLeftIdx[i]] !== null && this.state.squares[bottomRightTopLeftIdx[i]] === this.state.squares[bottomRightTopLeftIdx[i + 1]]) {\n        howManyConsecutiveCounter++;\n      } else {\n        // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n        howManyConsecutiveCounter = 1;\n      }\n    }\n\n    return null;\n  }\n\n  render() {\n    const winner = this.calculateWinner(); // let the AI make a move if it's the AI's turn and the game isn't over\n\n    if (winner === null && !this.state.isHumanTurn && this.state.squares.includes(null)) {\n      let max = 6;\n      let min = 0;\n      let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n      let aiSelectedIdx = this.findLegalSquare(randIdx);\n\n      while (aiSelectedIdx === -1) {\n        randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n        aiSelectedIdx = this.findLegalSquare(randIdx);\n      }\n\n      const squares = this.state.squares.slice();\n      squares[aiSelectedIdx] = AI;\n      this.setState(prevState => ({\n        squares: squares,\n        isHumanTurn: !prevState.isHumanTurn,\n        selectedSquareIdx: aiSelectedIdx\n      }));\n    }\n\n    let display = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: this.state.squares,\n        onClick: this.handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 70\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 23\n    }, this);\n\n    if (winner !== null) {\n      display = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"The winner is: the \", winner]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(Board, {\n            squares: this.state.squares,\n            onClick: this.handleClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 76\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"d-flex justify-content-center\",\n        children: \"This is the Connect 4 Project!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Can you beat the AI?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), display]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\nexport default Connect4Game;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js"],"names":["Board","React","Component","minimax","HUMAN","AI","Connect4Game","constructor","props","state","squares","Array","fill","isHumanTurn","selectedSquareIdx","handleClick","bind","findLegalSquare","calculateWinner","currentSquareIdx","slice","legalSquareToFillIdx","setState","prevState","idx","didNotFindLegalSquareIdx","traversingIdx","frontOfCurrRowIdx","currRowIdx","howManyConsecutiveCounter","currColIdx","outOfBoundsIdx","rightColumnIdx","Set","leftColumnIdx","bottomLeftTopRightIdx","i","has","unshift","push","length","bottomRightTopLeftIdx","render","winner","includes","max","min","randIdx","Math","floor","random","aiSelectedIdx","display"],"mappings":"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","sourcesContent":["import Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax';\n\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\n\nclass Connect4Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(42).fill(null), // either HUMAN or AI or null\n            isHumanTurn: true,\n            selectedSquareIdx: null\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.findLegalSquare = this.findLegalSquare.bind(this);\n        this.calculateWinner = this.calculateWinner.bind(this);\n    }\n\n    handleClick(currentSquareIdx) {\n        const squares = this.state.squares.slice();\n        const legalSquareToFillIdx = this.findLegalSquare(currentSquareIdx);\n        if (legalSquareToFillIdx !== -1) {\n            squares[legalSquareToFillIdx] = this.state.isHumanTurn ? HUMAN : AI;\n            this.setState(prevState => ({\n                squares: squares,\n                isHumanTurn: !prevState.isHumanTurn,\n                selectedSquareIdx: legalSquareToFillIdx\n            }));\n        }\n    }\n\n    findLegalSquare(idx) {\n        /**\n         * Returns the index of a legal square that can be filled. Otherwise, -1.\n         */\n        const didNotFindLegalSquareIdx = -1;\n        let traversingIdx = idx;\n        while (traversingIdx - 7 >= 0) {\n            traversingIdx -= 7;\n        }\n        for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n            if (this.state.squares[traversingIdx] === null) {\n                return traversingIdx;\n            }\n        }\n        return didNotFindLegalSquareIdx;\n    }\n\n    calculateWinner() {\n        /**\n         * Returns the name of the winner HUMAN or AI. Else returns null.\n         */\n\n        // Check horizontal\n        const frontOfCurrRowIdx = this.state.selectedSquareIdx - (this.state.selectedSquareIdx % 7);\n        let currRowIdx = frontOfCurrRowIdx;\n        let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n        for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[currRowIdx]; // winner has been found, return the winner\n            } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && this.state.squares[currRowIdx] !== null && this.state.squares[currRowIdx] === this.state.squares[currRowIdx + 1]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        // Check vertical\n        let currColIdx = this.state.selectedSquareIdx % 7;\n        const outOfBoundsIdx = 42;\n        howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n        for (currColIdx; currColIdx < outOfBoundsIdx ; currColIdx += 7) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[currColIdx]; // winner has been found, return the winner\n            } else if (currColIdx + 7 < outOfBoundsIdx && this.state.squares[currColIdx] !== null && this.state.squares[currColIdx] === this.state.squares[currColIdx + 7]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        // Check Diagonal\n\n        // start with BOTTOM-LEFT TO TOP-RIGHT relative to the this.state.selectedSquareIdx\n        // get bottom left squares as indices\n        const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n        const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n        const bottomLeftTopRightIdx = [];\n        let i = 1;\n        while (this.state.selectedSquareIdx - 7 * i >= 0) {\n            if (this.state.selectedSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(this.state.selectedSquareIdx - 7 * i - i)) {\n                bottomLeftTopRightIdx.unshift(this.state.selectedSquareIdx - 7 * i - i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n        bottomLeftTopRightIdx.push(this.state.selectedSquareIdx);\n\n        // get the top right squares as indices\n        i = 1;\n        while (this.state.selectedSquareIdx + 7 * i < 42) {\n            if (this.state.selectedSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(this.state.selectedSquareIdx + 7 * i + i)) {\n                bottomLeftTopRightIdx.push(this.state.selectedSquareIdx + 7 * i + i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // check to see if there is a 4-in-a-row from bottom left to top right\n        howManyConsecutiveCounter = 1;\n        for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n            } else if (this.state.squares[bottomLeftTopRightIdx[i]] !== null && this.state.squares[bottomLeftTopRightIdx[i]] === this.state.squares[bottomLeftTopRightIdx[i + 1]]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the this.state.selectedSquareIdx\n        // get bottom right squares as indices\n        const bottomRightTopLeftIdx = [];\n        i = 1;\n        while (this.state.selectedSquareIdx - 7 * i >= 0) {\n            if (!leftColumnIdx.has(this.state.selectedSquareIdx - 7 * i + i)) {\n                bottomRightTopLeftIdx.unshift(this.state.selectedSquareIdx - 7 * i + i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n        bottomRightTopLeftIdx.push(this.state.selectedSquareIdx);\n\n        // get the top left squares as indices\n        i = 1;\n        while (this.state.selectedSquareIdx + 7 * i < 42) {\n            if (!rightColumnIdx.has(this.state.selectedSquareIdx + 7 * i - i)) {\n                bottomRightTopLeftIdx.push(this.state.selectedSquareIdx + 7 * i - i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // check to see if there is a 4-in-a-row from bottom right to top left\n        howManyConsecutiveCounter = 1;\n        for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n            } else if (this.state.squares[bottomRightTopLeftIdx[i]] !== null && this.state.squares[bottomRightTopLeftIdx[i]] === this.state.squares[bottomRightTopLeftIdx[i + 1]]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        return null;\n    }\n\n    render() {\n        const winner = this.calculateWinner();\n\n        // let the AI make a move if it's the AI's turn and the game isn't over\n        if (winner === null && !this.state.isHumanTurn && this.state.squares.includes(null)) {\n            let max = 6;\n            let min = 0;\n            let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n            let aiSelectedIdx = this.findLegalSquare(randIdx);\n            while (aiSelectedIdx === -1) {\n                randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n                aiSelectedIdx = this.findLegalSquare(randIdx);\n            }\n            const squares = this.state.squares.slice();\n            squares[aiSelectedIdx] = AI;\n            this.setState(prevState => ({\n                squares : squares,\n                isHumanTurn: !prevState.isHumanTurn,\n                selectedSquareIdx: aiSelectedIdx\n            }));\n        }\n\n        let display = <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={this.handleClick} /></div>;\n        if (winner !== null) {\n            display =   <>\n                            <h2>The winner is: the {winner}</h2>\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={this.handleClick} /></div>\n                        </>;\n        }\n\n        return (\n            <div className=\"container\">\n                <h1 className=\"d-flex justify-content-center\">This is the Connect 4 Project!</h1>\n                \n                <p>Can you beat the AI?</p>\n                {display}\n            </div>\n        );\n    };\n};\n\nexport default Connect4Game;"]},"metadata":{},"sourceType":"module"}