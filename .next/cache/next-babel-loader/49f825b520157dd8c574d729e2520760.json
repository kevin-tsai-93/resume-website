{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js\";\nimport Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax'; // Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFCOLS = 7;\nconst TOTALNUMOFSQUARES = TOTALNUMOFROWS * TOTALNUMOFCOLS;\n\nclass Connect4Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(TOTALNUMOFROWS).fill(Array(TOTALNUMOFCOLS).fill(null)),\n      // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n      isHumanTurn: true,\n      selectedSquareIdx: null\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.findLegalSquareWithinColumn = this.findLegalSquareWithinColumn.bind(this);\n    this.calculateWinner = this.calculateWinner.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  handleClick(selectedRowIdx, selectedColIdx) {\n    const squares = this.state.squares.slice();\n    const legalSquareToFillIdx = this.findLegalSquareWithinColumn(selectedRowIdx, selectedColIdx); // CONTINUE HERE AFTER FIXING findLegalSquareWithinColumn FUNCTION\n\n    if (legalSquareToFillIdx !== -1) {\n      squares[legalSquareToFillIdx] = this.state.isHumanTurn ? HUMAN : AI;\n      this.setState(prevState => ({\n        squares: squares,\n        isHumanTurn: !prevState.isHumanTurn,\n        selectedSquareIdx: legalSquareToFillIdx\n      }));\n    }\n  }\n\n  handleReset() {\n    this.setState({\n      squares: Array(42).fill(null),\n      // either HUMAN or AI or null\n      isHumanTurn: true,\n      selectedSquareIdx: null\n    });\n  }\n\n  findLegalSquareWithinColumn(rowIdx, colIdx) {\n    /**\n     * Returns the row index and column index of a legal square that can be filled.\n     * Note the legal square will be within the same column as colIdx.\n     * If all the squares within idx's column are filled, then this function returns -1.\n     */\n    const didNotfindLegalSquareWithinColumnIdx = -1;\n    let traversingIdx = idx;\n\n    while (traversingIdx - 7 >= 0) {\n      traversingIdx -= 7;\n    }\n\n    for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n      if (this.state.squares[traversingIdx] === null) {\n        return traversingIdx;\n      }\n    }\n\n    return didNotfindLegalSquareWithinColumnIdx;\n  }\n\n  calculateWinner() {\n    /**\n     * Returns the name of the winner HUMAN or AI. Else returns null.\n     */\n    // Check horizontal\n    const frontOfCurrRowIdx = this.state.selectedSquareIdx - this.state.selectedSquareIdx % 7;\n    let currRowIdx = frontOfCurrRowIdx;\n    let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n    for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n      if (howManyConsecutiveCounter === 4) {\n        return this.state.squares[currRowIdx]; // winner has been found, return the winner\n      } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && this.state.squares[currRowIdx] !== null && this.state.squares[currRowIdx] === this.state.squares[currRowIdx + 1]) {\n        howManyConsecutiveCounter++;\n      } else {\n        // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n        howManyConsecutiveCounter = 1;\n      }\n    } // Check vertical\n\n\n    let currColIdx = this.state.selectedSquareIdx % 7;\n    const outOfBoundsIdx = 42;\n    howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n    for (currColIdx; currColIdx < outOfBoundsIdx; currColIdx += 7) {\n      if (howManyConsecutiveCounter === 4) {\n        return this.state.squares[currColIdx]; // winner has been found, return the winner\n      } else if (currColIdx + 7 < outOfBoundsIdx && this.state.squares[currColIdx] !== null && this.state.squares[currColIdx] === this.state.squares[currColIdx + 7]) {\n        howManyConsecutiveCounter++;\n      } else {\n        // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n        howManyConsecutiveCounter = 1;\n      }\n    } // Check Diagonal\n    // start with BOTTOM-LEFT TO TOP-RIGHT relative to the this.state.selectedSquareIdx\n    // get bottom left squares as indices\n\n\n    const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n    const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n    const bottomLeftTopRightIdx = [];\n    let i = 1;\n\n    while (this.state.selectedSquareIdx - 7 * i >= 0) {\n      if (this.state.selectedSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(this.state.selectedSquareIdx - 7 * i - i)) {\n        bottomLeftTopRightIdx.unshift(this.state.selectedSquareIdx - 7 * i - i);\n        i++;\n      } else {\n        break;\n      }\n    } // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n\n\n    bottomLeftTopRightIdx.push(this.state.selectedSquareIdx); // get the top right squares as indices\n\n    i = 1;\n\n    while (this.state.selectedSquareIdx + 7 * i < 42) {\n      if (this.state.selectedSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(this.state.selectedSquareIdx + 7 * i + i)) {\n        bottomLeftTopRightIdx.push(this.state.selectedSquareIdx + 7 * i + i);\n        i++;\n      } else {\n        break;\n      }\n    } // check to see if there is a 4-in-a-row from bottom left to top right\n\n\n    howManyConsecutiveCounter = 1;\n\n    for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n      if (howManyConsecutiveCounter === 4) {\n        return this.state.squares[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n      } else if (this.state.squares[bottomLeftTopRightIdx[i]] !== null && this.state.squares[bottomLeftTopRightIdx[i]] === this.state.squares[bottomLeftTopRightIdx[i + 1]]) {\n        howManyConsecutiveCounter++;\n      } else {\n        // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n        howManyConsecutiveCounter = 1;\n      }\n    } // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the this.state.selectedSquareIdx\n    // get bottom right squares as indices\n\n\n    const bottomRightTopLeftIdx = [];\n    i = 1;\n\n    while (this.state.selectedSquareIdx - 7 * i >= 0) {\n      if (!leftColumnIdx.has(this.state.selectedSquareIdx - 7 * i + i)) {\n        bottomRightTopLeftIdx.unshift(this.state.selectedSquareIdx - 7 * i + i);\n        i++;\n      } else {\n        break;\n      }\n    } // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n\n\n    bottomRightTopLeftIdx.push(this.state.selectedSquareIdx); // get the top left squares as indices\n\n    i = 1;\n\n    while (this.state.selectedSquareIdx + 7 * i < 42) {\n      if (!rightColumnIdx.has(this.state.selectedSquareIdx + 7 * i - i)) {\n        bottomRightTopLeftIdx.push(this.state.selectedSquareIdx + 7 * i - i);\n        i++;\n      } else {\n        break;\n      }\n    } // check to see if there is a 4-in-a-row from bottom right to top left\n\n\n    howManyConsecutiveCounter = 1;\n\n    for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n      if (howManyConsecutiveCounter === 4) {\n        return this.state.squares[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n      } else if (this.state.squares[bottomRightTopLeftIdx[i]] !== null && this.state.squares[bottomRightTopLeftIdx[i]] === this.state.squares[bottomRightTopLeftIdx[i + 1]]) {\n        howManyConsecutiveCounter++;\n      } else {\n        // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n        howManyConsecutiveCounter = 1;\n      }\n    }\n\n    return null;\n  }\n\n  render() {\n    const isGameOver = !this.state.squares.includes(null); // calculate the winner\n\n    const winner = this.calculateWinner(); // let the AI make a move if it's the AI's turn and the game isn't over\n\n    if (winner === null && !this.state.isHumanTurn && !isGameOver) {\n      let aiSelectedIdx = minimax(this.state.squares.slice(), 0, AI, HUMAN); // let max = 6;\n      // let min = 0;\n      // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n      // let aiSelectedIdx = this.findLegalSquareWithinColumn(randIdx);\n      // while (aiSelectedIdx === -1) {\n      //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n      //     aiSelectedIdx = this.findLegalSquareWithinColumn(randIdx);\n      // }\n\n      const squares = this.state.squares.slice();\n      squares[aiSelectedIdx] = AI;\n      this.setState(prevState => ({\n        squares: squares,\n        isHumanTurn: !prevState.isHumanTurn,\n        selectedSquareIdx: aiSelectedIdx\n      }));\n    } // setup the display\n\n\n    const horizontalRule = /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        visibility: \"hidden\",\n        marginBottom: \"0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 32\n    }, this);\n\n    const button = /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        outline: \"none\",\n        userSelect: \"none\"\n      },\n      onClick: this.handleReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 24\n    }, this);\n\n    let display = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"d-flex justify-content-center\",\n        children: \"Good luck!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [button, horizontalRule]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: this.state.squares,\n          onClick: this.handleClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 76\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true);\n\n    if (winner !== null) {\n      // Someone has won the game. Display winner, and disable the board.\n      display = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [winner === HUMAN ? /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"d-flex justify-content-center\",\n          children: \"\\uD83C\\uDF89 Congratulations! You won! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 49\n        }, this) : /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"d-flex justify-content-center\",\n          children: \"The AI won! Try again!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 134\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: [button, horizontalRule]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(Board, {\n            squares: this.state.squares,\n            onClick: () => {\n              return;\n              /* this does nothing... Disables onClick */\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 76\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true);\n    } else if (winner === null && isGameOver) {\n      // It's a tie. The game is over. Disable the board.\n      display = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"d-flex justify-content-center\",\n          children: \"It's a draw! Try again!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: [button, horizontalRule]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(Board, {\n            squares: this.state.squares,\n            onClick: () => {\n              return;\n              /* this does nothing... Disables onClick */\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 76\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"d-flex justify-content-center\",\n        children: \"Welcome to Connect 4!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), display]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\nexport default Connect4Game;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js"],"names":["Board","React","Component","minimax","HUMAN","AI","TOTALNUMOFROWS","TOTALNUMOFCOLS","TOTALNUMOFSQUARES","Connect4Game","constructor","props","state","squares","Array","fill","isHumanTurn","selectedSquareIdx","handleClick","bind","findLegalSquareWithinColumn","calculateWinner","handleReset","selectedRowIdx","selectedColIdx","slice","legalSquareToFillIdx","setState","prevState","rowIdx","colIdx","didNotfindLegalSquareWithinColumnIdx","traversingIdx","idx","frontOfCurrRowIdx","currRowIdx","howManyConsecutiveCounter","currColIdx","outOfBoundsIdx","rightColumnIdx","Set","leftColumnIdx","bottomLeftTopRightIdx","i","has","unshift","push","length","bottomRightTopLeftIdx","render","isGameOver","includes","winner","aiSelectedIdx","horizontalRule","visibility","marginBottom","button","outline","userSelect","display","textAlign"],"mappings":"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","sourcesContent":["import Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax';\n\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFCOLS = 7;\nconst TOTALNUMOFSQUARES = TOTALNUMOFROWS * TOTALNUMOFCOLS;\n\n\nclass Connect4Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(TOTALNUMOFROWS).fill(Array(TOTALNUMOFCOLS).fill(null)), // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n            isHumanTurn: true,\n            selectedSquareIdx: null\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.findLegalSquareWithinColumn = this.findLegalSquareWithinColumn.bind(this);\n        this.calculateWinner = this.calculateWinner.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n    }\n\n    handleClick(selectedRowIdx, selectedColIdx) {\n        const squares = this.state.squares.slice();\n        const legalSquareToFillIdx = this.findLegalSquareWithinColumn(selectedRowIdx, selectedColIdx);\n        // CONTINUE HERE AFTER FIXING findLegalSquareWithinColumn FUNCTION\n        if (legalSquareToFillIdx !== -1) {\n            squares[legalSquareToFillIdx] = this.state.isHumanTurn ? HUMAN : AI;\n            this.setState(prevState => ({\n                squares: squares,\n                isHumanTurn: !prevState.isHumanTurn,\n                selectedSquareIdx: legalSquareToFillIdx\n            }));\n        }\n    }\n\n    handleReset() {\n        this.setState({\n            squares: Array(42).fill(null), // either HUMAN or AI or null\n            isHumanTurn: true,\n            selectedSquareIdx: null\n        });\n    }\n\n    findLegalSquareWithinColumn(rowIdx, colIdx) {\n        /**\n         * Returns the row index and column index of a legal square that can be filled.\n         * Note the legal square will be within the same column as colIdx.\n         * If all the squares within idx's column are filled, then this function returns -1.\n         */\n        const didNotfindLegalSquareWithinColumnIdx = -1;\n        let traversingIdx = idx;\n        while (traversingIdx - 7 >= 0) {\n            traversingIdx -= 7;\n        }\n        for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n            if (this.state.squares[traversingIdx] === null) {\n                return traversingIdx;\n            }\n        }\n        return didNotfindLegalSquareWithinColumnIdx;\n    }\n\n    calculateWinner() {\n        /**\n         * Returns the name of the winner HUMAN or AI. Else returns null.\n         */\n\n        // Check horizontal\n        const frontOfCurrRowIdx = this.state.selectedSquareIdx - (this.state.selectedSquareIdx % 7);\n        let currRowIdx = frontOfCurrRowIdx;\n        let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n        for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[currRowIdx]; // winner has been found, return the winner\n            } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && this.state.squares[currRowIdx] !== null && this.state.squares[currRowIdx] === this.state.squares[currRowIdx + 1]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        // Check vertical\n        let currColIdx = this.state.selectedSquareIdx % 7;\n        const outOfBoundsIdx = 42;\n        howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n        for (currColIdx; currColIdx < outOfBoundsIdx ; currColIdx += 7) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[currColIdx]; // winner has been found, return the winner\n            } else if (currColIdx + 7 < outOfBoundsIdx && this.state.squares[currColIdx] !== null && this.state.squares[currColIdx] === this.state.squares[currColIdx + 7]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        // Check Diagonal\n\n        // start with BOTTOM-LEFT TO TOP-RIGHT relative to the this.state.selectedSquareIdx\n        // get bottom left squares as indices\n        const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n        const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n        const bottomLeftTopRightIdx = [];\n        let i = 1;\n        while (this.state.selectedSquareIdx - 7 * i >= 0) {\n            if (this.state.selectedSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(this.state.selectedSquareIdx - 7 * i - i)) {\n                bottomLeftTopRightIdx.unshift(this.state.selectedSquareIdx - 7 * i - i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n        bottomLeftTopRightIdx.push(this.state.selectedSquareIdx);\n\n        // get the top right squares as indices\n        i = 1;\n        while (this.state.selectedSquareIdx + 7 * i < 42) {\n            if (this.state.selectedSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(this.state.selectedSquareIdx + 7 * i + i)) {\n                bottomLeftTopRightIdx.push(this.state.selectedSquareIdx + 7 * i + i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // check to see if there is a 4-in-a-row from bottom left to top right\n        howManyConsecutiveCounter = 1;\n        for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n            } else if (this.state.squares[bottomLeftTopRightIdx[i]] !== null && this.state.squares[bottomLeftTopRightIdx[i]] === this.state.squares[bottomLeftTopRightIdx[i + 1]]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the this.state.selectedSquareIdx\n        // get bottom right squares as indices\n        const bottomRightTopLeftIdx = [];\n        i = 1;\n        while (this.state.selectedSquareIdx - 7 * i >= 0) {\n            if (!leftColumnIdx.has(this.state.selectedSquareIdx - 7 * i + i)) {\n                bottomRightTopLeftIdx.unshift(this.state.selectedSquareIdx - 7 * i + i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n        bottomRightTopLeftIdx.push(this.state.selectedSquareIdx);\n\n        // get the top left squares as indices\n        i = 1;\n        while (this.state.selectedSquareIdx + 7 * i < 42) {\n            if (!rightColumnIdx.has(this.state.selectedSquareIdx + 7 * i - i)) {\n                bottomRightTopLeftIdx.push(this.state.selectedSquareIdx + 7 * i - i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // check to see if there is a 4-in-a-row from bottom right to top left\n        howManyConsecutiveCounter = 1;\n        for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n            } else if (this.state.squares[bottomRightTopLeftIdx[i]] !== null && this.state.squares[bottomRightTopLeftIdx[i]] === this.state.squares[bottomRightTopLeftIdx[i + 1]]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        return null;\n    }\n\n    render() {\n\n        const isGameOver = !this.state.squares.includes(null);\n        \n        // calculate the winner\n        const winner = this.calculateWinner();\n\n        // let the AI make a move if it's the AI's turn and the game isn't over\n        if (winner === null && !this.state.isHumanTurn && !isGameOver) {\n            let aiSelectedIdx = minimax(this.state.squares.slice(), 0, AI, HUMAN);\n            // let max = 6;\n            // let min = 0;\n            // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n            // let aiSelectedIdx = this.findLegalSquareWithinColumn(randIdx);\n            // while (aiSelectedIdx === -1) {\n            //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n            //     aiSelectedIdx = this.findLegalSquareWithinColumn(randIdx);\n            // }\n            const squares = this.state.squares.slice();\n            squares[aiSelectedIdx] = AI;\n            this.setState(prevState => ({\n                squares : squares,\n                isHumanTurn: !prevState.isHumanTurn,\n                selectedSquareIdx: aiSelectedIdx\n            }));\n        }\n\n        // setup the display\n\n        const horizontalRule = <hr style={{visibility: \"hidden\", marginBottom: \"0\"}} />;\n        const button = <button style={{outline: \"none\", userSelect: \"none\"}} onClick={this.handleReset}>Reset</button>;\n\n        let display =   <>\n                            <h5 className=\"d-flex justify-content-center\" >Good luck!</h5>\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={this.handleClick} /></div>\n                        </>;\n\n        if (winner !== null) { // Someone has won the game. Display winner, and disable the board.\n            display =   <>\n                            {winner === HUMAN ? <h5 className=\"d-flex justify-content-center\">🎉 Congratulations! You won! 🎉</h5> : <h5 className=\"d-flex justify-content-center\">The AI won! Try again!</h5>}\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={() => {return; /* this does nothing... Disables onClick */}} /></div>\n                        </>;\n        } else if (winner === null && isGameOver) { // It's a tie. The game is over. Disable the board.\n            display =   <>\n                            <h5 className=\"d-flex justify-content-center\" >It's a draw! Try again!</h5>\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={() => {return; /* this does nothing... Disables onClick */}} /></div>\n                        </>;\n        }\n\n        return (\n            <div className=\"container\">\n                <h2 className=\"d-flex justify-content-center\">Welcome to Connect 4!</h2>\n                {display}\n            </div>\n        );\n    };\n};\n\nexport default Connect4Game;"]},"metadata":{},"sourceType":"module"}