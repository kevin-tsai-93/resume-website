{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax'; // Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nvar HUMAN = \"you\";\nvar AI = \"ai\";\nvar TOTALNUMOFROWS = 6;\nvar TOTALNUMOFCOLS = 7;\nvar TOTALNUMOFSQUARES = TOTALNUMOFROWS * TOTALNUMOFCOLS;\n\nvar Connect4Game = /*#__PURE__*/function (_React$Component) {\n  _inherits(Connect4Game, _React$Component);\n\n  var _super = _createSuper(Connect4Game);\n\n  function Connect4Game(props) {\n    var _this;\n\n    _classCallCheck(this, Connect4Game);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      squares: Array(TOTALNUMOFROWS).fill(Array(TOTALNUMOFCOLS).fill(null)),\n      // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n      isHumanTurn: true,\n      mostRecentSelectionRowIdx: null,\n      mostRecentSelectionColIdx: null\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.findLegalRowIdxWithinColumn = _this.findLegalRowIdxWithinColumn.bind(_assertThisInitialized(_this));\n    _this.calculateWinner = _this.calculateWinner.bind(_assertThisInitialized(_this));\n    _this.handleReset = _this.handleReset.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Connect4Game, [{\n    key: \"handleClick\",\n    value: function handleClick(selectedColIdx) {\n      var squares = this.state.squares.slice();\n      var legalRowPositionToFillIdx = this.findLegalRowIdxWithinColumn(selectedColIdx);\n\n      if (legalRowPositionToFillIdx !== -1) {\n        squares[(legalRowPositionToFillIdx, selectedColIdx)] = this.state.isHumanTurn ? HUMAN : AI;\n        this.setState(function (prevState) {\n          return {\n            squares: squares,\n            isHumanTurn: !prevState.isHumanTurn,\n            mostRecentSelectionRowIdx: legalRowPositionToFillIdx,\n            mostRecentSelectionColIdx: selectedColIdx\n          };\n        });\n      }\n    }\n  }, {\n    key: \"handleReset\",\n    value: function handleReset() {\n      this.setState({\n        squares: Array(TOTALNUMOFROWS).fill(Array(TOTALNUMOFCOLS).fill(null)),\n        // either HUMAN or AI or null\n        isHumanTurn: true\n      });\n    }\n  }, {\n    key: \"findLegalRowIdxWithinColumn\",\n    value: function findLegalRowIdxWithinColumn(selectedColIdx) {\n      /**\n       * Returns the row index of a legal square that can be filled.\n       * Note the legal square will be within the same column as selectedColIdx.\n       * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n       */\n      var didNotFindLegalRowIdxWithinColumnIdx = -1;\n\n      for (var rowIdx = 0; rowIdx < this.state.squares.length; rowIdx++) {\n        if (this.state.squares[rowIdx][selectedColIdx] === null) {\n          return rowIdx;\n        }\n      }\n\n      return didNotFindLegalRowIdxWithinColumnIdx;\n    }\n  }, {\n    key: \"calculateWinner\",\n    value: function calculateWinner() {\n      /**\n       * Returns the name of the winner HUMAN or AI. Else returns null.\n       */\n      // Check horizontal\n      var frontOfCurrRowIdx = this.state.selectedSquareIdx - this.state.selectedSquareIdx % 7;\n      var currRowIdx = frontOfCurrRowIdx;\n      var howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n      for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n        if (howManyConsecutiveCounter === 4) {\n          return this.state.squares[currRowIdx]; // winner has been found, return the winner\n        } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && this.state.squares[currRowIdx] !== null && this.state.squares[currRowIdx] === this.state.squares[currRowIdx + 1]) {\n          howManyConsecutiveCounter++;\n        } else {\n          // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n          howManyConsecutiveCounter = 1;\n        }\n      } // Check vertical\n\n\n      var currColIdx = this.state.selectedSquareIdx % 7;\n      var outOfBoundsIdx = 42;\n      howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n      for (currColIdx; currColIdx < outOfBoundsIdx; currColIdx += 7) {\n        if (howManyConsecutiveCounter === 4) {\n          return this.state.squares[currColIdx]; // winner has been found, return the winner\n        } else if (currColIdx + 7 < outOfBoundsIdx && this.state.squares[currColIdx] !== null && this.state.squares[currColIdx] === this.state.squares[currColIdx + 7]) {\n          howManyConsecutiveCounter++;\n        } else {\n          // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n          howManyConsecutiveCounter = 1;\n        }\n      } // Check Diagonal\n      // start with BOTTOM-LEFT TO TOP-RIGHT relative to the this.state.selectedSquareIdx\n      // get bottom left squares as indices\n\n\n      var rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n      var leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n      var bottomLeftTopRightIdx = [];\n      var i = 1;\n\n      while (this.state.selectedSquareIdx - 7 * i >= 0) {\n        if (this.state.selectedSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(this.state.selectedSquareIdx - 7 * i - i)) {\n          bottomLeftTopRightIdx.unshift(this.state.selectedSquareIdx - 7 * i - i);\n          i++;\n        } else {\n          break;\n        }\n      } // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n\n\n      bottomLeftTopRightIdx.push(this.state.selectedSquareIdx); // get the top right squares as indices\n\n      i = 1;\n\n      while (this.state.selectedSquareIdx + 7 * i < 42) {\n        if (this.state.selectedSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(this.state.selectedSquareIdx + 7 * i + i)) {\n          bottomLeftTopRightIdx.push(this.state.selectedSquareIdx + 7 * i + i);\n          i++;\n        } else {\n          break;\n        }\n      } // check to see if there is a 4-in-a-row from bottom left to top right\n\n\n      howManyConsecutiveCounter = 1;\n\n      for (var _i = 0; _i < bottomLeftTopRightIdx.length; _i++) {\n        if (howManyConsecutiveCounter === 4) {\n          return this.state.squares[bottomLeftTopRightIdx[_i]]; // winner has been found, return the winner\n        } else if (this.state.squares[bottomLeftTopRightIdx[_i]] !== null && this.state.squares[bottomLeftTopRightIdx[_i]] === this.state.squares[bottomLeftTopRightIdx[_i + 1]]) {\n          howManyConsecutiveCounter++;\n        } else {\n          // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n          howManyConsecutiveCounter = 1;\n        }\n      } // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the this.state.selectedSquareIdx\n      // get bottom right squares as indices\n\n\n      var bottomRightTopLeftIdx = [];\n      i = 1;\n\n      while (this.state.selectedSquareIdx - 7 * i >= 0) {\n        if (!leftColumnIdx.has(this.state.selectedSquareIdx - 7 * i + i)) {\n          bottomRightTopLeftIdx.unshift(this.state.selectedSquareIdx - 7 * i + i);\n          i++;\n        } else {\n          break;\n        }\n      } // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n\n\n      bottomRightTopLeftIdx.push(this.state.selectedSquareIdx); // get the top left squares as indices\n\n      i = 1;\n\n      while (this.state.selectedSquareIdx + 7 * i < 42) {\n        if (!rightColumnIdx.has(this.state.selectedSquareIdx + 7 * i - i)) {\n          bottomRightTopLeftIdx.push(this.state.selectedSquareIdx + 7 * i - i);\n          i++;\n        } else {\n          break;\n        }\n      } // check to see if there is a 4-in-a-row from bottom right to top left\n\n\n      howManyConsecutiveCounter = 1;\n\n      for (var _i2 = 0; _i2 < bottomRightTopLeftIdx.length; _i2++) {\n        if (howManyConsecutiveCounter === 4) {\n          return this.state.squares[bottomRightTopLeftIdx[_i2]]; // winner has been found, return the winner\n        } else if (this.state.squares[bottomRightTopLeftIdx[_i2]] !== null && this.state.squares[bottomRightTopLeftIdx[_i2]] === this.state.squares[bottomRightTopLeftIdx[_i2 + 1]]) {\n          howManyConsecutiveCounter++;\n        } else {\n          // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n          howManyConsecutiveCounter = 1;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isGameOver = !this.state.squares.includes(null); // calculate the winner\n\n      var winner = this.calculateWinner(); // let the AI make a move if it's the AI's turn and the game isn't over\n\n      if (winner === null && !this.state.isHumanTurn && !isGameOver) {\n        var aiSelectedIdx = minimax(this.state.squares.slice(), 0, AI, HUMAN); // let max = 6;\n        // let min = 0;\n        // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n        // let aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n        // while (aiSelectedIdx === -1) {\n        //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n        //     aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n        // }\n\n        var squares = this.state.squares.slice();\n        squares[aiSelectedIdx] = AI;\n        this.setState(function (prevState) {\n          return {\n            squares: squares,\n            isHumanTurn: !prevState.isHumanTurn,\n            selectedSquareIdx: aiSelectedIdx\n          };\n        });\n      } // setup the display\n\n\n      var horizontalRule = /*#__PURE__*/_jsxDEV(\"hr\", {\n        style: {\n          visibility: \"hidden\",\n          marginBottom: \"0\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 32\n      }, this);\n\n      var button = /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          outline: \"none\",\n          userSelect: \"none\"\n        },\n        onClick: this.handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 24\n      }, this);\n\n      var display = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"d-flex justify-content-center\",\n          children: \"Good luck!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\"\n          },\n          children: [button, horizontalRule]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(Board, {\n            squares: this.state.squares,\n            onClick: this.handleClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 76\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true);\n\n      if (winner !== null) {\n        // Someone has won the game. Display winner, and disable the board.\n        display = /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [winner === HUMAN ? /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"d-flex justify-content-center\",\n            children: \"\\uD83C\\uDF89 Congratulations! You won! \\uD83C\\uDF89\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 49\n          }, this) : /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"d-flex justify-content-center\",\n            children: \"The AI won! Try again!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 134\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: \"center\"\n            },\n            children: [button, horizontalRule]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-center\",\n            children: /*#__PURE__*/_jsxDEV(Board, {\n              squares: this.state.squares,\n              onClick: function onClick() {\n                return;\n                /* this does nothing... Disables onClick */\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 76\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true);\n      } else if (winner === null && isGameOver) {\n        // It's a tie. The game is over. Disable the board.\n        display = /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"d-flex justify-content-center\",\n            children: \"It's a draw! Try again!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: \"center\"\n            },\n            children: [button, horizontalRule]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-center\",\n            children: /*#__PURE__*/_jsxDEV(Board, {\n              squares: this.state.squares,\n              onClick: function onClick() {\n                return;\n                /* this does nothing... Disables onClick */\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 76\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"d-flex justify-content-center\",\n          children: \"Welcome to Connect 4!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 17\n        }, this), display]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return Connect4Game;\n}(React.Component);\n\n;\nexport default Connect4Game;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js"],"names":["Board","React","Component","minimax","HUMAN","AI","TOTALNUMOFROWS","TOTALNUMOFCOLS","TOTALNUMOFSQUARES","Connect4Game","props","state","squares","Array","fill","isHumanTurn","mostRecentSelectionRowIdx","mostRecentSelectionColIdx","handleClick","bind","findLegalRowIdxWithinColumn","calculateWinner","handleReset","selectedColIdx","slice","legalRowPositionToFillIdx","setState","prevState","didNotFindLegalRowIdxWithinColumnIdx","rowIdx","length","frontOfCurrRowIdx","selectedSquareIdx","currRowIdx","howManyConsecutiveCounter","currColIdx","outOfBoundsIdx","rightColumnIdx","Set","leftColumnIdx","bottomLeftTopRightIdx","i","has","unshift","push","bottomRightTopLeftIdx","isGameOver","includes","winner","aiSelectedIdx","horizontalRule","visibility","marginBottom","button","outline","userSelect","display","textAlign"],"mappings":"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","sourcesContent":["import Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax';\n\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFCOLS = 7;\nconst TOTALNUMOFSQUARES = TOTALNUMOFROWS * TOTALNUMOFCOLS;\n\n\nclass Connect4Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(TOTALNUMOFROWS).fill(Array(TOTALNUMOFCOLS).fill(null)), // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n            isHumanTurn: true,\n            mostRecentSelectionRowIdx : null,\n            mostRecentSelectionColIdx: null\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.findLegalRowIdxWithinColumn = this.findLegalRowIdxWithinColumn.bind(this);\n        this.calculateWinner = this.calculateWinner.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n    }\n\n    handleClick(selectedColIdx) {\n        const squares = this.state.squares.slice();\n        const legalRowPositionToFillIdx = this.findLegalRowIdxWithinColumn(selectedColIdx);\n        if (legalRowPositionToFillIdx !== -1) {\n            squares[legalRowPositionToFillIdx, selectedColIdx] = this.state.isHumanTurn ? HUMAN : AI;\n            this.setState(prevState => ({\n                squares: squares,\n                isHumanTurn: !prevState.isHumanTurn,\n                mostRecentSelectionRowIdx: legalRowPositionToFillIdx,\n                mostRecentSelectionColIdx: selectedColIdx\n            }));\n        }\n    }\n\n    handleReset() {\n        this.setState({\n            squares: Array(TOTALNUMOFROWS).fill(Array(TOTALNUMOFCOLS).fill(null)), // either HUMAN or AI or null\n            isHumanTurn: true\n        });\n    }\n\n    findLegalRowIdxWithinColumn(selectedColIdx) {\n        /**\n         * Returns the row index of a legal square that can be filled.\n         * Note the legal square will be within the same column as selectedColIdx.\n         * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n         */\n        const didNotFindLegalRowIdxWithinColumnIdx = -1;\n        for (let rowIdx = 0; rowIdx < this.state.squares.length; rowIdx++) {\n            if (this.state.squares[rowIdx][selectedColIdx] === null) {\n                return rowIdx;\n            }\n        }\n        return didNotFindLegalRowIdxWithinColumnIdx;\n    }\n\n    calculateWinner() {\n        /**\n         * Returns the name of the winner HUMAN or AI. Else returns null.\n         */\n\n        // Check horizontal\n        const frontOfCurrRowIdx = this.state.selectedSquareIdx - (this.state.selectedSquareIdx % 7);\n        let currRowIdx = frontOfCurrRowIdx;\n        let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n        for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[currRowIdx]; // winner has been found, return the winner\n            } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && this.state.squares[currRowIdx] !== null && this.state.squares[currRowIdx] === this.state.squares[currRowIdx + 1]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        // Check vertical\n        let currColIdx = this.state.selectedSquareIdx % 7;\n        const outOfBoundsIdx = 42;\n        howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n        for (currColIdx; currColIdx < outOfBoundsIdx ; currColIdx += 7) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[currColIdx]; // winner has been found, return the winner\n            } else if (currColIdx + 7 < outOfBoundsIdx && this.state.squares[currColIdx] !== null && this.state.squares[currColIdx] === this.state.squares[currColIdx + 7]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        // Check Diagonal\n\n        // start with BOTTOM-LEFT TO TOP-RIGHT relative to the this.state.selectedSquareIdx\n        // get bottom left squares as indices\n        const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n        const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n        const bottomLeftTopRightIdx = [];\n        let i = 1;\n        while (this.state.selectedSquareIdx - 7 * i >= 0) {\n            if (this.state.selectedSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(this.state.selectedSquareIdx - 7 * i - i)) {\n                bottomLeftTopRightIdx.unshift(this.state.selectedSquareIdx - 7 * i - i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n        bottomLeftTopRightIdx.push(this.state.selectedSquareIdx);\n\n        // get the top right squares as indices\n        i = 1;\n        while (this.state.selectedSquareIdx + 7 * i < 42) {\n            if (this.state.selectedSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(this.state.selectedSquareIdx + 7 * i + i)) {\n                bottomLeftTopRightIdx.push(this.state.selectedSquareIdx + 7 * i + i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // check to see if there is a 4-in-a-row from bottom left to top right\n        howManyConsecutiveCounter = 1;\n        for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n            } else if (this.state.squares[bottomLeftTopRightIdx[i]] !== null && this.state.squares[bottomLeftTopRightIdx[i]] === this.state.squares[bottomLeftTopRightIdx[i + 1]]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the this.state.selectedSquareIdx\n        // get bottom right squares as indices\n        const bottomRightTopLeftIdx = [];\n        i = 1;\n        while (this.state.selectedSquareIdx - 7 * i >= 0) {\n            if (!leftColumnIdx.has(this.state.selectedSquareIdx - 7 * i + i)) {\n                bottomRightTopLeftIdx.unshift(this.state.selectedSquareIdx - 7 * i + i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n        bottomRightTopLeftIdx.push(this.state.selectedSquareIdx);\n\n        // get the top left squares as indices\n        i = 1;\n        while (this.state.selectedSquareIdx + 7 * i < 42) {\n            if (!rightColumnIdx.has(this.state.selectedSquareIdx + 7 * i - i)) {\n                bottomRightTopLeftIdx.push(this.state.selectedSquareIdx + 7 * i - i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // check to see if there is a 4-in-a-row from bottom right to top left\n        howManyConsecutiveCounter = 1;\n        for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n            } else if (this.state.squares[bottomRightTopLeftIdx[i]] !== null && this.state.squares[bottomRightTopLeftIdx[i]] === this.state.squares[bottomRightTopLeftIdx[i + 1]]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        return null;\n    }\n\n    render() {\n\n        const isGameOver = !this.state.squares.includes(null);\n        \n        // calculate the winner\n        const winner = this.calculateWinner();\n\n        // let the AI make a move if it's the AI's turn and the game isn't over\n        if (winner === null && !this.state.isHumanTurn && !isGameOver) {\n            let aiSelectedIdx = minimax(this.state.squares.slice(), 0, AI, HUMAN);\n            // let max = 6;\n            // let min = 0;\n            // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n            // let aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n            // while (aiSelectedIdx === -1) {\n            //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n            //     aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n            // }\n            const squares = this.state.squares.slice();\n            squares[aiSelectedIdx] = AI;\n            this.setState(prevState => ({\n                squares : squares,\n                isHumanTurn: !prevState.isHumanTurn,\n                selectedSquareIdx: aiSelectedIdx\n            }));\n        }\n\n        // setup the display\n\n        const horizontalRule = <hr style={{visibility: \"hidden\", marginBottom: \"0\"}} />;\n        const button = <button style={{outline: \"none\", userSelect: \"none\"}} onClick={this.handleReset}>Reset</button>;\n\n        let display =   <>\n                            <h5 className=\"d-flex justify-content-center\" >Good luck!</h5>\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={this.handleClick} /></div>\n                        </>;\n\n        if (winner !== null) { // Someone has won the game. Display winner, and disable the board.\n            display =   <>\n                            {winner === HUMAN ? <h5 className=\"d-flex justify-content-center\">🎉 Congratulations! You won! 🎉</h5> : <h5 className=\"d-flex justify-content-center\">The AI won! Try again!</h5>}\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={() => {return; /* this does nothing... Disables onClick */}} /></div>\n                        </>;\n        } else if (winner === null && isGameOver) { // It's a tie. The game is over. Disable the board.\n            display =   <>\n                            <h5 className=\"d-flex justify-content-center\" >It's a draw! Try again!</h5>\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={() => {return; /* this does nothing... Disables onClick */}} /></div>\n                        </>;\n        }\n\n        return (\n            <div className=\"container\">\n                <h2 className=\"d-flex justify-content-center\">Welcome to Connect 4!</h2>\n                {display}\n            </div>\n        );\n    };\n};\n\nexport default Connect4Game;"]},"metadata":{},"sourceType":"module"}