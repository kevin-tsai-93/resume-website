{"ast":null,"code":"function findLegalSquare(board, idx) {\n  /**\n   * Returns the index of a legal square that can be filled.\n   * Note the legal square will be within the same column as idx.\n   * If all the squares within idx's column are filled, then this function returns -1.\n   */\n  const didNotFindLegalSquareIdx = -1;\n  let traversingIdx = idx;\n\n  while (traversingIdx - 7 >= 0) {\n    traversingIdx -= 7;\n  }\n\n  for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n    if (board[traversingIdx] === null) {\n      return traversingIdx;\n    }\n  }\n\n  return didNotFindLegalSquareIdx;\n}\n\nfunction calculateScoreForWindow(windowArr, player, opposingPlayer) {\n  /**\n   * Returns the score for a given arr, assuming the window is 4\n   */\n  let score = 0;\n\n  if (windowArr.filter(val => val === player).length === 4) {\n    score += 100;\n  } else if (windowArr.filter(val => val === player).length === 3 && windowArr.filter(val => val === null).length === 1) {\n    score += 5;\n  } else if (windowArr.filter(val => val === player).length === 2 && windowArr.filter(val => val === null).length === 2) {\n    score += 2;\n  }\n\n  if (windowArr.filter(val => val === opposingPlayer).length === 3 && windowArr.filter(val => val === null).length === 1) {\n    score -= 15;\n  }\n\n  return score;\n}\n\nfunction calculateScoreForMove(board, idx, player, opposingPlayer) {\n  /**\n   * Returns the score for placing player's piece onto the board whose location is idx.\n   */\n  let score = 0;\n  const WINDOWLENGTH = 4;\n  const TOTALPIECES = 42;\n  const newBoard = board.slice();\n  newBoard[idx] = player; // score for center piece (preference center location)\n\n  for (let i = 3; i < TOTALPIECES; i += 7) {\n    if (newBoard[i] === player) {\n      score += 2;\n    }\n  } // Score for horizontal\n\n\n  for (let currRowIdx = 0; currRowIdx < TOTALPIECES; currRowIdx += 7) {\n    for (let i = 0; i < WINDOWLENGTH; i++) {\n      const windowArr = newBoard.slice(currRowIdx + i, currRowIdx + i + WINDOWLENGTH);\n      score += calculateScoreForWindow(windowArr, player, opposingPlayer);\n    }\n  } // Score for vertical\n\n\n  for (let currColIdx = 0; currColIdx < 7; currColIdx++) {\n    const verticalArr = [];\n\n    for (let i = 0; i < TOTALPIECES; i += 7) {\n      verticalArr.push(newBoard[currColIdx + i]);\n    }\n\n    for (let i = 0; i < WINDOWLENGTH; i++) {\n      const windowArr = verticalArr.slice(currColIdx, currColIdx + WINDOWLENGTH);\n      score += calculateScoreForWindow(windowArr, player, opposingPlayer);\n    }\n  } // // Score for diagonal\n  // // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n  // // get bottom left squares as indices\n  // const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n  // const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n  // const bottomLeftTopRightIdx = [];\n  // let i = 1;\n  // while (lastSquareIdx - 7 * i >= 0) {\n  //     if (lastSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - 7 * i - i)) {\n  //         bottomLeftTopRightIdx.unshift(lastSquareIdx - 7 * i - i);\n  //         i++;\n  //     } else {\n  //         break;\n  //     }\n  // }\n  // // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n  // bottomLeftTopRightIdx.push(lastSquareIdx);\n  // // get the top right squares as indices\n  // i = 1;\n  // while (lastSquareIdx + 7 * i < 42) {\n  //     if (lastSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(lastSquareIdx + 7 * i + i)) {\n  //         bottomLeftTopRightIdx.push(lastSquareIdx + 7 * i + i);\n  //         i++;\n  //     } else {\n  //         break;\n  //     }\n  // }\n\n\n  return score;\n}\n\nfunction calculateWinner(board, lastSquareIdx) {\n  /**\n   * Returns the name of the winner HUMAN or AI. Else returns null.\n   */\n  // Check horizontal\n  const frontOfcurrRowIdxIdx = lastSquareIdx - lastSquareIdx % 7;\n  let currRowIdxIdx = frontOfcurrRowIdxIdx;\n  let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n  for (currRowIdxIdx; currRowIdxIdx < frontOfcurrRowIdxIdx + 7; currRowIdxIdx++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[currRowIdxIdx]; // winner has been found, return the winner\n    } else if (currRowIdxIdx + 1 < frontOfcurrRowIdxIdx + 7 && board[currRowIdxIdx] !== null && board[currRowIdxIdx] === board[currRowIdxIdx + 1]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // Check vertical\n\n\n  let currColIdx = lastSquareIdx % 7;\n  const outOfBoundsIdx = 42;\n  howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n  for (currColIdx; currColIdx < outOfBoundsIdx; currColIdx += 7) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[currColIdx]; // winner has been found, return the winner\n    } else if (currColIdx + 7 < outOfBoundsIdx && board[currColIdx] !== null && board[currColIdx] === board[currColIdx + 7]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // Check Diagonal\n  // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n  // get bottom left squares as indices\n\n\n  const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n  const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n  const bottomLeftTopRightIdx = [];\n  let i = 1;\n\n  while (lastSquareIdx - 7 * i >= 0) {\n    if (lastSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - 7 * i - i)) {\n      bottomLeftTopRightIdx.unshift(lastSquareIdx - 7 * i - i);\n      i++;\n    } else {\n      break;\n    }\n  } // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n\n\n  bottomLeftTopRightIdx.push(lastSquareIdx); // get the top right squares as indices\n\n  i = 1;\n\n  while (lastSquareIdx + 7 * i < 42) {\n    if (lastSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(lastSquareIdx + 7 * i + i)) {\n      bottomLeftTopRightIdx.push(lastSquareIdx + 7 * i + i);\n      i++;\n    } else {\n      break;\n    }\n  } // check to see if there is a 4-in-a-row from bottom left to top right\n\n\n  howManyConsecutiveCounter = 1;\n\n  for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n    } else if (board[bottomLeftTopRightIdx[i]] !== null && board[bottomLeftTopRightIdx[i]] === board[bottomLeftTopRightIdx[i + 1]]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the lastSquareIdx\n  // get bottom right squares as indices\n\n\n  const bottomRightTopLeftIdx = [];\n  i = 1;\n\n  while (lastSquareIdx - 7 * i >= 0) {\n    if (!leftColumnIdx.has(lastSquareIdx - 7 * i + i)) {\n      bottomRightTopLeftIdx.unshift(lastSquareIdx - 7 * i + i);\n      i++;\n    } else {\n      break;\n    }\n  } // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n\n\n  bottomRightTopLeftIdx.push(lastSquareIdx); // get the top left squares as indices\n\n  i = 1;\n\n  while (lastSquareIdx + 7 * i < 42) {\n    if (!rightColumnIdx.has(lastSquareIdx + 7 * i - i)) {\n      bottomRightTopLeftIdx.push(lastSquareIdx + 7 * i - i);\n      i++;\n    } else {\n      break;\n    }\n  } // check to see if there is a 4-in-a-row from bottom right to top left\n\n\n  howManyConsecutiveCounter = 1;\n\n  for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n    } else if (board[bottomRightTopLeftIdx[i]] !== null && board[bottomRightTopLeftIdx[i]] === board[bottomRightTopLeftIdx[i + 1]]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  }\n\n  return null;\n}\n\nfunction idxOfMaxOfArr(arr) {\n  let max = arr[0];\n  let maxIdx = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIdx = i;\n    }\n  }\n\n  return maxIdx;\n}\n\nfunction minimax(board, depth, maximizingPlayer, minimizingPlayer) {\n  /**\n   * minimax algorithm to determine how the ai will make its move\n   * refer to the pseudocode on wikipedia\n   */\n  // get all the possible moves that the player can drop into\n  // this should be an array with the indices\n  const possibleMovesArr = [0, 1, 2, 3, 4, 5, 6].map(idx => findLegalSquare(board, idx)).filter(idx => idx !== -1);\n  const scoresForPossibleMovesArr = possibleMovesArr.map(idx => calculateScoreForMove(board, idx, maximizingPlayer, minimizingPlayer));\n  alert(scoresForPossibleMovesArr);\n  return possibleMovesArr[idxOfMaxOfArr(scoresForPossibleMovesArr)];\n}\n\nexport default minimax;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/connect4/minimax.js"],"names":["findLegalSquare","board","idx","didNotFindLegalSquareIdx","traversingIdx","calculateScoreForWindow","windowArr","player","opposingPlayer","score","filter","val","length","calculateScoreForMove","WINDOWLENGTH","TOTALPIECES","newBoard","slice","i","currRowIdx","currColIdx","verticalArr","push","calculateWinner","lastSquareIdx","frontOfcurrRowIdxIdx","currRowIdxIdx","howManyConsecutiveCounter","outOfBoundsIdx","rightColumnIdx","Set","leftColumnIdx","bottomLeftTopRightIdx","has","unshift","bottomRightTopLeftIdx","idxOfMaxOfArr","arr","max","maxIdx","minimax","depth","maximizingPlayer","minimizingPlayer","possibleMovesArr","map","scoresForPossibleMovesArr","alert"],"mappings":"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","sourcesContent":["function findLegalSquare(board, idx) {\n    /**\n     * Returns the index of a legal square that can be filled.\n     * Note the legal square will be within the same column as idx.\n     * If all the squares within idx's column are filled, then this function returns -1.\n     */\n    const didNotFindLegalSquareIdx = -1;\n    let traversingIdx = idx;\n    while (traversingIdx - 7 >= 0) {\n        traversingIdx -= 7;\n    }\n    for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n        if (board[traversingIdx] === null) {\n            return traversingIdx;\n        }\n    }\n    return didNotFindLegalSquareIdx;\n}\n\nfunction calculateScoreForWindow(windowArr, player, opposingPlayer) {\n    /**\n     * Returns the score for a given arr, assuming the window is 4\n     */\n\n    let score = 0;\n\n    if (windowArr.filter(val => val === player).length === 4) {\n        score += 100;\n    } else if (windowArr.filter(val => val === player).length === 3 && windowArr.filter(val => val === null).length === 1) {\n        score += 5;\n    } else if (windowArr.filter(val => val === player).length === 2 && windowArr.filter(val => val === null).length === 2) {\n        score += 2;\n    }\n\n    if (windowArr.filter(val => val === opposingPlayer).length === 3 && windowArr.filter(val => val === null).length === 1) {\n        score -= 15;\n    }\n\n    return score;\n}\n\nfunction calculateScoreForMove(board, idx, player, opposingPlayer) {\n    /**\n     * Returns the score for placing player's piece onto the board whose location is idx.\n     */\n\n    let score = 0;\n    const WINDOWLENGTH = 4;\n    const TOTALPIECES = 42;\n    const newBoard = board.slice();\n    newBoard[idx] = player;\n\n    // score for center piece (preference center location)\n    for (let i = 3; i < TOTALPIECES; i += 7) {\n        if (newBoard[i] === player) {\n            score += 2;\n        }\n    }\n\n\n    // Score for horizontal\n    for (let currRowIdx = 0; currRowIdx < TOTALPIECES; currRowIdx += 7) {\n        for (let i = 0; i < WINDOWLENGTH; i++) {\n            const windowArr = newBoard.slice(currRowIdx + i, currRowIdx + i + WINDOWLENGTH);\n            score += calculateScoreForWindow(windowArr, player, opposingPlayer);\n        }\n\n    }\n\n    // Score for vertical\n\n    for (let currColIdx = 0; currColIdx < 7; currColIdx++) {\n        const verticalArr = []\n        for (let i = 0; i < TOTALPIECES; i += 7) {\n            verticalArr.push(newBoard[currColIdx + i]);\n        }\n        for (let i = 0; i < WINDOWLENGTH; i++) {\n            const windowArr = verticalArr.slice(currColIdx, currColIdx + WINDOWLENGTH);\n            score += calculateScoreForWindow(windowArr, player, opposingPlayer);\n        }\n\n    }\n\n    // // Score for diagonal\n\n    // // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n    // // get bottom left squares as indices\n    // const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n    // const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n    // const bottomLeftTopRightIdx = [];\n    // let i = 1;\n    // while (lastSquareIdx - 7 * i >= 0) {\n    //     if (lastSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - 7 * i - i)) {\n    //         bottomLeftTopRightIdx.unshift(lastSquareIdx - 7 * i - i);\n    //         i++;\n    //     } else {\n    //         break;\n    //     }\n    // }\n\n    // // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n    // bottomLeftTopRightIdx.push(lastSquareIdx);\n\n    // // get the top right squares as indices\n    // i = 1;\n    // while (lastSquareIdx + 7 * i < 42) {\n    //     if (lastSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(lastSquareIdx + 7 * i + i)) {\n    //         bottomLeftTopRightIdx.push(lastSquareIdx + 7 * i + i);\n    //         i++;\n    //     } else {\n    //         break;\n    //     }\n    // }\n\n\n    return score;\n}\n\nfunction calculateWinner(board, lastSquareIdx) {\n    /**\n     * Returns the name of the winner HUMAN or AI. Else returns null.\n     */\n\n    // Check horizontal\n    const frontOfcurrRowIdxIdx = lastSquareIdx - (lastSquareIdx % 7);\n    let currRowIdxIdx = frontOfcurrRowIdxIdx;\n    let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n    for (currRowIdxIdx; currRowIdxIdx < frontOfcurrRowIdxIdx + 7; currRowIdxIdx++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[currRowIdxIdx]; // winner has been found, return the winner\n        } else if (currRowIdxIdx + 1 < frontOfcurrRowIdxIdx + 7 && board[currRowIdxIdx] !== null && board[currRowIdxIdx] === board[currRowIdxIdx + 1]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // Check vertical\n    let currColIdx = lastSquareIdx % 7;\n    const outOfBoundsIdx = 42;\n    howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n    for (currColIdx; currColIdx < outOfBoundsIdx ; currColIdx += 7) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[currColIdx]; // winner has been found, return the winner\n        } else if (currColIdx + 7 < outOfBoundsIdx && board[currColIdx] !== null && board[currColIdx] === board[currColIdx + 7]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // Check Diagonal\n\n    // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n    // get bottom left squares as indices\n    const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n    const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n    const bottomLeftTopRightIdx = [];\n    let i = 1;\n    while (lastSquareIdx - 7 * i >= 0) {\n        if (lastSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - 7 * i - i)) {\n            bottomLeftTopRightIdx.unshift(lastSquareIdx - 7 * i - i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n    bottomLeftTopRightIdx.push(lastSquareIdx);\n\n    // get the top right squares as indices\n    i = 1;\n    while (lastSquareIdx + 7 * i < 42) {\n        if (lastSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(lastSquareIdx + 7 * i + i)) {\n            bottomLeftTopRightIdx.push(lastSquareIdx + 7 * i + i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // check to see if there is a 4-in-a-row from bottom left to top right\n    howManyConsecutiveCounter = 1;\n    for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n        } else if (board[bottomLeftTopRightIdx[i]] !== null && board[bottomLeftTopRightIdx[i]] === board[bottomLeftTopRightIdx[i + 1]]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the lastSquareIdx\n    // get bottom right squares as indices\n    const bottomRightTopLeftIdx = [];\n    i = 1;\n    while (lastSquareIdx - 7 * i >= 0) {\n        if (!leftColumnIdx.has(lastSquareIdx - 7 * i + i)) {\n            bottomRightTopLeftIdx.unshift(lastSquareIdx - 7 * i + i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n    bottomRightTopLeftIdx.push(lastSquareIdx);\n\n    // get the top left squares as indices\n    i = 1;\n    while (lastSquareIdx + 7 * i < 42) {\n        if (!rightColumnIdx.has(lastSquareIdx + 7 * i - i)) {\n            bottomRightTopLeftIdx.push(lastSquareIdx + 7 * i - i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // check to see if there is a 4-in-a-row from bottom right to top left\n    howManyConsecutiveCounter = 1;\n    for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n        } else if (board[bottomRightTopLeftIdx[i]] !== null && board[bottomRightTopLeftIdx[i]] === board[bottomRightTopLeftIdx[i + 1]]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    return null;\n}\n\nfunction idxOfMaxOfArr(arr) {\n    let max = arr[0];\n    let maxIdx = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i]\n            maxIdx = i;\n        }\n    }\n    return maxIdx;\n}\n\nfunction minimax(board, depth, maximizingPlayer, minimizingPlayer) {\n    /**\n     * minimax algorithm to determine how the ai will make its move\n     * refer to the pseudocode on wikipedia\n     */\n\n    // get all the possible moves that the player can drop into\n    // this should be an array with the indices\n    const possibleMovesArr = [0,1,2,3,4,5,6].map(idx => findLegalSquare(board, idx)).filter(idx => idx !== -1);\n    const scoresForPossibleMovesArr = possibleMovesArr.map(idx => calculateScoreForMove(board, idx, maximizingPlayer, minimizingPlayer));\n    alert(scoresForPossibleMovesArr);\n    return possibleMovesArr[idxOfMaxOfArr(scoresForPossibleMovesArr)];\n}\n\nexport default minimax;"]},"metadata":{},"sourceType":"module"}