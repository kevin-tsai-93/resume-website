{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax'; // Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nvar HUMAN = \"you\";\nvar AI = \"ai\";\n\nvar Connect4Game = /*#__PURE__*/function (_React$Component) {\n  _inherits(Connect4Game, _React$Component);\n\n  var _super = _createSuper(Connect4Game);\n\n  function Connect4Game(props) {\n    var _this;\n\n    _classCallCheck(this, Connect4Game);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      squares: Array(42).fill(null),\n      // either HUMAN or AI or null\n      isHumanTurn: true,\n      selectedSquareIdx: null\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.findLegalSquare = _this.findLegalSquare.bind(_assertThisInitialized(_this));\n    _this.calculateWinner = _this.calculateWinner.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Connect4Game, [{\n    key: \"handleClick\",\n    value: function handleClick(currentSquareIdx) {\n      var squares = this.state.squares.slice();\n      var legalSquareToFillIdx = this.findLegalSquare(currentSquareIdx);\n\n      if (legalSquareToFillIdx !== -1) {\n        squares[legalSquareToFillIdx] = this.state.isHumanTurn ? HUMAN : AI;\n        this.setState(function (prevState) {\n          return {\n            squares: squares,\n            isHumanTurn: !prevState.isHumanTurn,\n            selectedSquareIdx: legalSquareToFillIdx\n          };\n        });\n      }\n    }\n  }, {\n    key: \"findLegalSquare\",\n    value: function findLegalSquare(idx) {\n      /**\n       * Returns the index of a legal square that can be filled. Otherwise, -1.\n       */\n      var didNotFindLegalSquareIdx = -1;\n      var traversingIdx = idx;\n\n      while (traversingIdx - 7 >= 0) {\n        traversingIdx -= 7;\n      }\n\n      for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n        if (this.state.squares[traversingIdx] === null) {\n          return traversingIdx;\n        }\n      }\n\n      return didNotFindLegalSquareIdx;\n    }\n  }, {\n    key: \"calculateWinner\",\n    value: function calculateWinner() {\n      /**\n       * Returns the name of the winner HUMAN or AI. Else returns null.\n       */\n      // Check horizontal\n      var frontOfCurrRowIdx = this.state.selectedSquareIdx - this.state.selectedSquareIdx % 7;\n      var currRowIdx = frontOfCurrRowIdx;\n      var howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n      for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n        if (howManyConsecutiveCounter === 4) {\n          return this.state.squares[currRowIdx]; // winner has been found, return the winner\n        } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && this.state.squares[currRowIdx] !== null && this.state.squares[currRowIdx] === this.state.squares[currRowIdx + 1]) {\n          howManyConsecutiveCounter++;\n        } else {\n          // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n          howManyConsecutiveCounter = 1;\n        }\n      } // Check vertical\n\n\n      var currColIdx = this.state.selectedSquareIdx % 7;\n      var outOfBoundsIdx = 42;\n      howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n      for (currColIdx; currColIdx < outOfBoundsIdx; currColIdx += 7) {\n        if (howManyConsecutiveCounter === 4) {\n          return this.state.squares[currColIdx]; // winner has been found, return the winner\n        } else if (currColIdx + 7 < outOfBoundsIdx && this.state.squares[currColIdx] !== null && this.state.squares[currColIdx] === this.state.squares[currColIdx + 7]) {\n          howManyConsecutiveCounter++;\n        } else {\n          // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n          howManyConsecutiveCounter = 1;\n        }\n      } // Check Diagonal\n      // start with BOTTOM-LEFT TO TOP-RIGHT relative to the this.state.selectedSquareIdx\n      // get bottom left squares as indices\n\n\n      var rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n      var leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n      var bottomLeftTopRightIdx = [];\n      var i = 1;\n\n      while (this.state.selectedSquareIdx - 7 * i >= 0) {\n        if (this.state.selectedSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(this.state.selectedSquareIdx - 7 * i - i)) {\n          bottomLeftTopRightIdx.unshift(this.state.selectedSquareIdx - 7 * i - i);\n          i++;\n        } else {\n          break;\n        }\n      } // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n\n\n      bottomLeftTopRightIdx.push(this.state.selectedSquareIdx); // get the top right squares as indices\n\n      i = 1;\n\n      while (this.state.selectedSquareIdx + 7 * i < 42) {\n        if (this.state.selectedSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(this.state.selectedSquareIdx + 7 * i + i)) {\n          bottomLeftTopRightIdx.push(this.state.selectedSquareIdx + 7 * i + i);\n          i++;\n        } else {\n          break;\n        }\n      } // check to see if there is a 4-in-a-row from bottom left to top right\n\n\n      howManyConsecutiveCounter = 1;\n\n      for (var _i = 0; _i < bottomLeftTopRightIdx.length; _i++) {\n        if (howManyConsecutiveCounter === 4) {\n          return this.state.squares[bottomLeftTopRightIdx[_i]]; // winner has been found, return the winner\n        } else if (this.state.squares[bottomLeftTopRightIdx[_i]] !== null && this.state.squares[bottomLeftTopRightIdx[_i]] === this.state.squares[bottomLeftTopRightIdx[_i + 1]]) {\n          howManyConsecutiveCounter++;\n        } else {\n          // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n          howManyConsecutiveCounter = 1;\n        }\n      } // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the this.state.selectedSquareIdx\n      // get bottom right squares as indices\n\n\n      var bottomRightTopLeftIdx = [];\n      i = 1;\n\n      while (this.state.selectedSquareIdx - 7 * i >= 0) {\n        if (!leftColumnIdx.has(this.state.selectedSquareIdx - 7 * i + i)) {\n          bottomRightTopLeftIdx.unshift(this.state.selectedSquareIdx - 7 * i + i);\n          i++;\n        } else {\n          break;\n        }\n      } // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n\n\n      bottomRightTopLeftIdx.push(this.state.selectedSquareIdx); // get the top left squares as indices\n\n      i = 1;\n\n      while (this.state.selectedSquareIdx + 7 * i < 42) {\n        if (!rightColumnIdx.has(this.state.selectedSquareIdx + 7 * i - i)) {\n          bottomRightTopLeftIdx.push(this.state.selectedSquareIdx + 7 * i - i);\n          i++;\n        } else {\n          break;\n        }\n      } // check to see if there is a 4-in-a-row from bottom right to top left\n\n\n      howManyConsecutiveCounter = 1;\n\n      for (var _i2 = 0; _i2 < bottomRightTopLeftIdx.length; _i2++) {\n        if (howManyConsecutiveCounter === 4) {\n          return this.state.squares[bottomRightTopLeftIdx[_i2]]; // winner has been found, return the winner\n        } else if (this.state.squares[bottomRightTopLeftIdx[_i2]] !== null && this.state.squares[bottomRightTopLeftIdx[_i2]] === this.state.squares[bottomRightTopLeftIdx[_i2 + 1]]) {\n          howManyConsecutiveCounter++;\n        } else {\n          // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n          howManyConsecutiveCounter = 1;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var winner = this.calculateWinner(); // let the AI make a move if it's the AI's turn and the game isn't over\n\n      if (winner === null && !this.state.isHumanTurn && this.state.squares.includes(null)) {\n        var max = 6;\n        var min = 0;\n        var randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n        var aiSelectedIdx = this.findLegalSquare(randIdx);\n\n        while (aiSelectedIdx === -1) {\n          randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n          aiSelectedIdx = this.findLegalSquare(randIdx);\n        }\n\n        var squares = this.state.squares.slice();\n        squares[aiSelectedIdx] = AI;\n        this.setState(function (prevState) {\n          return {\n            squares: squares,\n            isHumanTurn: !prevState.isHumanTurn,\n            selectedSquareIdx: aiSelectedIdx\n          };\n        });\n      }\n\n      var display = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: this.state.squares,\n          onClick: this.handleClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 70\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 23\n      }, this);\n\n      if (winner !== null) {\n        display = /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [winner === HUMAN ? /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Congratulations! You are the winner!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 49\n          }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"The AI won! Try again!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 97\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-center\",\n            children: /*#__PURE__*/_jsxDEV(Board, {\n              squares: this.state.squares,\n              onClick: function onClick() {\n                return;\n                /* this does nothing... Disables onClick */\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 76\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"d-flex justify-content-center\",\n          children: \"This is the Connect 4 Project!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Can you beat the AI?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }, this), display]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return Connect4Game;\n}(React.Component);\n\n;\nexport default Connect4Game;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js"],"names":["Board","React","Component","minimax","HUMAN","AI","Connect4Game","props","state","squares","Array","fill","isHumanTurn","selectedSquareIdx","handleClick","bind","findLegalSquare","calculateWinner","currentSquareIdx","slice","legalSquareToFillIdx","setState","prevState","idx","didNotFindLegalSquareIdx","traversingIdx","frontOfCurrRowIdx","currRowIdx","howManyConsecutiveCounter","currColIdx","outOfBoundsIdx","rightColumnIdx","Set","leftColumnIdx","bottomLeftTopRightIdx","i","has","unshift","push","length","bottomRightTopLeftIdx","winner","includes","max","min","randIdx","Math","floor","random","aiSelectedIdx","display"],"mappings":"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","sourcesContent":["import Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax';\n\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\n\nclass Connect4Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(42).fill(null), // either HUMAN or AI or null\n            isHumanTurn: true,\n            selectedSquareIdx: null\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.findLegalSquare = this.findLegalSquare.bind(this);\n        this.calculateWinner = this.calculateWinner.bind(this);\n    }\n\n    handleClick(currentSquareIdx) {\n        const squares = this.state.squares.slice();\n        const legalSquareToFillIdx = this.findLegalSquare(currentSquareIdx);\n        if (legalSquareToFillIdx !== -1) {\n            squares[legalSquareToFillIdx] = this.state.isHumanTurn ? HUMAN : AI;\n            this.setState(prevState => ({\n                squares: squares,\n                isHumanTurn: !prevState.isHumanTurn,\n                selectedSquareIdx: legalSquareToFillIdx\n            }));\n        }\n    }\n\n    findLegalSquare(idx) {\n        /**\n         * Returns the index of a legal square that can be filled. Otherwise, -1.\n         */\n        const didNotFindLegalSquareIdx = -1;\n        let traversingIdx = idx;\n        while (traversingIdx - 7 >= 0) {\n            traversingIdx -= 7;\n        }\n        for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n            if (this.state.squares[traversingIdx] === null) {\n                return traversingIdx;\n            }\n        }\n        return didNotFindLegalSquareIdx;\n    }\n\n    calculateWinner() {\n        /**\n         * Returns the name of the winner HUMAN or AI. Else returns null.\n         */\n\n        // Check horizontal\n        const frontOfCurrRowIdx = this.state.selectedSquareIdx - (this.state.selectedSquareIdx % 7);\n        let currRowIdx = frontOfCurrRowIdx;\n        let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n        for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[currRowIdx]; // winner has been found, return the winner\n            } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && this.state.squares[currRowIdx] !== null && this.state.squares[currRowIdx] === this.state.squares[currRowIdx + 1]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        // Check vertical\n        let currColIdx = this.state.selectedSquareIdx % 7;\n        const outOfBoundsIdx = 42;\n        howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n        for (currColIdx; currColIdx < outOfBoundsIdx ; currColIdx += 7) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[currColIdx]; // winner has been found, return the winner\n            } else if (currColIdx + 7 < outOfBoundsIdx && this.state.squares[currColIdx] !== null && this.state.squares[currColIdx] === this.state.squares[currColIdx + 7]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        // Check Diagonal\n\n        // start with BOTTOM-LEFT TO TOP-RIGHT relative to the this.state.selectedSquareIdx\n        // get bottom left squares as indices\n        const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n        const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n        const bottomLeftTopRightIdx = [];\n        let i = 1;\n        while (this.state.selectedSquareIdx - 7 * i >= 0) {\n            if (this.state.selectedSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(this.state.selectedSquareIdx - 7 * i - i)) {\n                bottomLeftTopRightIdx.unshift(this.state.selectedSquareIdx - 7 * i - i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n        bottomLeftTopRightIdx.push(this.state.selectedSquareIdx);\n\n        // get the top right squares as indices\n        i = 1;\n        while (this.state.selectedSquareIdx + 7 * i < 42) {\n            if (this.state.selectedSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(this.state.selectedSquareIdx + 7 * i + i)) {\n                bottomLeftTopRightIdx.push(this.state.selectedSquareIdx + 7 * i + i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // check to see if there is a 4-in-a-row from bottom left to top right\n        howManyConsecutiveCounter = 1;\n        for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n            } else if (this.state.squares[bottomLeftTopRightIdx[i]] !== null && this.state.squares[bottomLeftTopRightIdx[i]] === this.state.squares[bottomLeftTopRightIdx[i + 1]]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the this.state.selectedSquareIdx\n        // get bottom right squares as indices\n        const bottomRightTopLeftIdx = [];\n        i = 1;\n        while (this.state.selectedSquareIdx - 7 * i >= 0) {\n            if (!leftColumnIdx.has(this.state.selectedSquareIdx - 7 * i + i)) {\n                bottomRightTopLeftIdx.unshift(this.state.selectedSquareIdx - 7 * i + i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n        bottomRightTopLeftIdx.push(this.state.selectedSquareIdx);\n\n        // get the top left squares as indices\n        i = 1;\n        while (this.state.selectedSquareIdx + 7 * i < 42) {\n            if (!rightColumnIdx.has(this.state.selectedSquareIdx + 7 * i - i)) {\n                bottomRightTopLeftIdx.push(this.state.selectedSquareIdx + 7 * i - i);\n                i++;\n            } else {\n                break;\n            }\n        }\n\n        // check to see if there is a 4-in-a-row from bottom right to top left\n        howManyConsecutiveCounter = 1;\n        for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n            if (howManyConsecutiveCounter === 4) {\n                return this.state.squares[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n            } else if (this.state.squares[bottomRightTopLeftIdx[i]] !== null && this.state.squares[bottomRightTopLeftIdx[i]] === this.state.squares[bottomRightTopLeftIdx[i + 1]]) {\n                howManyConsecutiveCounter++;\n            } else {\n                // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n                howManyConsecutiveCounter = 1;\n            }\n        }\n\n        return null;\n    }\n\n    render() {\n        const winner = this.calculateWinner();\n\n        // let the AI make a move if it's the AI's turn and the game isn't over\n        if (winner === null && !this.state.isHumanTurn && this.state.squares.includes(null)) {\n            let max = 6;\n            let min = 0;\n            let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n            let aiSelectedIdx = this.findLegalSquare(randIdx);\n            while (aiSelectedIdx === -1) {\n                randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n                aiSelectedIdx = this.findLegalSquare(randIdx);\n            }\n            const squares = this.state.squares.slice();\n            squares[aiSelectedIdx] = AI;\n            this.setState(prevState => ({\n                squares : squares,\n                isHumanTurn: !prevState.isHumanTurn,\n                selectedSquareIdx: aiSelectedIdx\n            }));\n        }\n\n        let display = <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={this.handleClick} /></div>;\n        if (winner !== null) {\n            display =   <>\n                            {winner === HUMAN ? <h4>Congratulations! You are the winner!</h4> : <h4>The AI won! Try again!</h4>}\n                            <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={() => {return; /* this does nothing... Disables onClick */}} /></div>\n                        </>;\n        }\n\n        return (\n            <div className=\"container\">\n                <h1 className=\"d-flex justify-content-center\">This is the Connect 4 Project!</h1>\n                \n                <p>Can you beat the AI?</p>\n                {display}\n            </div>\n        );\n    };\n};\n\nexport default Connect4Game;"]},"metadata":{},"sourceType":"module"}