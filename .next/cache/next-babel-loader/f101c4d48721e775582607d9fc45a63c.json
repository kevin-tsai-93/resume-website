{"ast":null,"code":"function findLegalSquare(board, idx) {\n  /**\n   * Returns the index of a legal square that can be filled.\n   * Note the legal square will be within the same column as idx.\n   * If all the squares within idx's column are filled, then this function returns -1.\n   */\n  const didNotFindLegalSquareIdx = -1;\n  let traversingIdx = idx;\n\n  while (traversingIdx - 7 >= 0) {\n    traversingIdx -= 7;\n  }\n\n  for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n    if (board[traversingIdx] === null) {\n      return traversingIdx;\n    }\n  }\n\n  return didNotFindLegalSquareIdx;\n}\n\nfunction calculateScoreForWindow(windowArr, player) {\n  /**\n   * Returns the score for a given arr, assuming the window is 4\n   */\n  let score = 0;\n\n  if (windowArr.filter(val => val === player).length === 4) {\n    score += 100;\n  } else if (windowArr.filter(val => val === player).length === 3 && windowArr.filter(val => val === null).length === 1) {\n    score += 5;\n  } else if (windowArr.filter(val => val === player).length === 2 && windowArr.filter(val => val === null).length === 2) {\n    score += 2;\n  }\n\n  return score;\n}\n\nfunction calculateScoreForMove(board, player, idx) {\n  /**\n   * Returns the score for placing player's piece onto the board whose location is idx.\n   */\n  let score = 0;\n  const WINDOWLENGTH = 4; // score for center piece (preference center location)\n\n  if (idx % 7 === 3) {\n    // idx is in the center location\n    const frontOfCenterColIdx = idx % 7;\n    const colArr = [];\n\n    for (let i = frontOfCenterColIdx; i < 42; i += 7) {\n      if (idx !== i) {\n        colArr.push(board[i]);\n      } else {\n        // put the player's piece onto the new board\n        colArr.push(player);\n      }\n    }\n\n    score += colArr.filter(val => val === player).length * 3;\n  } // Score for horizontal\n\n\n  const frontOfRowIdx = idx - idx % 7;\n  const rowArr = board.slice(frontOfRowIdx, frontOfRowIdx + 7);\n  rowArr[idx] = player;\n\n  for (let frontIdx = 0; frontIdx < WINDOWLENGTH; frontIdx++) {\n    const windowArr = rowArr.slice(frontIdx, frontIdx + WINDOWLENGTH);\n    score += calculateScoreForWindow(windowArr, player);\n  } // Score for vertical\n\n\n  const frontOfColIdx = idx % 7;\n  const colArr = [];\n\n  for (let i = frontOfColIdx; i < 42; i += 7) {\n    if (idx !== i) {\n      colArr.push(board[i]);\n    } else {\n      // put the player's piece onto the new board\n      colArr.push(player);\n    }\n  }\n\n  for (let frontIdx = 0; frontIdx < WINDOWLENGTH; frontIdx++) {\n    const windowArr = colArr.slice(frontIdx, frontIdx + WINDOWLENGTH);\n    score += calculateScoreForWindow(windowArr, player);\n  }\n\n  return score;\n}\n\nfunction calculateWinner(board, lastSquareIdx) {\n  /**\n   * Returns the name of the winner HUMAN or AI. Else returns null.\n   */\n  // Check horizontal\n  const frontOfCurrRowIdx = lastSquareIdx - lastSquareIdx % 7;\n  let currRowIdx = frontOfCurrRowIdx;\n  let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n  for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[currRowIdx]; // winner has been found, return the winner\n    } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && board[currRowIdx] !== null && board[currRowIdx] === board[currRowIdx + 1]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // Check vertical\n\n\n  let currColIdx = lastSquareIdx % 7;\n  const outOfBoundsIdx = 42;\n  howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n\n  for (currColIdx; currColIdx < outOfBoundsIdx; currColIdx += 7) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[currColIdx]; // winner has been found, return the winner\n    } else if (currColIdx + 7 < outOfBoundsIdx && board[currColIdx] !== null && board[currColIdx] === board[currColIdx + 7]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // Check Diagonal\n  // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n  // get bottom left squares as indices\n\n\n  const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n  const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n  const bottomLeftTopRightIdx = [];\n  let i = 1;\n\n  while (lastSquareIdx - 7 * i >= 0) {\n    if (lastSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - 7 * i - i)) {\n      bottomLeftTopRightIdx.unshift(lastSquareIdx - 7 * i - i);\n      i++;\n    } else {\n      break;\n    }\n  } // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n\n\n  bottomLeftTopRightIdx.push(lastSquareIdx); // get the top right squares as indices\n\n  i = 1;\n\n  while (lastSquareIdx + 7 * i < 42) {\n    if (lastSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(lastSquareIdx + 7 * i + i)) {\n      bottomLeftTopRightIdx.push(lastSquareIdx + 7 * i + i);\n      i++;\n    } else {\n      break;\n    }\n  } // check to see if there is a 4-in-a-row from bottom left to top right\n\n\n  howManyConsecutiveCounter = 1;\n\n  for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n    } else if (board[bottomLeftTopRightIdx[i]] !== null && board[bottomLeftTopRightIdx[i]] === board[bottomLeftTopRightIdx[i + 1]]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  } // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the lastSquareIdx\n  // get bottom right squares as indices\n\n\n  const bottomRightTopLeftIdx = [];\n  i = 1;\n\n  while (lastSquareIdx - 7 * i >= 0) {\n    if (!leftColumnIdx.has(lastSquareIdx - 7 * i + i)) {\n      bottomRightTopLeftIdx.unshift(lastSquareIdx - 7 * i + i);\n      i++;\n    } else {\n      break;\n    }\n  } // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n\n\n  bottomRightTopLeftIdx.push(lastSquareIdx); // get the top left squares as indices\n\n  i = 1;\n\n  while (lastSquareIdx + 7 * i < 42) {\n    if (!rightColumnIdx.has(lastSquareIdx + 7 * i - i)) {\n      bottomRightTopLeftIdx.push(lastSquareIdx + 7 * i - i);\n      i++;\n    } else {\n      break;\n    }\n  } // check to see if there is a 4-in-a-row from bottom right to top left\n\n\n  howManyConsecutiveCounter = 1;\n\n  for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n    if (howManyConsecutiveCounter === 4) {\n      return board[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n    } else if (board[bottomRightTopLeftIdx[i]] !== null && board[bottomRightTopLeftIdx[i]] === board[bottomRightTopLeftIdx[i + 1]]) {\n      howManyConsecutiveCounter++;\n    } else {\n      // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n      howManyConsecutiveCounter = 1;\n    }\n  }\n\n  return null;\n}\n\nfunction idxOfMaxOfArr(arr) {\n  let max = arr[0];\n  let maxIdx = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIdx = i;\n    }\n  }\n\n  return maxIdx;\n}\n\nfunction minimax(board, depth, maximizingPlayer) {\n  /**\n   * minimax algorithm to determine how the ai will make its move\n   * refer to the pseudocode on wikipedia\n   */\n  // get all the possible moves that the player can drop into\n  // this should be an array with the indices\n  const possibleMovesArr = [0, 1, 2, 3, 4, 5, 6].map(idx => findLegalSquare(board, idx)).filter(idx => idx !== -1);\n  const scoresForPossibleMovesArr = possibleMovesArr.map(idx => calculateScoreForMove(board, maximizingPlayer, idx));\n  alert(scoresForPossibleMovesArr);\n  return possibleMovesArr[idxOfMaxOfArr(scoresForPossibleMovesArr)];\n}\n\nexport default minimax;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/connect4/minimax.js"],"names":["findLegalSquare","board","idx","didNotFindLegalSquareIdx","traversingIdx","calculateScoreForWindow","windowArr","player","score","filter","val","length","calculateScoreForMove","WINDOWLENGTH","frontOfCenterColIdx","colArr","i","push","frontOfRowIdx","rowArr","slice","frontIdx","frontOfColIdx","calculateWinner","lastSquareIdx","frontOfCurrRowIdx","currRowIdx","howManyConsecutiveCounter","currColIdx","outOfBoundsIdx","rightColumnIdx","Set","leftColumnIdx","bottomLeftTopRightIdx","has","unshift","bottomRightTopLeftIdx","idxOfMaxOfArr","arr","max","maxIdx","minimax","depth","maximizingPlayer","possibleMovesArr","map","scoresForPossibleMovesArr","alert"],"mappings":"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","sourcesContent":["function findLegalSquare(board, idx) {\n    /**\n     * Returns the index of a legal square that can be filled.\n     * Note the legal square will be within the same column as idx.\n     * If all the squares within idx's column are filled, then this function returns -1.\n     */\n    const didNotFindLegalSquareIdx = -1;\n    let traversingIdx = idx;\n    while (traversingIdx - 7 >= 0) {\n        traversingIdx -= 7;\n    }\n    for (traversingIdx; traversingIdx < 42; traversingIdx += 7) {\n        if (board[traversingIdx] === null) {\n            return traversingIdx;\n        }\n    }\n    return didNotFindLegalSquareIdx;\n}\n\nfunction calculateScoreForWindow(windowArr, player) {\n    /**\n     * Returns the score for a given arr, assuming the window is 4\n     */\n\n    let score = 0;\n\n    if (windowArr.filter(val => val === player).length === 4) {\n        score += 100;\n    } else if (windowArr.filter(val => val === player).length === 3 && windowArr.filter(val => val === null).length === 1) {\n        score += 5;\n    } else if (windowArr.filter(val => val === player).length === 2 && windowArr.filter(val => val === null).length === 2) {\n        score += 2;\n    }\n\n    return score;\n}\n\nfunction calculateScoreForMove(board, player, idx) {\n    /**\n     * Returns the score for placing player's piece onto the board whose location is idx.\n     */\n\n    let score = 0;\n    const WINDOWLENGTH = 4;\n\n    // score for center piece (preference center location)\n    if (idx % 7 === 3) { // idx is in the center location\n        const frontOfCenterColIdx = idx % 7;\n        const colArr = [];\n        for (let i = frontOfCenterColIdx; i < 42; i += 7) {\n            if (idx !== i) {\n                colArr.push(board[i]);            \n            } else { // put the player's piece onto the new board\n                colArr.push(player);\n            }\n        }\n        score += colArr.filter(val => val === player).length * 3;\n    }\n\n\n    // Score for horizontal\n    const frontOfRowIdx = idx - (idx % 7);\n    const rowArr = board.slice(frontOfRowIdx, frontOfRowIdx + 7);\n    rowArr[idx] = player;\n    for (let frontIdx = 0; frontIdx < WINDOWLENGTH; frontIdx++) {\n        const windowArr = rowArr.slice(frontIdx, frontIdx + WINDOWLENGTH);\n        score += calculateScoreForWindow(windowArr, player);\n    }\n\n    // Score for vertical\n    const frontOfColIdx = idx % 7;\n    const colArr = [];\n    for (let i = frontOfColIdx; i < 42; i += 7) {\n        if (idx !== i) {\n            colArr.push(board[i]);            \n        } else { // put the player's piece onto the new board\n            colArr.push(player);\n        }\n    }\n    for (let frontIdx = 0; frontIdx < WINDOWLENGTH; frontIdx++) {\n        const windowArr = colArr.slice(frontIdx, frontIdx + WINDOWLENGTH);\n        score += calculateScoreForWindow(windowArr, player);\n    }\n\n    return score;\n}\n\nfunction calculateWinner(board, lastSquareIdx) {\n    /**\n     * Returns the name of the winner HUMAN or AI. Else returns null.\n     */\n\n    // Check horizontal\n    const frontOfCurrRowIdx = lastSquareIdx - (lastSquareIdx % 7);\n    let currRowIdx = frontOfCurrRowIdx;\n    let howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n    for (currRowIdx; currRowIdx < frontOfCurrRowIdx + 7; currRowIdx++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[currRowIdx]; // winner has been found, return the winner\n        } else if (currRowIdx + 1 < frontOfCurrRowIdx + 7 && board[currRowIdx] !== null && board[currRowIdx] === board[currRowIdx + 1]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // Check vertical\n    let currColIdx = lastSquareIdx % 7;\n    const outOfBoundsIdx = 42;\n    howManyConsecutiveCounter = 1; // always starts at 1 because each piece counts as one consecutive piece\n    for (currColIdx; currColIdx < outOfBoundsIdx ; currColIdx += 7) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[currColIdx]; // winner has been found, return the winner\n        } else if (currColIdx + 7 < outOfBoundsIdx && board[currColIdx] !== null && board[currColIdx] === board[currColIdx + 7]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // Check Diagonal\n\n    // start with BOTTOM-LEFT TO TOP-RIGHT relative to the lastSquareIdx\n    // get bottom left squares as indices\n    const rightColumnIdx = new Set([6, 13, 20, 27, 34, 41]);\n    const leftColumnIdx = new Set([0, 7, 14, 21, 28, 35]);\n    const bottomLeftTopRightIdx = [];\n    let i = 1;\n    while (lastSquareIdx - 7 * i >= 0) {\n        if (lastSquareIdx - 7 * i - i >= 0 && !rightColumnIdx.has(lastSquareIdx - 7 * i - i)) {\n            bottomLeftTopRightIdx.unshift(lastSquareIdx - 7 * i - i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // push the selectedSquareIdx into the bottomLeftTopRightIdx array\n    bottomLeftTopRightIdx.push(lastSquareIdx);\n\n    // get the top right squares as indices\n    i = 1;\n    while (lastSquareIdx + 7 * i < 42) {\n        if (lastSquareIdx + 7 * i + i < 42 && !leftColumnIdx.has(lastSquareIdx + 7 * i + i)) {\n            bottomLeftTopRightIdx.push(lastSquareIdx + 7 * i + i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // check to see if there is a 4-in-a-row from bottom left to top right\n    howManyConsecutiveCounter = 1;\n    for (let i = 0; i < bottomLeftTopRightIdx.length; i++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[bottomLeftTopRightIdx[i]]; // winner has been found, return the winner\n        } else if (board[bottomLeftTopRightIdx[i]] !== null && board[bottomLeftTopRightIdx[i]] === board[bottomLeftTopRightIdx[i + 1]]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    // NOW DO THE OTHER DIAGONAL... BOTTOM-RIGHT TO TOP-LEFT relative to the lastSquareIdx\n    // get bottom right squares as indices\n    const bottomRightTopLeftIdx = [];\n    i = 1;\n    while (lastSquareIdx - 7 * i >= 0) {\n        if (!leftColumnIdx.has(lastSquareIdx - 7 * i + i)) {\n            bottomRightTopLeftIdx.unshift(lastSquareIdx - 7 * i + i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // push the selectedSquareIdx into the bottomRightTopLeftIdx array\n    bottomRightTopLeftIdx.push(lastSquareIdx);\n\n    // get the top left squares as indices\n    i = 1;\n    while (lastSquareIdx + 7 * i < 42) {\n        if (!rightColumnIdx.has(lastSquareIdx + 7 * i - i)) {\n            bottomRightTopLeftIdx.push(lastSquareIdx + 7 * i - i);\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // check to see if there is a 4-in-a-row from bottom right to top left\n    howManyConsecutiveCounter = 1;\n    for (let i = 0; i < bottomRightTopLeftIdx.length; i++) {\n        if (howManyConsecutiveCounter === 4) {\n            return board[bottomRightTopLeftIdx[i]]; // winner has been found, return the winner\n        } else if (board[bottomRightTopLeftIdx[i]] !== null && board[bottomRightTopLeftIdx[i]] === board[bottomRightTopLeftIdx[i + 1]]) {\n            howManyConsecutiveCounter++;\n        } else {\n            // either the loop ends and there is no winner found here OR the next adjacent piece is a different color\n            howManyConsecutiveCounter = 1;\n        }\n    }\n\n    return null;\n}\n\nfunction idxOfMaxOfArr(arr) {\n    let max = arr[0];\n    let maxIdx = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i]\n            maxIdx = i;\n        }\n    }\n    return maxIdx;\n}\n\nfunction minimax(board, depth, maximizingPlayer) {\n    /**\n     * minimax algorithm to determine how the ai will make its move\n     * refer to the pseudocode on wikipedia\n     */\n\n    // get all the possible moves that the player can drop into\n    // this should be an array with the indices\n    const possibleMovesArr = [0,1,2,3,4,5,6].map(idx => findLegalSquare(board, idx)).filter(idx => idx !== -1);\n    const scoresForPossibleMovesArr = possibleMovesArr.map(idx => calculateScoreForMove(board, maximizingPlayer, idx));\n    alert(scoresForPossibleMovesArr);\n    return possibleMovesArr[idxOfMaxOfArr(scoresForPossibleMovesArr)];\n}\n\nexport default minimax;"]},"metadata":{},"sourceType":"module"}