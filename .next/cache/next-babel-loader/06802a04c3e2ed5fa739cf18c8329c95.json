{"ast":null,"code":"import deepCopy2DArray from './deepCopy2DArray';\nexport default function minimax(board, depth, isMaximizingPlayer, maximizingPlayer, minimizingPlayer) {\n  /**\n   * minimax algorithm to determine how and where the ai will make its move\n   * refer to the pseudocode on wikipedia\n   * it will return the optimal rowIdx and colIdx, the location to place the piece onto the board\n   * return value looks like [optimalRowIdx, optimalColIdx, maxScore]... the 0th and 1st position of this array tell where the AI should go\n   * \n   * board is a row x col array\n   * depth tells you how far down the tree you will traverse to find the calculated score\n   * maximizingPlayer is the player that is trying to win... in this case the AI = \"ai\"\n   * minimizingPlayer is the player that is trying to prevent the maximizingPlayer from winning... in this case HUMAN = \"you\"\n   */\n  let possibleColumnIndices = getAllValidColumnPositions(board);\n  alert(possibleColumnIndices);\n  const isTheEndOfGame = isGameOver(board, maximizingPlayer, minimizingPlayer);\n\n  if (depth === 0 || isTheEndOfGame) {\n    if (isTheEndOfGame) {\n      if (isWinner(board, maximizingPlayer)) {\n        return [null, null, 100000000000000];\n      } else if (isWinner(board, minimizingPlayer)) {\n        return [null, null, -100000000000000];\n      } else {\n        // Game is over. A tie has occurred.\n        return [null, null, 0];\n      }\n    } else {\n      // else the depth is 0\n      return [null, null, calculateScore(board, maximizingPlayer, minimizingPlayer)];\n    }\n  }\n\n  if (isMaximizingPlayer) {\n    let maxScore = Number.MIN_VALUE;\n    let randomIdx = Math.floor(Math.random() * possibleColumnIndices.length);\n    let colIdx = possibleColumnIndices[randomIdx];\n    let rowIdx = findLegalRowIdxWithinColumn(board, colIdx);\n\n    for (let i = 0; i < possibleColumnIndices.length; i++) {\n      rowIdx = findLegalRowIdxWithinColumn(board, possibleColumnIndices[i]);\n      const newBoard = putPieceOntoTheBoard(rowIdx, possibleColumnIndices[i], board, maximizingPlayer);\n      const newScore = minimax(newBoard, depth - 1, false, maximizingPlayer, minimizingPlayer)[2];\n\n      if (newScore > maxScore) {\n        maxScore = newScore;\n        colIdx = possibleColumnIndices[i];\n      }\n    }\n\n    return [rowIdx, colIdx, maxScore];\n  } else {\n    // else it's the minimizing player\n    let minScore = Number.MAX_VALUE;\n    let randomIdx = Math.floor(Math.random() * possibleColumnIndices.length);\n    let colIdx = possibleColumnIndices[randomIdx];\n    let rowIdx = findLegalRowIdxWithinColumn(board, colIdx);\n\n    for (let i = 0; i < possibleColumnIndices.length; i++) {\n      rowIdx = findLegalRowIdxWithinColumn(board, possibleColumnIndices[i]);\n      const newBoard = putPieceOntoTheBoard(rowIdx, possibleColumnIndices[i], board, minimizingPlayer);\n      const newScore = minimax(newBoard, depth - 1, true, maximizingPlayer, minimizingPlayer)[2];\n\n      if (newScore < minScore) {\n        minScore = newScore;\n        colIdx = possibleColumnIndices[i];\n      }\n    }\n\n    return [rowIdx, colIdx, minScore];\n  }\n}\n\nfunction getAllValidColumnPositions(board) {\n  /**\n   * Returns all the possible columns that have a valid row position to place the piece onto the board\n   * The return value is an array with the elements inside being the index of the column position\n   */\n  const TOTALNUMOFCOLUMNS = board[0].length; // get all the possible moves that the player can drop onto the board\n  // will have 2 arrays: column index array and row index array\n  // refer to the note below about the relationship between these two arrays\n\n  const columnIndicesOfBoard = []; // this will look like [0,1,2,3,4,5,6]\n\n  for (let i = 0; i < TOTALNUMOFCOLUMNS; i++) {\n    columnIndicesOfBoard.push(i);\n  } // note that possibleRowIndicesToPlacePieceOntoBoard is relative to columnIndicesOfBoard\n  // i.e. columnIndicesOfBoard = [0,1,2,3,4,5,6]\n  // i.e. possibleRowIndicesToPlacePieceOntoBoard = [3,3,4,2,1,2,1]\n  // this means board[3][0]... board[3][1]... board[4][2]... board[2][3]... board[1][4]... etc are pieces that can be placed onto the board\n\n\n  const possibleRowIndicesToPlacePieceOntoBoard = columnIndicesOfBoard.map(colIdx => findLegalRowIdxWithinColumn(board, colIdx)); // note that possibleRowIndicesToPlacePieceOntoBoard might have -1 values\n  // get all the columns for which the corresponding possibleRowIndicesToPlacePieceOntoBoard !== -1\n\n  const possibleColumnIndicesToPlacePieceOntoBoard = [];\n\n  for (let i = 0; i < columnIndicesOfBoard.length; i++) {\n    if (possibleRowIndicesToPlacePieceOntoBoard[i] !== -1) {\n      possibleColumnIndicesToPlacePieceOntoBoard.push(i);\n    }\n  }\n\n  return possibleColumnIndicesToPlacePieceOntoBoard;\n}\n\nfunction putPieceOntoTheBoard(rowIdx, colIdx, board, player) {\n  /**\n   * returns a new board such that the newBoard[rowIdx][colIdx] = player and the other values are the same as board\n   */\n  const newBoard = deepCopy2DArray(board);\n  newBoard[rowIdx][colIdx] = player;\n  return newBoard;\n}\n\nfunction isGameOver(board, maximizingPlayer, minimizingPlayer) {\n  if (isWinner(board, maximizingPlayer)) {\n    return true;\n  } else if (isWinner(board, minimizingPlayer)) {\n    return true;\n  } else if (isBoardAllFilled(board)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction isBoardAllFilled(board) {\n  return board.map(row => row.every(piece => piece !== null)).every(isRowFilled => isRowFilled === true);\n}\n\nfunction isWinner(board, player) {\n  const WINDOWLENGTH = 4;\n  const TOTALNUMOFROWS = board.length;\n  const TOTALNUMOFCOLUMNS = board[0].length; // check horizontal\n\n  for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFCOLUMNS; offset++) {\n      const horizontalFourAdjacentSquares = board[currRowIdx].slice(offset, offset + WINDOWLENGTH);\n\n      if (horizontalFourAdjacentSquares.every(val => val === player)) {\n        return true;\n      }\n    }\n  } // Check vertical\n\n\n  for (let currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n    const aColumnOfSquaresArr = [];\n\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n      aColumnOfSquaresArr.push(board[currRowIdx][currColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFROWS; offset++) {\n      const verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n\n      if (verticalFourAdjacentSquares.every(val => val === player)) {\n        return true;\n      }\n    }\n  } // Check diagonals\n  // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx < TOTALNUMOFROWS && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx++, runningColIdx++) {\n      aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n\n      if (diagonalFourAdjacentSquares.every(val => val === player)) {\n        return true;\n      }\n    }\n  } // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx >= 0 && runningColIdx > 0; runningRowIdx--, runningColIdx--) {\n      aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n\n      if (diagonalFourAdjacentSquares.every(val => val === player)) {\n        return true;\n      }\n    }\n  } // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx >= 0 && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx--, runningColIdx++) {\n      aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n\n      if (diagonalFourAdjacentSquares.every(val => val === player)) {\n        return true;\n      }\n    }\n  } // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx < TOTALNUMOFROWS && runningColIdx > 0; runningRowIdx++, runningColIdx--) {\n      aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n\n      if (diagonalFourAdjacentSquares.every(val => val === player)) {\n        return true;\n      }\n    }\n  } // if you reach here, there is no winner\n\n\n  return false;\n}\n\nfunction findLegalRowIdxWithinColumn(board, selectedColIdx) {\n  /**\n   * Returns the row index of a legal square that can be filled given the board (2 dimensional row x col).\n   * Note the legal square will be within the same column as selectedColIdx.\n   * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n   */\n  const didNotFindLegalRowIdxWithinColumnIdx = -1;\n\n  for (let rowIdx = 0; rowIdx < board.length; rowIdx++) {\n    if (board[rowIdx][selectedColIdx] === null) {\n      return rowIdx;\n    }\n  }\n\n  return didNotFindLegalRowIdxWithinColumnIdx;\n}\n\nfunction calculateScoreForThese4Squares(arr, maximizingPlayer, minimizingPlayer) {\n  /**\n   * Returns the score for the given arr, assuming the length of the arr is 4\n   */\n  let score = 0;\n\n  if (arr.filter(val => val === maximizingPlayer).length === 4) {\n    score += 100;\n  } else if (arr.filter(val => val === maximizingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n    score += 5;\n  } else if (arr.filter(val => val === maximizingPlayer).length === 2 && arr.filter(val => val === null).length === 2) {\n    score += 2;\n  }\n\n  if (arr.filter(val => val === minimizingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n    score -= 15;\n  }\n\n  return score;\n}\n\nfunction calculateScore(board, maximizingPlayer, minimizingPlayer) {\n  /**\n   * Returns the score for placing maximizingPlayer's piece onto the board whose location is rowIdx and colIdx.\n   */\n  let score = 0;\n  const TOTALNUMOFROWS = board.length;\n  const TOTALNUMOFCOLUMNS = board[0].length;\n  const WINDOWLENGTH = 4;\n  const CENTERCOLUMNIDX = Math.floor(TOTALNUMOFCOLUMNS / 2); // score for center piece (preference center location)\n\n  for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    if (board[currRowIdx][CENTERCOLUMNIDX] === maximizingPlayer) {\n      score += 2;\n    }\n  } // Score for horizontal\n  // Scores are calculated for window lengths of 4\n\n\n  for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFCOLUMNS; offset++) {\n      const horizontalFourAdjacentSquares = board[currRowIdx].slice(offset, offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(horizontalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Score for vertical\n  // Scores are calculated for window lengths of 4\n\n\n  for (let currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n    const aColumnOfSquaresArr = [];\n\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n      aColumnOfSquaresArr.push(board[currRowIdx][currColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFROWS; offset++) {\n      const verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(verticalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Score for diagonal\n  // Scores are calculated for window lengths of 4\n  // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx < TOTALNUMOFROWS && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx++, runningColIdx++) {\n      aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx >= 0 && runningColIdx > 0; runningRowIdx--, runningColIdx--) {\n      aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx >= 0 && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx--, runningColIdx++) {\n      aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n    const aDiagonalOfSquaresArr = [];\n\n    for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx < TOTALNUMOFROWS && runningColIdx > 0; runningRowIdx++, runningColIdx--) {\n      aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n    }\n\n    for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n      const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  }\n\n  return score;\n}","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/connect4/minimax.js"],"names":["deepCopy2DArray","minimax","board","depth","isMaximizingPlayer","maximizingPlayer","minimizingPlayer","possibleColumnIndices","getAllValidColumnPositions","alert","isTheEndOfGame","isGameOver","isWinner","calculateScore","maxScore","Number","MIN_VALUE","randomIdx","Math","floor","random","length","colIdx","rowIdx","findLegalRowIdxWithinColumn","i","newBoard","putPieceOntoTheBoard","newScore","minScore","MAX_VALUE","TOTALNUMOFCOLUMNS","columnIndicesOfBoard","push","possibleRowIndicesToPlacePieceOntoBoard","map","possibleColumnIndicesToPlacePieceOntoBoard","player","isBoardAllFilled","row","every","piece","isRowFilled","WINDOWLENGTH","TOTALNUMOFROWS","currRowIdx","offset","horizontalFourAdjacentSquares","slice","val","currColIdx","aColumnOfSquaresArr","verticalFourAdjacentSquares","aDiagonalOfSquaresArr","runningRowIdx","runningColIdx","diagonalFourAdjacentSquares","selectedColIdx","didNotFindLegalRowIdxWithinColumnIdx","calculateScoreForThese4Squares","arr","score","filter","CENTERCOLUMNIDX"],"mappings":"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","sourcesContent":["import deepCopy2DArray from './deepCopy2DArray';\n\nexport default function minimax(board, depth, isMaximizingPlayer, maximizingPlayer, minimizingPlayer) {\n    /**\n     * minimax algorithm to determine how and where the ai will make its move\n     * refer to the pseudocode on wikipedia\n     * it will return the optimal rowIdx and colIdx, the location to place the piece onto the board\n     * return value looks like [optimalRowIdx, optimalColIdx, maxScore]... the 0th and 1st position of this array tell where the AI should go\n     * \n     * board is a row x col array\n     * depth tells you how far down the tree you will traverse to find the calculated score\n     * maximizingPlayer is the player that is trying to win... in this case the AI = \"ai\"\n     * minimizingPlayer is the player that is trying to prevent the maximizingPlayer from winning... in this case HUMAN = \"you\"\n     */\n\n    let possibleColumnIndices = getAllValidColumnPositions(board);\n    alert(possibleColumnIndices);\n    const isTheEndOfGame = isGameOver(board, maximizingPlayer, minimizingPlayer);\n\n    if (depth === 0 || isTheEndOfGame) {\n        if (isTheEndOfGame) {\n            if (isWinner(board, maximizingPlayer)) {\n                return [null, null, 100000000000000];\n            } else if (isWinner(board, minimizingPlayer)) {\n                return [null, null, -100000000000000];\n            } else {    // Game is over. A tie has occurred.\n                return [null, null, 0];\n            }\n        }\n        else { // else the depth is 0\n            return [null, null, calculateScore(board, maximizingPlayer, minimizingPlayer)];\n        }\n    }\n\n    if (isMaximizingPlayer) {\n        let maxScore = Number.MIN_VALUE;\n        let randomIdx = Math.floor(Math.random() * possibleColumnIndices.length);\n        let colIdx = possibleColumnIndices[randomIdx];        \n        let rowIdx = findLegalRowIdxWithinColumn(board, colIdx);\n\n        for (let i = 0; i < possibleColumnIndices.length; i++) {\n            rowIdx = findLegalRowIdxWithinColumn(board, possibleColumnIndices[i]);\n            const newBoard = putPieceOntoTheBoard(rowIdx, possibleColumnIndices[i], board, maximizingPlayer);\n            const newScore = minimax(newBoard, depth - 1, false, maximizingPlayer, minimizingPlayer)[2];\n            if (newScore > maxScore) {\n                maxScore = newScore;\n                colIdx = possibleColumnIndices[i];\n            }\n        }\n        return [rowIdx, colIdx, maxScore];\n    } else { // else it's the minimizing player\n        let minScore = Number.MAX_VALUE;\n        let randomIdx = Math.floor(Math.random() * possibleColumnIndices.length);\n        let colIdx = possibleColumnIndices[randomIdx];        \n        let rowIdx = findLegalRowIdxWithinColumn(board, colIdx);\n\n        for (let i = 0; i < possibleColumnIndices.length; i++) {\n            rowIdx = findLegalRowIdxWithinColumn(board, possibleColumnIndices[i]);\n            const newBoard = putPieceOntoTheBoard(rowIdx, possibleColumnIndices[i], board, minimizingPlayer);\n            const newScore = minimax(newBoard, depth - 1, true, maximizingPlayer, minimizingPlayer)[2];\n            if (newScore < minScore) {\n                minScore = newScore;\n                colIdx = possibleColumnIndices[i];\n            }\n        }\n        return [rowIdx, colIdx, minScore];\n    }\n}\n\nfunction getAllValidColumnPositions(board) {\n    /**\n     * Returns all the possible columns that have a valid row position to place the piece onto the board\n     * The return value is an array with the elements inside being the index of the column position\n     */\n\n    const TOTALNUMOFCOLUMNS = board[0].length;\n\n    // get all the possible moves that the player can drop onto the board\n    // will have 2 arrays: column index array and row index array\n    // refer to the note below about the relationship between these two arrays\n    const columnIndicesOfBoard = []; // this will look like [0,1,2,3,4,5,6]\n    for (let i = 0; i < TOTALNUMOFCOLUMNS; i++) {\n        columnIndicesOfBoard.push(i);\n    }\n\n    // note that possibleRowIndicesToPlacePieceOntoBoard is relative to columnIndicesOfBoard\n    // i.e. columnIndicesOfBoard = [0,1,2,3,4,5,6]\n    // i.e. possibleRowIndicesToPlacePieceOntoBoard = [3,3,4,2,1,2,1]\n    // this means board[3][0]... board[3][1]... board[4][2]... board[2][3]... board[1][4]... etc are pieces that can be placed onto the board\n    const possibleRowIndicesToPlacePieceOntoBoard = columnIndicesOfBoard.map(colIdx => findLegalRowIdxWithinColumn(board, colIdx)); // note that possibleRowIndicesToPlacePieceOntoBoard might have -1 values\n\n    // get all the columns for which the corresponding possibleRowIndicesToPlacePieceOntoBoard !== -1\n    const possibleColumnIndicesToPlacePieceOntoBoard = []\n    for (let i = 0; i < columnIndicesOfBoard.length; i++) {\n        if (possibleRowIndicesToPlacePieceOntoBoard[i] !== -1) {\n            possibleColumnIndicesToPlacePieceOntoBoard.push(i);\n        }\n    }\n\n    return possibleColumnIndicesToPlacePieceOntoBoard;\n}\n\nfunction putPieceOntoTheBoard(rowIdx, colIdx, board, player) {\n    /**\n     * returns a new board such that the newBoard[rowIdx][colIdx] = player and the other values are the same as board\n     */\n\n    const newBoard = deepCopy2DArray(board);\n    newBoard[rowIdx][colIdx] = player;\n\n    return newBoard;\n}\n\nfunction isGameOver(board, maximizingPlayer, minimizingPlayer) {\n    if (isWinner(board, maximizingPlayer)) {\n        return true;\n    } else if (isWinner(board, minimizingPlayer)) {\n        return true;\n    } else if (isBoardAllFilled(board)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction isBoardAllFilled(board) {\n    return board.map(row => row.every(piece => piece !== null)).every(isRowFilled => isRowFilled === true);\n}\n\nfunction isWinner(board, player) {\n    const WINDOWLENGTH = 4;\n    const TOTALNUMOFROWS = board.length;\n    const TOTALNUMOFCOLUMNS = board[0].length;\n\n    // check horizontal\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFCOLUMNS; offset++) {\n            const horizontalFourAdjacentSquares = board[currRowIdx].slice(offset, offset + WINDOWLENGTH);\n            if (horizontalFourAdjacentSquares.every(val => val === player)) {\n                return true;\n            }\n        }\n    }\n\n    // Check vertical\n    for (let currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n        const aColumnOfSquaresArr = [];\n        for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n            aColumnOfSquaresArr.push(board[currRowIdx][currColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFROWS; offset++) {\n            const verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            if (verticalFourAdjacentSquares.every(val => val === player)) {\n                return true;\n            }\n        }\n    }\n\n    // Check diagonals\n\n    // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx < TOTALNUMOFROWS && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx++, runningColIdx++) {\n            aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            if (diagonalFourAdjacentSquares.every(val => val === player)) {\n                return true;\n            }\n        }\n    }\n\n    // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx >= 0 && runningColIdx > 0; runningRowIdx--, runningColIdx--) {\n            aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            if (diagonalFourAdjacentSquares.every(val => val === player)) {\n                return true;\n            }\n        }\n    }\n\n    // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx >= 0 && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx--, runningColIdx++) {\n            aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            if (diagonalFourAdjacentSquares.every(val => val === player)) {\n                return true;\n            }\n        }\n    }\n\n    // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx < TOTALNUMOFROWS && runningColIdx > 0; runningRowIdx++, runningColIdx--) {\n            aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            if (diagonalFourAdjacentSquares.every(val => val === player)) {\n                return true;\n            }\n        }\n    }\n\n    // if you reach here, there is no winner\n    return false;\n\n}\n\nfunction findLegalRowIdxWithinColumn(board, selectedColIdx) {\n    /**\n     * Returns the row index of a legal square that can be filled given the board (2 dimensional row x col).\n     * Note the legal square will be within the same column as selectedColIdx.\n     * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n     */\n    const didNotFindLegalRowIdxWithinColumnIdx = -1;\n    for (let rowIdx = 0; rowIdx < board.length; rowIdx++) {\n        if (board[rowIdx][selectedColIdx] === null) {\n            return rowIdx;\n        }\n    }\n    return didNotFindLegalRowIdxWithinColumnIdx;\n}\n\nfunction calculateScoreForThese4Squares(arr, maximizingPlayer, minimizingPlayer) {\n    /**\n     * Returns the score for the given arr, assuming the length of the arr is 4\n     */\n\n    let score = 0;\n\n    if (arr.filter(val => val === maximizingPlayer).length === 4) {\n        score += 100;\n    } else if (arr.filter(val => val === maximizingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n        score += 5;\n    } else if (arr.filter(val => val === maximizingPlayer).length === 2 && arr.filter(val => val === null).length === 2) {\n        score += 2;\n    }\n\n    if (arr.filter(val => val === minimizingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n        score -= 15;\n    }\n\n    return score;\n}\n\nfunction calculateScore(board, maximizingPlayer, minimizingPlayer) {\n    /**\n     * Returns the score for placing maximizingPlayer's piece onto the board whose location is rowIdx and colIdx.\n     */\n\n    let score = 0;\n\n    const TOTALNUMOFROWS = board.length;\n    const TOTALNUMOFCOLUMNS = board[0].length;\n    const WINDOWLENGTH = 4;\n    const CENTERCOLUMNIDX = Math.floor(TOTALNUMOFCOLUMNS / 2);\n\n    // score for center piece (preference center location)\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        if (board[currRowIdx][CENTERCOLUMNIDX] === maximizingPlayer) {\n            score += 2;\n        }\n    }\n\n\n    // Score for horizontal\n    // Scores are calculated for window lengths of 4\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFCOLUMNS; offset++) {\n            const horizontalFourAdjacentSquares = board[currRowIdx].slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(horizontalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Score for vertical\n    // Scores are calculated for window lengths of 4\n    for (let currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n        const aColumnOfSquaresArr = [];\n        for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n            aColumnOfSquaresArr.push(board[currRowIdx][currColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFROWS; offset++) {\n            const verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(verticalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Score for diagonal\n    // Scores are calculated for window lengths of 4\n\n    // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx < TOTALNUMOFROWS && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx++, runningColIdx++) {\n            aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx >= 0 && runningColIdx > 0; runningRowIdx--, runningColIdx--) {\n            aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx >= 0 && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx--, runningColIdx++) {\n            aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx < TOTALNUMOFROWS && runningColIdx > 0; runningRowIdx++, runningColIdx--) {\n            aDiagonalOfSquaresArr.push(board[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    return score;\n}"]},"metadata":{},"sourceType":"module"}