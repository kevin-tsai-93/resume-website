{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js\";\nimport Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax';\nimport deepCopy2DArray from './connect4/deepCopy2DArray';\nimport new2DArray from './connect4/new2DArray'; // Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFCOLS = 7;\n\nclass Connect4Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: new2DArray(TOTALNUMOFROWS, TOTALNUMOFCOLS),\n      // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n      winner: null\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.findLegalRowIdxWithinColumn = this.findLegalRowIdxWithinColumn.bind(this);\n    this.calculateWinner = this.calculateWinner.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.aiCalculatesNextMove = this.aiCalculatesNextMove.bind(this);\n  }\n\n  handleClick(selectedColIdx) {\n    const squares = deepCopy2DArray(this.state.squares);\n    const legalRowPositionToFillIdx = this.findLegalRowIdxWithinColumn(selectedColIdx);\n\n    if (legalRowPositionToFillIdx !== -1) {\n      squares[legalRowPositionToFillIdx][selectedColIdx] = HUMAN;\n      let winner = this.calculateWinner(squares, HUMAN, legalRowPositionToFillIdx, selectedColIdx); // let the AI make a move if it's the AI's turn and the game isn't over\n\n      if (winner === null) {\n        const [aiSelectedRowIdx, aiSelectedColIdx] = this.aiCalculatesNextMove(squares);\n        squares[aiSelectedRowIdx][aiSelectedColIdx] = AI;\n        winner = this.calculateWinner(squares, AI, aiSelectedRowIdx, aiSelectedColIdx);\n      }\n\n      this.setState(prevState => ({\n        squares: squares,\n        winner: winner\n      }));\n    }\n  }\n\n  handleReset() {\n    this.setState({\n      squares: new2DArray(TOTALNUMOFROWS, TOTALNUMOFCOLS),\n      winner: null\n    });\n  }\n\n  aiCalculatesNextMove(board) {\n    /**\n     * This function calculates the optimal move for the ai using the minimax algorithm.\n     * This function takes in a board (2 x 2) array with board[rowIdx][colIdx] === HUMAN or AI or null.\n     * This function returns the row index and column index (the position on the board)\n     * such that the AI should place it piece.\n     */\n    let [optimalRowIdx, optimalColIdx] = minimax(board, 5, Number.MIN_VALUE, Number.MAX_VALUE, true, AI, HUMAN); // let max = 6;\n    // let min = 0;\n    // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n    // let aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n    // while (aiSelectedIdx === -1) {\n    //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n    //     aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n    // }\n\n    return [optimalRowIdx, optimalColIdx];\n  }\n\n  findLegalRowIdxWithinColumn(selectedColIdx) {\n    /**\n     * Returns the row index of a legal square that can be filled.\n     * Note the legal square will be within the same column as selectedColIdx.\n     * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n     */\n    const didNotFindLegalRowIdxWithinColumnIdx = -1;\n\n    for (let rowIdx = 0; rowIdx < this.state.squares.length; rowIdx++) {\n      if (this.state.squares[rowIdx][selectedColIdx] === null) {\n        return rowIdx;\n      }\n    }\n\n    return didNotFindLegalRowIdxWithinColumnIdx;\n  }\n\n  calculateWinner(board, mostRecentPlayer, mostRecentSelectionRowIdx, mostRecentSelectionColIdx) {\n    /**\n     * Returns the name of the winner HUMAN or AI. If no winner, returns null.\n     */\n    let winner = null;\n    const WINDOW = 4; // if game just started, there is no winner\n\n    if (mostRecentSelectionRowIdx === null) {\n      return winner;\n    } // Check horizontal\n\n\n    for (let colIdx = 0; colIdx + WINDOW <= TOTALNUMOFCOLS; colIdx++) {\n      const fourHorizontalAdjacentSquares = board[mostRecentSelectionRowIdx].slice(colIdx, colIdx + WINDOW);\n\n      if (fourHorizontalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n        winner = mostRecentPlayer;\n        return winner;\n      }\n    } // Check vertical\n\n\n    for (let rowIdx = 0; rowIdx + WINDOW <= TOTALNUMOFROWS; rowIdx++) {\n      let matchingMostRecentPlayerCounter = 0;\n\n      for (let offset = 0; offset < WINDOW; offset++) {\n        if (board[rowIdx + offset][mostRecentSelectionColIdx] === mostRecentPlayer) {\n          matchingMostRecentPlayerCounter++;\n        }\n\n        if (matchingMostRecentPlayerCounter === WINDOW) {\n          winner = mostRecentPlayer;\n          return winner;\n        }\n      }\n    } // Check Diagonal\n    // check positively sloped diagonal... from bottom-left to top-right\n\n\n    const positiveDiagonalArr = [];\n    let rowIdx = mostRecentSelectionRowIdx;\n    let colIdx = mostRecentSelectionColIdx;\n\n    while (rowIdx - 1 >= 0 && colIdx - 1 >= 0) {\n      rowIdx--;\n      colIdx--;\n    }\n\n    while (rowIdx < TOTALNUMOFROWS && colIdx < TOTALNUMOFCOLS) {\n      positiveDiagonalArr.push(board[rowIdx][colIdx]);\n      rowIdx++;\n      colIdx++;\n    }\n\n    for (let i = 0; i + WINDOW <= positiveDiagonalArr.length; i++) {\n      const fourPositiveDiagonalAdjacentSquares = positiveDiagonalArr.slice(i, i + WINDOW);\n\n      if (fourPositiveDiagonalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n        winner = mostRecentPlayer;\n        return winner;\n      }\n    } // check negatively sloped diagonal... from top-left to bottom-right\n\n\n    const negativeDiagonalArr = [];\n    rowIdx = mostRecentSelectionRowIdx;\n    colIdx = mostRecentSelectionColIdx;\n\n    while (rowIdx - 1 >= 0 && colIdx + 1 < TOTALNUMOFCOLS) {\n      rowIdx--;\n      colIdx++;\n    }\n\n    while (rowIdx < TOTALNUMOFROWS && colIdx >= 0) {\n      negativeDiagonalArr.push(board[rowIdx][colIdx]);\n      rowIdx++;\n      colIdx--;\n    }\n\n    for (let i = 0; i + WINDOW <= negativeDiagonalArr.length; i++) {\n      const fourNegativeDiagonalAdjacentSquares = negativeDiagonalArr.slice(i, i + WINDOW);\n\n      if (fourNegativeDiagonalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n        winner = mostRecentPlayer;\n        return winner;\n      }\n    }\n\n    return winner; // if no winner was found, winner variable does not change from intial null initialization\n  }\n\n  render() {\n    let isGameOver = false;\n\n    if (this.state.winner !== null) {\n      isGameOver = true;\n    } else if (!this.state.squares.map(row => row.includes(null)).includes(true)) {\n      // meaning every piece on the board is filled but no winner (implying a tie)\n      isGameOver = true;\n    } // setup the display\n\n\n    const horizontalRule = /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        visibility: \"hidden\",\n        marginBottom: \"0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 32\n    }, this);\n\n    const button = /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"fade-in\",\n      style: {\n        outline: \"none\",\n        userSelect: \"none\"\n      },\n      onClick: this.handleReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 24\n    }, this);\n\n    let greeting = /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"d-flex justify-content-center fade-in\",\n      children: \"Good luck!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 24\n    }, this);\n\n    let board = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: this.state.squares,\n        onClick: this.handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 68\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 21\n    }, this);\n\n    if (isGameOver) {\n      board = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: this.state.squares,\n          onClick: () => {\n            return;\n            /* this does nothing... Disables onClick */\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 68\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }, this);\n    }\n\n    if (this.state.winner === HUMAN) {\n      greeting = /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"d-flex justify-content-center fade-in\",\n        children: \"\\uD83C\\uDF89 Congratulations! You won! \\uD83C\\uDF89\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 24\n      }, this);\n    } else if (this.state.winner === AI) {\n      greeting = /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"d-flex justify-content-center fade-in\",\n        children: \"The AI won! Try again!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 24\n      }, this);\n    } else if (this.state.winner === null && isGameOver) {\n      // this would mean the game ended in a tie\n      greeting = /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"d-flex justify-content-center fade-in\",\n        children: \"It's a draw! Try again!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 24\n      }, this);\n    }\n\n    let display = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [greeting, /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: [button, horizontalRule]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 29\n      }, this), board]\n    }, void 0, true);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"d-flex justify-content-center fade-in\",\n        children: \"Welcome to Connect 4!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), display]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\nexport default Connect4Game;","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/Connect4Game.js"],"names":["Board","React","Component","minimax","deepCopy2DArray","new2DArray","HUMAN","AI","TOTALNUMOFROWS","TOTALNUMOFCOLS","Connect4Game","constructor","props","state","squares","winner","handleClick","bind","findLegalRowIdxWithinColumn","calculateWinner","handleReset","aiCalculatesNextMove","selectedColIdx","legalRowPositionToFillIdx","aiSelectedRowIdx","aiSelectedColIdx","setState","prevState","board","optimalRowIdx","optimalColIdx","Number","MIN_VALUE","MAX_VALUE","didNotFindLegalRowIdxWithinColumnIdx","rowIdx","length","mostRecentPlayer","mostRecentSelectionRowIdx","mostRecentSelectionColIdx","WINDOW","colIdx","fourHorizontalAdjacentSquares","slice","every","val","matchingMostRecentPlayerCounter","offset","positiveDiagonalArr","push","i","fourPositiveDiagonalAdjacentSquares","negativeDiagonalArr","fourNegativeDiagonalAdjacentSquares","render","isGameOver","map","row","includes","horizontalRule","visibility","marginBottom","button","outline","userSelect","greeting","display","textAlign"],"mappings":"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","sourcesContent":["import Board from './connect4/Board';\nimport React, { Component } from 'react';\nimport minimax from './connect4/minimax';\nimport deepCopy2DArray from './connect4/deepCopy2DArray';\nimport new2DArray from './connect4/new2DArray';\n\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n\nconst HUMAN = \"you\";\nconst AI = \"ai\";\nconst TOTALNUMOFROWS = 6;\nconst TOTALNUMOFCOLS = 7;\n\n\nclass Connect4Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: new2DArray(TOTALNUMOFROWS, TOTALNUMOFCOLS), // i.e. squares[rowIdx][colIdx] is initialized to null and will be either HUMAN or AI when pieces are placed onto board\n            winner: null,\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.findLegalRowIdxWithinColumn = this.findLegalRowIdxWithinColumn.bind(this);\n        this.calculateWinner = this.calculateWinner.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.aiCalculatesNextMove = this.aiCalculatesNextMove.bind(this);\n    }\n\n    handleClick(selectedColIdx) {\n        const squares = deepCopy2DArray(this.state.squares);\n        const legalRowPositionToFillIdx = this.findLegalRowIdxWithinColumn(selectedColIdx);\n        if (legalRowPositionToFillIdx !== -1) {\n            squares[legalRowPositionToFillIdx][selectedColIdx] = HUMAN;\n            let winner = this.calculateWinner(squares, HUMAN, legalRowPositionToFillIdx, selectedColIdx);\n            // let the AI make a move if it's the AI's turn and the game isn't over\n            if (winner === null) {\n                const [aiSelectedRowIdx, aiSelectedColIdx] = this.aiCalculatesNextMove(squares);\n                squares[aiSelectedRowIdx][aiSelectedColIdx] = AI;\n                winner = this.calculateWinner(squares, AI, aiSelectedRowIdx, aiSelectedColIdx);\n            }\n            this.setState(prevState => ({\n                squares: squares,\n                winner: winner\n            }));\n        }\n    }\n\n    handleReset() {\n        this.setState({\n            squares: new2DArray(TOTALNUMOFROWS, TOTALNUMOFCOLS),\n            winner: null\n        });\n    }\n\n    aiCalculatesNextMove(board) {\n        /**\n         * This function calculates the optimal move for the ai using the minimax algorithm.\n         * This function takes in a board (2 x 2) array with board[rowIdx][colIdx] === HUMAN or AI or null.\n         * This function returns the row index and column index (the position on the board)\n         * such that the AI should place it piece.\n         */\n\n        let [optimalRowIdx, optimalColIdx] = minimax(board, 5, Number.MIN_VALUE, Number.MAX_VALUE, true, AI, HUMAN);\n        // let max = 6;\n        // let min = 0;\n        // let randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n        // let aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n        // while (aiSelectedIdx === -1) {\n        //     randIdx = Math.floor(Math.random() * (max - min + 1) + min);\n        //     aiSelectedIdx = this.findLegalRowIdxWithinColumn(randIdx);\n        // }\n        return [optimalRowIdx, optimalColIdx];\n    }\n\n    findLegalRowIdxWithinColumn(selectedColIdx) {\n        /**\n         * Returns the row index of a legal square that can be filled.\n         * Note the legal square will be within the same column as selectedColIdx.\n         * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n         */\n        const didNotFindLegalRowIdxWithinColumnIdx = -1;\n        for (let rowIdx = 0; rowIdx < this.state.squares.length; rowIdx++) {\n            if (this.state.squares[rowIdx][selectedColIdx] === null) {\n                return rowIdx;\n            }\n        }\n        return didNotFindLegalRowIdxWithinColumnIdx;\n    }\n\n    calculateWinner(board, mostRecentPlayer, mostRecentSelectionRowIdx, mostRecentSelectionColIdx) {\n        /**\n         * Returns the name of the winner HUMAN or AI. If no winner, returns null.\n         */\n\n        let winner = null;\n\n        const WINDOW = 4;\n\n        // if game just started, there is no winner\n        if (mostRecentSelectionRowIdx === null) {\n            return winner;\n        }\n\n        // Check horizontal\n        for (let colIdx = 0; colIdx + WINDOW <= TOTALNUMOFCOLS; colIdx++) {\n            const fourHorizontalAdjacentSquares = board[mostRecentSelectionRowIdx].slice(colIdx, colIdx + WINDOW);\n            if (fourHorizontalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n                winner = mostRecentPlayer;\n                return winner;\n            }\n        }\n\n\n        // Check vertical\n        for (let rowIdx = 0; rowIdx + WINDOW <= TOTALNUMOFROWS; rowIdx++) {\n            let matchingMostRecentPlayerCounter = 0;\n            for (let offset = 0; offset < WINDOW; offset++) {\n                if (board[rowIdx + offset][mostRecentSelectionColIdx] === mostRecentPlayer) {\n                    matchingMostRecentPlayerCounter++;\n                }\n                if (matchingMostRecentPlayerCounter === WINDOW) {\n                    winner = mostRecentPlayer;\n                    return winner;\n                }\n            }\n        }\n\n\n        // Check Diagonal\n\n        // check positively sloped diagonal... from bottom-left to top-right\n        const positiveDiagonalArr = [];\n        let rowIdx = mostRecentSelectionRowIdx;\n        let colIdx = mostRecentSelectionColIdx;\n\n        while (rowIdx - 1 >= 0 && colIdx - 1 >= 0) {\n            rowIdx--;\n            colIdx--;\n        }\n\n        while (rowIdx < TOTALNUMOFROWS && colIdx < TOTALNUMOFCOLS) {\n            positiveDiagonalArr.push(board[rowIdx][colIdx]);\n            rowIdx++;\n            colIdx++;\n        }\n\n        for (let i = 0; i + WINDOW <= positiveDiagonalArr.length; i++) {\n            const fourPositiveDiagonalAdjacentSquares = positiveDiagonalArr.slice(i, i + WINDOW);\n            if (fourPositiveDiagonalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n                winner = mostRecentPlayer;\n                return winner;\n            }\n        }\n\n        // check negatively sloped diagonal... from top-left to bottom-right\n        const negativeDiagonalArr = [];\n        rowIdx = mostRecentSelectionRowIdx;\n        colIdx = mostRecentSelectionColIdx;\n\n        while (rowIdx - 1 >= 0 && colIdx + 1 < TOTALNUMOFCOLS) {\n            rowIdx--;\n            colIdx++;\n        }\n\n        while (rowIdx < TOTALNUMOFROWS && colIdx >= 0) {\n            negativeDiagonalArr.push(board[rowIdx][colIdx]);\n            rowIdx++;\n            colIdx--;\n        }\n\n        for (let i = 0; i + WINDOW <= negativeDiagonalArr.length; i++) {\n            const fourNegativeDiagonalAdjacentSquares = negativeDiagonalArr.slice(i, i + WINDOW);\n            if (fourNegativeDiagonalAdjacentSquares.every(val => val === mostRecentPlayer)) {\n                winner = mostRecentPlayer;\n                return winner;\n            }\n        }\n  \n\n        return winner; // if no winner was found, winner variable does not change from intial null initialization\n    }\n\n    render() {\n\n        let isGameOver = false;\n        if (this.state.winner !== null) {\n            isGameOver = true;\n        } else if (!this.state.squares.map(row => row.includes(null)).includes(true)) { // meaning every piece on the board is filled but no winner (implying a tie)\n            isGameOver = true;\n        }\n\n        // setup the display\n\n        const horizontalRule = <hr style={{visibility: \"hidden\", marginBottom: \"0\"}} />;\n        const button = <button className=\"fade-in\" style={{outline: \"none\", userSelect: \"none\"}} onClick={this.handleReset}>Reset</button>;\n        let greeting = <h5 className=\"d-flex justify-content-center fade-in\" >Good luck!</h5>;\n        let board = <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={this.handleClick} /></div>;\n\n        if (isGameOver) {\n            board = <div className=\"d-flex justify-content-center\"><Board squares={this.state.squares} onClick={() => {return; /* this does nothing... Disables onClick */}} /></div>;\n        }\n\n        if (this.state.winner === HUMAN) {\n            greeting = <h5 className=\"d-flex justify-content-center fade-in\">🎉 Congratulations! You won! 🎉</h5>;\n        } else if (this.state.winner === AI) {\n            greeting = <h5 className=\"d-flex justify-content-center fade-in\">The AI won! Try again!</h5>;\n        } else if (this.state.winner === null && isGameOver) { // this would mean the game ended in a tie\n            greeting = <h5 className=\"d-flex justify-content-center fade-in\">It's a draw! Try again!</h5>;\n        }\n\n        let display =   <>\n                            {greeting}\n                            <div style={{textAlign: \"center\"}}>\n                                {button}\n                                {horizontalRule}\n                            </div>\n                            {board}\n                        </>;\n\n        return (\n            <div className=\"container\">\n                <h4 className=\"d-flex justify-content-center fade-in\">Welcome to Connect 4!</h4>\n                {display}\n            </div>\n        );\n    };\n};\n\nexport default Connect4Game;"]},"metadata":{},"sourceType":"module"}