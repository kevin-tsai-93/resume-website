{"ast":null,"code":"import deepCopy2DArray from './deepCopy2DArray';\nexport default function minimax(board, depth, isMaximizingPlayer, maximizingPlayer, minimizingPlayer) {\n  /**\n   * minimax algorithm to determine how and where the ai will make its move\n   * refer to the pseudocode on wikipedia\n   * it will return the optimal rowIdx and colIdx, the location to place the piece onto the board\n   * return value looks like [optimalRowIdx, optimalColIdx]\n   * \n   * board is a row x col array\n   * depth tells you how far down the tree you will traverse to find the calculated score\n   * maximizingPlayer is the player that is trying to win... in this case the AI = \"ai\"\n   * minimizingPlayer is the player that is trying to prevent the maximizingPlayer from winning... in this case HUMAN = \"you\"\n   */\n  var TOTALNUMOFROWS = board.length; // might not need this here\n\n  var TOTALNUMOFCOLUMNS = board[0].length; // get all the possible moves that the player can drop onto the board\n  // will have 2 arrays: column index array and row index array\n  // refer to the note below about the relationship between these two arrays\n\n  var columnIndicesOfBoard = []; // this will look like [0,1,2,3,4,5,6]\n\n  for (var i = 0; i < TOTALNUMOFCOLUMNS; i++) {\n    columnIndicesOfBoard.push(i);\n  } // note that possibleRowIndicesToPlacePieceOntoBoard is relative to columnIndicesOfBoard\n  // i.e. columnIndicesOfBoard = [0,1,2,3,4,5,6]\n  // i.e. possibleRowIndicesToPlacePieceOntoBoard = [3,3,4,2,1,2,1]\n  // this means board[3][0]... board[3][1]... board[4][2]... board[2][3]... board[1][4]... etc are pieces that can be placed onto the board\n\n\n  var possibleRowIndicesToPlacePieceOntoBoard = columnIndicesOfBoard.map(function (colIdx) {\n    return findLegalRowIdxWithinColumn(board, colIdx);\n  }); // note that possibleRowIndicesToPlacePieceOntoBoard might have -1 values\n\n  var maxScore = null;\n  var optimalRowIdx;\n  var optimalColIdx;\n  var scoresForPossibleMovesArr = []; // delete this later\n\n  for (var _i = 0; _i < columnIndicesOfBoard.length; _i++) {\n    if (possibleRowIndicesToPlacePieceOntoBoard[_i] !== -1) {\n      var rowIdx = possibleRowIndicesToPlacePieceOntoBoard[_i];\n      var colIdx = columnIndicesOfBoard[_i];\n      var calculatedScore = calculateScoreForMove(rowIdx, colIdx, board, maximizingPlayer, minimizingPlayer);\n      scoresForPossibleMovesArr.push(calculatedScore); // delete this later\n\n      if (maxScore === null || calculatedScore >= maxScore) {\n        maxScore = calculatedScore;\n        optimalRowIdx = rowIdx;\n        optimalColIdx = colIdx;\n      }\n    }\n  }\n\n  alert(scoresForPossibleMovesArr); // delete this later\n\n  return [optimalRowIdx, optimalColIdx];\n}\n\nfunction isGameOver(board, maximizingPlayer, minimizingPlayer) {\n  if (isWinner(board, maximizingPlayer)) {\n    return true;\n  } else if (isWinner(board, minimizingPlayer)) {\n    return true;\n  } else if (isBoardAllFilled(board)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction isWinner(board, player) {\n  var WINDOW = 4;\n  var TOTALNUMOFROWS = board.length;\n  var TOTALNUMOFCOLUMNS = board[0].length; // check horizontal\n\n  for (var currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    for (var offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFCOLUMNS; offset++) {\n      var horizontalFourAdjacentSquares = newBoard[currRowIdx].slice(offset, offset + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(horizontalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Check vertical\n\n\n  for (var colIdx = 0; colIdx < board[0].length; colIdx++) {\n    for (var rowIdx = 0; rowIdx + WINDOW <= board.length; rowIdx++) {\n      var matchingPlayerCounter = 0;\n\n      for (var _offset = 0; _offset < WINDOW; _offset++) {\n        if (board[rowIdx + _offset][colIdx] === player) {\n          matchingPlayerCounter++;\n        }\n\n        if (matchingPlayerCounter === WINDOW) {\n          return true;\n        }\n      }\n    }\n  } // Check diagonals\n  // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (var _currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; _currRowIdx >= 0; _currRowIdx--) {\n    var aDiagonalOfSquaresArr = [];\n\n    for (var runningRowIdx = _currRowIdx, runningColIdx = 0; runningRowIdx < TOTALNUMOFROWS && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx++, runningColIdx++) {\n      aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n    }\n\n    for (var _offset2 = 0; _offset2 + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; _offset2++) {\n      var diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(_offset2, _offset2 + WINDOWLENGTH);\n\n      if (diagonalFourAdjacentSquares.every(function (val) {\n        return val === player;\n      })) {\n        return true;\n      }\n    }\n  } // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (var _currRowIdx2 = Math.floor(TOTALNUMOFROWS / 2); _currRowIdx2 < TOTALNUMOFROWS; _currRowIdx2++) {\n    var _aDiagonalOfSquaresArr = [];\n\n    for (var _runningRowIdx = _currRowIdx2, _runningColIdx = TOTALNUMOFCOLUMNS - 1; _runningRowIdx >= 0 && _runningColIdx > 0; _runningRowIdx--, _runningColIdx--) {\n      _aDiagonalOfSquaresArr.push(newBoard[_runningRowIdx][_runningColIdx]);\n    }\n\n    for (var _offset3 = 0; _offset3 + WINDOWLENGTH <= _aDiagonalOfSquaresArr.length; _offset3++) {\n      var _diagonalFourAdjacentSquares = _aDiagonalOfSquaresArr.slice(_offset3, _offset3 + WINDOWLENGTH);\n\n      score += calculateScoreForThese4Squares(_diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (var _currRowIdx3 = Math.floor(TOTALNUMOFROWS / 2); _currRowIdx3 < TOTALNUMOFROWS; _currRowIdx3++) {\n    var _aDiagonalOfSquaresArr2 = [];\n\n    for (var _runningRowIdx2 = _currRowIdx3, _runningColIdx2 = 0; _runningRowIdx2 >= 0 && _runningColIdx2 < TOTALNUMOFCOLUMNS; _runningRowIdx2--, _runningColIdx2++) {\n      _aDiagonalOfSquaresArr2.push(newBoard[_runningRowIdx2][_runningColIdx2]);\n    }\n\n    for (var _offset4 = 0; _offset4 + WINDOWLENGTH <= _aDiagonalOfSquaresArr2.length; _offset4++) {\n      var _diagonalFourAdjacentSquares2 = _aDiagonalOfSquaresArr2.slice(_offset4, _offset4 + WINDOWLENGTH);\n\n      score += calculateScoreForThese4Squares(_diagonalFourAdjacentSquares2, maximizingPlayer, minimizingPlayer);\n    }\n  } // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (var _currRowIdx4 = Math.floor(TOTALNUMOFROWS / 2) - 1; _currRowIdx4 >= 0; _currRowIdx4--) {\n    var _aDiagonalOfSquaresArr3 = [];\n\n    for (var _runningRowIdx3 = _currRowIdx4, _runningColIdx3 = TOTALNUMOFCOLUMNS - 1; _runningRowIdx3 < TOTALNUMOFROWS && _runningColIdx3 > 0; _runningRowIdx3++, _runningColIdx3--) {\n      _aDiagonalOfSquaresArr3.push(newBoard[_runningRowIdx3][_runningColIdx3]);\n    }\n\n    for (var _offset5 = 0; _offset5 + WINDOWLENGTH <= _aDiagonalOfSquaresArr3.length; _offset5++) {\n      var _diagonalFourAdjacentSquares3 = _aDiagonalOfSquaresArr3.slice(_offset5, _offset5 + WINDOWLENGTH);\n\n      score += calculateScoreForThese4Squares(_diagonalFourAdjacentSquares3, maximizingPlayer, minimizingPlayer);\n    }\n  }\n}\n\nfunction findLegalRowIdxWithinColumn(board, selectedColIdx) {\n  /**\n   * Returns the row index of a legal square that can be filled given the board (2 dimensional row x col).\n   * Note the legal square will be within the same column as selectedColIdx.\n   * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n   */\n  var didNotFindLegalRowIdxWithinColumnIdx = -1;\n\n  for (var rowIdx = 0; rowIdx < board.length; rowIdx++) {\n    if (board[rowIdx][selectedColIdx] === null) {\n      return rowIdx;\n    }\n  }\n\n  return didNotFindLegalRowIdxWithinColumnIdx;\n}\n\nfunction calculateScoreForThese4Squares(arr, maximizingPlayer, minimizingPlayer) {\n  /**\n   * Returns the score for the given arr, assuming the length of the arr is 4\n   */\n  var score = 0;\n\n  if (arr.filter(function (val) {\n    return val === maximizingPlayer;\n  }).length === 4) {\n    score += 100;\n  } else if (arr.filter(function (val) {\n    return val === maximizingPlayer;\n  }).length === 3 && arr.filter(function (val) {\n    return val === null;\n  }).length === 1) {\n    score += 5;\n  } else if (arr.filter(function (val) {\n    return val === maximizingPlayer;\n  }).length === 2 && arr.filter(function (val) {\n    return val === null;\n  }).length === 2) {\n    score += 2;\n  }\n\n  if (arr.filter(function (val) {\n    return val === minimizingPlayer;\n  }).length === 3 && arr.filter(function (val) {\n    return val === null;\n  }).length === 1) {\n    score -= 15;\n  }\n\n  return score;\n}\n\nfunction calculateScoreForMove(rowIdx, colIdx, board, maximizingPlayer, minimizingPlayer) {\n  /**\n   * Returns the score for placing maximizingPlayer's piece onto the board whose location is rowIdx and colIdx.\n   */\n  var score = 0;\n  var TOTALNUMOFROWS = board.length;\n  var TOTALNUMOFCOLUMNS = board[0].length;\n  var WINDOWLENGTH = 4;\n  var CENTERCOLUMNIDX = Math.floor(TOTALNUMOFCOLUMNS / 2);\n  var newBoard = deepCopy2DArray(board);\n  newBoard[rowIdx][colIdx] = maximizingPlayer; // score for center piece (preference center location)\n\n  for (var currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n    if (newBoard[currRowIdx][CENTERCOLUMNIDX] === maximizingPlayer) {\n      score += 2;\n    }\n  } // Score for horizontal\n  // Scores are calculated for window lengths of 4\n\n\n  for (var _currRowIdx5 = 0; _currRowIdx5 < TOTALNUMOFROWS; _currRowIdx5++) {\n    for (var offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFCOLUMNS; offset++) {\n      var horizontalFourAdjacentSquares = newBoard[_currRowIdx5].slice(offset, offset + WINDOWLENGTH);\n\n      score += calculateScoreForThese4Squares(horizontalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Score for vertical\n  // Scores are calculated for window lengths of 4\n\n\n  for (var currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n    var aColumnOfSquaresArr = [];\n\n    for (var _currRowIdx6 = 0; _currRowIdx6 < TOTALNUMOFROWS; _currRowIdx6++) {\n      aColumnOfSquaresArr.push(newBoard[_currRowIdx6][currColIdx]);\n    }\n\n    for (var _offset6 = 0; _offset6 + WINDOWLENGTH <= TOTALNUMOFROWS; _offset6++) {\n      var verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(_offset6, _offset6 + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(verticalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Score for diagonal\n  // Scores are calculated for window lengths of 4\n  // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (var _currRowIdx7 = Math.floor(TOTALNUMOFROWS / 2) - 1; _currRowIdx7 >= 0; _currRowIdx7--) {\n    var aDiagonalOfSquaresArr = [];\n\n    for (var runningRowIdx = _currRowIdx7, runningColIdx = 0; runningRowIdx < TOTALNUMOFROWS && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx++, runningColIdx++) {\n      aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n    }\n\n    for (var _offset7 = 0; _offset7 + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; _offset7++) {\n      var diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(_offset7, _offset7 + WINDOWLENGTH);\n      score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n    }\n  } // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (var _currRowIdx8 = Math.floor(TOTALNUMOFROWS / 2); _currRowIdx8 < TOTALNUMOFROWS; _currRowIdx8++) {\n    var _aDiagonalOfSquaresArr4 = [];\n\n    for (var _runningRowIdx4 = _currRowIdx8, _runningColIdx4 = TOTALNUMOFCOLUMNS - 1; _runningRowIdx4 >= 0 && _runningColIdx4 > 0; _runningRowIdx4--, _runningColIdx4--) {\n      _aDiagonalOfSquaresArr4.push(newBoard[_runningRowIdx4][_runningColIdx4]);\n    }\n\n    for (var _offset8 = 0; _offset8 + WINDOWLENGTH <= _aDiagonalOfSquaresArr4.length; _offset8++) {\n      var _diagonalFourAdjacentSquares4 = _aDiagonalOfSquaresArr4.slice(_offset8, _offset8 + WINDOWLENGTH);\n\n      score += calculateScoreForThese4Squares(_diagonalFourAdjacentSquares4, maximizingPlayer, minimizingPlayer);\n    }\n  } // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n\n\n  for (var _currRowIdx9 = Math.floor(TOTALNUMOFROWS / 2); _currRowIdx9 < TOTALNUMOFROWS; _currRowIdx9++) {\n    var _aDiagonalOfSquaresArr5 = [];\n\n    for (var _runningRowIdx5 = _currRowIdx9, _runningColIdx5 = 0; _runningRowIdx5 >= 0 && _runningColIdx5 < TOTALNUMOFCOLUMNS; _runningRowIdx5--, _runningColIdx5++) {\n      _aDiagonalOfSquaresArr5.push(newBoard[_runningRowIdx5][_runningColIdx5]);\n    }\n\n    for (var _offset9 = 0; _offset9 + WINDOWLENGTH <= _aDiagonalOfSquaresArr5.length; _offset9++) {\n      var _diagonalFourAdjacentSquares5 = _aDiagonalOfSquaresArr5.slice(_offset9, _offset9 + WINDOWLENGTH);\n\n      score += calculateScoreForThese4Squares(_diagonalFourAdjacentSquares5, maximizingPlayer, minimizingPlayer);\n    }\n  } // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n\n\n  for (var _currRowIdx10 = Math.floor(TOTALNUMOFROWS / 2) - 1; _currRowIdx10 >= 0; _currRowIdx10--) {\n    var _aDiagonalOfSquaresArr6 = [];\n\n    for (var _runningRowIdx6 = _currRowIdx10, _runningColIdx6 = TOTALNUMOFCOLUMNS - 1; _runningRowIdx6 < TOTALNUMOFROWS && _runningColIdx6 > 0; _runningRowIdx6++, _runningColIdx6--) {\n      _aDiagonalOfSquaresArr6.push(newBoard[_runningRowIdx6][_runningColIdx6]);\n    }\n\n    for (var _offset10 = 0; _offset10 + WINDOWLENGTH <= _aDiagonalOfSquaresArr6.length; _offset10++) {\n      var _diagonalFourAdjacentSquares6 = _aDiagonalOfSquaresArr6.slice(_offset10, _offset10 + WINDOWLENGTH);\n\n      score += calculateScoreForThese4Squares(_diagonalFourAdjacentSquares6, maximizingPlayer, minimizingPlayer);\n    }\n  }\n\n  return score;\n}","map":{"version":3,"sources":["/Users/kevintsai/Desktop/resume_website/components/portfolio/connect4/minimax.js"],"names":["deepCopy2DArray","minimax","board","depth","isMaximizingPlayer","maximizingPlayer","minimizingPlayer","TOTALNUMOFROWS","length","TOTALNUMOFCOLUMNS","columnIndicesOfBoard","i","push","possibleRowIndicesToPlacePieceOntoBoard","map","colIdx","findLegalRowIdxWithinColumn","maxScore","optimalRowIdx","optimalColIdx","scoresForPossibleMovesArr","rowIdx","calculatedScore","calculateScoreForMove","alert","isGameOver","isWinner","isBoardAllFilled","player","WINDOW","currRowIdx","offset","WINDOWLENGTH","horizontalFourAdjacentSquares","newBoard","slice","score","calculateScoreForThese4Squares","matchingPlayerCounter","Math","floor","aDiagonalOfSquaresArr","runningRowIdx","runningColIdx","diagonalFourAdjacentSquares","every","val","selectedColIdx","didNotFindLegalRowIdxWithinColumnIdx","arr","filter","CENTERCOLUMNIDX","currColIdx","aColumnOfSquaresArr","verticalFourAdjacentSquares"],"mappings":"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","sourcesContent":["import deepCopy2DArray from './deepCopy2DArray';\n\nexport default function minimax(board, depth, isMaximizingPlayer, maximizingPlayer, minimizingPlayer) {\n    /**\n     * minimax algorithm to determine how and where the ai will make its move\n     * refer to the pseudocode on wikipedia\n     * it will return the optimal rowIdx and colIdx, the location to place the piece onto the board\n     * return value looks like [optimalRowIdx, optimalColIdx]\n     * \n     * board is a row x col array\n     * depth tells you how far down the tree you will traverse to find the calculated score\n     * maximizingPlayer is the player that is trying to win... in this case the AI = \"ai\"\n     * minimizingPlayer is the player that is trying to prevent the maximizingPlayer from winning... in this case HUMAN = \"you\"\n     */\n\n    const TOTALNUMOFROWS = board.length; // might not need this here\n    const TOTALNUMOFCOLUMNS = board[0].length;\n\n    // get all the possible moves that the player can drop onto the board\n    // will have 2 arrays: column index array and row index array\n    // refer to the note below about the relationship between these two arrays\n    const columnIndicesOfBoard = []; // this will look like [0,1,2,3,4,5,6]\n    for (let i = 0; i < TOTALNUMOFCOLUMNS; i++) {\n        columnIndicesOfBoard.push(i);\n    }\n    // note that possibleRowIndicesToPlacePieceOntoBoard is relative to columnIndicesOfBoard\n    // i.e. columnIndicesOfBoard = [0,1,2,3,4,5,6]\n    // i.e. possibleRowIndicesToPlacePieceOntoBoard = [3,3,4,2,1,2,1]\n    // this means board[3][0]... board[3][1]... board[4][2]... board[2][3]... board[1][4]... etc are pieces that can be placed onto the board\n    const possibleRowIndicesToPlacePieceOntoBoard = columnIndicesOfBoard.map(colIdx => findLegalRowIdxWithinColumn(board, colIdx)); // note that possibleRowIndicesToPlacePieceOntoBoard might have -1 values\n    let maxScore = null;\n    let optimalRowIdx;\n    let optimalColIdx;\n\n\n\n    const scoresForPossibleMovesArr = []; // delete this later\n\n    for (let i = 0; i < columnIndicesOfBoard.length; i++) {\n        if (possibleRowIndicesToPlacePieceOntoBoard[i] !== -1) {\n            let rowIdx = possibleRowIndicesToPlacePieceOntoBoard[i];\n            let colIdx = columnIndicesOfBoard[i];\n            let calculatedScore = calculateScoreForMove(rowIdx, colIdx, board, maximizingPlayer, minimizingPlayer);\n            scoresForPossibleMovesArr.push(calculatedScore); // delete this later\n            if (maxScore === null || calculatedScore >= maxScore) {\n                maxScore = calculatedScore;\n                optimalRowIdx = rowIdx;\n                optimalColIdx = colIdx;\n            }\n        }\n    }\n    alert(scoresForPossibleMovesArr); // delete this later\n    return [optimalRowIdx, optimalColIdx];\n}\n\nfunction isGameOver(board, maximizingPlayer, minimizingPlayer) {\n    if (isWinner(board, maximizingPlayer)) {\n        return true;\n    } else if (isWinner(board, minimizingPlayer)) {\n        return true;\n    } else if (isBoardAllFilled(board)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction isWinner(board, player) {\n    const WINDOW = 4;\n    const TOTALNUMOFROWS = board.length;\n    const TOTALNUMOFCOLUMNS = board[0].length;\n\n    // check horizontal\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFCOLUMNS; offset++) {\n            const horizontalFourAdjacentSquares = newBoard[currRowIdx].slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(horizontalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Check vertical\n    for (let colIdx = 0; colIdx < board[0].length; colIdx++) {\n        for (let rowIdx = 0; rowIdx + WINDOW <= board.length; rowIdx++) {\n            let matchingPlayerCounter = 0;\n            for (let offset = 0; offset < WINDOW; offset++) {\n                if (board[rowIdx + offset][colIdx] === player) {\n                    matchingPlayerCounter++;\n                }\n                if (matchingPlayerCounter === WINDOW) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    // Check diagonals\n\n    // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx < TOTALNUMOFROWS && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx++, runningColIdx++) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            if (diagonalFourAdjacentSquares.every(val => val === player)) {\n                return true;\n            }\n        }\n    }\n\n    // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx >= 0 && runningColIdx > 0; runningRowIdx--, runningColIdx--) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx >= 0 && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx--, runningColIdx++) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx < TOTALNUMOFROWS && runningColIdx > 0; runningRowIdx++, runningColIdx--) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n}\n\nfunction findLegalRowIdxWithinColumn(board, selectedColIdx) {\n    /**\n     * Returns the row index of a legal square that can be filled given the board (2 dimensional row x col).\n     * Note the legal square will be within the same column as selectedColIdx.\n     * If all the squares within selectedColIdx's column are filled, then this function returns -1.\n     */\n    const didNotFindLegalRowIdxWithinColumnIdx = -1;\n    for (let rowIdx = 0; rowIdx < board.length; rowIdx++) {\n        if (board[rowIdx][selectedColIdx] === null) {\n            return rowIdx;\n        }\n    }\n    return didNotFindLegalRowIdxWithinColumnIdx;\n}\n\nfunction calculateScoreForThese4Squares(arr, maximizingPlayer, minimizingPlayer) {\n    /**\n     * Returns the score for the given arr, assuming the length of the arr is 4\n     */\n\n    let score = 0;\n\n    if (arr.filter(val => val === maximizingPlayer).length === 4) {\n        score += 100;\n    } else if (arr.filter(val => val === maximizingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n        score += 5;\n    } else if (arr.filter(val => val === maximizingPlayer).length === 2 && arr.filter(val => val === null).length === 2) {\n        score += 2;\n    }\n\n    if (arr.filter(val => val === minimizingPlayer).length === 3 && arr.filter(val => val === null).length === 1) {\n        score -= 15;\n    }\n\n    return score;\n}\n\nfunction calculateScoreForMove(rowIdx, colIdx, board, maximizingPlayer, minimizingPlayer) {\n    /**\n     * Returns the score for placing maximizingPlayer's piece onto the board whose location is rowIdx and colIdx.\n     */\n\n    let score = 0;\n\n    const TOTALNUMOFROWS = board.length;\n    const TOTALNUMOFCOLUMNS = board[0].length;\n    const WINDOWLENGTH = 4;\n    const CENTERCOLUMNIDX = Math.floor(TOTALNUMOFCOLUMNS / 2);\n\n    const newBoard = deepCopy2DArray(board);\n    newBoard[rowIdx][colIdx] = maximizingPlayer;\n\n    // score for center piece (preference center location)\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        if (newBoard[currRowIdx][CENTERCOLUMNIDX] === maximizingPlayer) {\n            score += 2;\n        }\n    }\n\n\n    // Score for horizontal\n    // Scores are calculated for window lengths of 4\n    for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFCOLUMNS; offset++) {\n            const horizontalFourAdjacentSquares = newBoard[currRowIdx].slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(horizontalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Score for vertical\n    // Scores are calculated for window lengths of 4\n    for (let currColIdx = 0; currColIdx < TOTALNUMOFCOLUMNS; currColIdx++) {\n        const aColumnOfSquaresArr = [];\n        for (let currRowIdx = 0; currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n            aColumnOfSquaresArr.push(newBoard[currRowIdx][currColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= TOTALNUMOFROWS; offset++) {\n            const verticalFourAdjacentSquares = aColumnOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(verticalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Score for diagonal\n    // Scores are calculated for window lengths of 4\n\n    // Calculate score for positive sloping diagonal (bottom-left to top-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx < TOTALNUMOFROWS && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx++, runningColIdx++) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Continue calculating the score for positive sloping diagonal (bottom-left to top-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx >= 0 && runningColIdx > 0; runningRowIdx--, runningColIdx--) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Calculate score for negative sloping diagonal (top-left to bottom-right FOR THE LEFT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2); currRowIdx < TOTALNUMOFROWS; currRowIdx++) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = 0; runningRowIdx >= 0 && runningColIdx < TOTALNUMOFCOLUMNS; runningRowIdx--, runningColIdx++) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    // Continue calculating the score for negative sloping diagonal (top-left to bottom-right FOR THE RIGHT HALF OF THE BOARD)\n    for (let currRowIdx = Math.floor(TOTALNUMOFROWS / 2) - 1; currRowIdx >= 0; currRowIdx--) {\n        const aDiagonalOfSquaresArr = [];\n        for (let runningRowIdx = currRowIdx, runningColIdx = TOTALNUMOFCOLUMNS - 1; runningRowIdx < TOTALNUMOFROWS && runningColIdx > 0; runningRowIdx++, runningColIdx--) {\n            aDiagonalOfSquaresArr.push(newBoard[runningRowIdx][runningColIdx]);\n        }\n        for (let offset = 0; offset + WINDOWLENGTH <= aDiagonalOfSquaresArr.length; offset++) {\n            const diagonalFourAdjacentSquares = aDiagonalOfSquaresArr.slice(offset, offset + WINDOWLENGTH);\n            score += calculateScoreForThese4Squares(diagonalFourAdjacentSquares, maximizingPlayer, minimizingPlayer);\n        }\n    }\n\n    return score;\n}"]},"metadata":{},"sourceType":"module"}